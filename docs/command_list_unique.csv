
Command,Description
-h | -help,Lists the descriptions of the most commonly used
-mcg,Enables the mixed code generation model in VCS backend. Part of code is aggressively optimized by the available C compilers.
-v <file_name>,"Specifies a Verilog library file. VCS looks in this file for definitions of the module and UDP instances that VCS found in your source code, but for which it did not find the corresponding module or UDP definitions in your source code."
-y <directory>,Specifies a Verilog library directory.
+libext,the file name extension of the files you want VCS to look for in these directories.
+libext+extension+,"Specifies that VCS searches only for files with the specified file name extensions in a library directory. You can specify more than one extension, separating the extensions with the plus (+) character. | Specifies that VCS searches only for files with the specified file name extensions in a library directory."
+liborder,"Specifies searching for module definitions for unresolved module instances through the remainder of the library where VCS finds the instance, then searching the next and then the next library on the vcs command line before searching in the first library on the command line. | unresolved module instances through the remainder of the library where vlogan finds the instance, then searching the subsequent library on the vlogan command line before searching in the first library in the command line. Analysis Options"
+librescan,Specifies always searching libraries for module definitions for unresolved module instances beginning with the first library on the vcs command line. | definitions of unresolved module instances beginning with the first library in the vlogan command line.
+libverbose,"Tells VCS to display a message when it finds a module definition in a source file in a Verilog library directory that resolves a module instantiation statement that VCS read in your source files, a library file, or in another file in a library directory. The message is as follows:"
-Mdirectory=<directory> | -Mlib=<dir>,"Specifies the incremental compile directory. The default name for this directory is csrc, and its default location is your current directory. You can substitute the shorter -Mdir for -Mdirectory. -Mdir-Mdir [-]"
-Mupdate[=0],"Specifies the default condition, incremental compilation and updating the makefile."
-Mmakep=make_path,Specifies the make path.
-noincrcomp,Disables incremental compilation.
-diskopt,Saves disk space by compressing various files under the simv.daidir directory.
-sverilog,"Enables SystemVerilog constructs specified in the IEEE Standard of SystemVerilog, IEEE Std 1800-2009. | VCS enables compiling Verilog or SystemVerilog code. | Enables the analysis of SystemVerilog source code."
-tbrca,other debug options to enable optimal debug capabilities for TBRCA.
-ignore keyword_argument,Suppresses warning messages depending on which keyword argument is specified.
-error=UNIQUE,VCS reports unique violations as error conditions.
-error=PRIORITY,VCS reports priority violations as error conditions.
"-error=UNIQUE,PRIORITY",VCS reports unique and priority violations as error conditions.
-assert keyword_argument,time. | the -assert maxfail and -assert finish_maxfail options used at compile time.
-assert async_disable,"Converts disabled signal to its sampled value. Use at the same time, and you have to use the sample value of the disable signal. Therefore, if you have an assertion assert property (@(posedge clk) disable iff(rst) a) and if you apply the -assert assert property (@(posedge clk) disable iff($sampled(rst)) a)."
-assert enable_diag,Enables further control of results reporting with enabled only if you compile the design with this | The runtime assert options are enabled only if you compile the • -assert success • -assert summary • -assert maxcover=N • -assert maxsuccess=N
-assert funchier,Enables enhanced reporting for assertions in functions. | Enables the new function naming convention. –ova_enable_case               Enable compilation of OVA case pragmas.
-assert hier=file_name,You can use the -assert hier=file_name enabling and disabling SystemVerilog assertions.
-assert enable_hier,"hier=file.txt[-] hier=file.txtassert -assert hier=file.txt, which allows turning assertions on or off. | -assert hier=file.txtassert hier=file.txt[-] hier=file.txt, which allows turning assertions on or off. The following list of assertion options enabled when -assert • -assert hier • -assert maxfail=N • -assert finish_maxfail=N"
-assert filter_past,"For assertions that are defined with the $past system $pastignoring task, ignore these assertions when the past history buffer is empty. For instance, at the very beginning of the simulation, the past history buffer is empty. Therefore, the first sampling point and subsequent sampling points should be ignored until the past buffer has been filled with respect to the sampling point."
-assert offending_values,Enables the reporting of the values of all variables used in the assertion failure messages. | You can use the -assert offending_values compile-time the assertion failure messages.
-assert disable,"Disables all SystemVerilog assertions in the design. | To disable all SVAs in the design, use the -assert disable"
-assert disable_cover,"When you include the -cm assert compile-time and assert[-] assert-cm -cm statements in the assertion coverage reports. This keyword prevents cover statements from appearing in these reports. | To disable assertion coverage, use the -assert disable_cover coverage, and write an assertion coverage database during simulation."
-assert disable_assert,Disables only the assert and assume directives without affecting the cover directives. It complements the existing control options which allows you to disable only cover directives or all of the assertions such as assert/assume/cover. | Disables the property checks (assert and assume directives) and retains assertion coverage (cover directives).
-assert disable_rep_opt,"Specifying a delay or a repetition value greater than 200 in the assertion expression affects both compile-time and runtime performance. Therefore, VCS optimizes expression and issues a warning message as follows: Warning-[SVA-LDRF] Large delay or repetition found. Large delay or repetition found (data ##[0:200] (!data)). VCS will optimize compile time. However it may affect runtime. ""test.v"", 8"
-assert dumpoff,Disables the dumping of SVA information in the VPD file during simulation. | Disables the dumping of SVA information in the VPD file
-assert vpiSeqBeginTime,Enables you to see the simulation time that a SystemVerilog assertion sequence starts when using Debussy.
-assert vpiSeqFail,Enables you to see the simulation time that a SystemVerilog assertion sequence doesn’t match when using Debussy.
+lint=PWLNT:<max_count>,"Enables the PWLNT lint messages when $past is used in the code with the number of clock ticks exceeding 5. You can restrict the number of PWLNT lint messages for a particular compilation using the max_count argument. –ova_enable_case               Enables the compilation of OVA case pragmas only, when used without -Xova or -ova_inline. All inlined –Xova-Xova[-] –ova_inline-ova_inline OVA assertion pragmas are ignored."
-ntb_define macro,Specifies any OpenVera macro name on the command line. You can specify multiple macro names using the plus (+) character. | Specifies any OpenVera macro name on the command line.
-ntb_filext .ext,Specifies an OpenVera file name extension. You can specify multiple file name extensions using the plus (+) character. | Specifies an OpenVera file name extension.
-ntb_incdir <directory_path>,Specifies the include directory path for OpenVera files. You can specify multiple include directories using the plus (+) character.
-ntb_noshell,Tells VCS not to generate the shell file. Use this -ntb_opts keyword_argument
-ntb_opts sv_fmt,"The default padding used in displayed or printed left padding. For example, when -ntb_opts sv_fmt is used, the result of"
-ntb_opts tb_timescale=<value>,"Specifies an overriding timescale for the testbench, whenever the required testbench timescale is different from that of the design. It must be used in the timescale for the design."
-ntb_opts tokens,"Pre-processes the OpenVera files to generate two files, tokens.vr and tokens.vrp. The tokens.vr contains the preprocessed result of the non-encrypted OpenVera files, while the tokens.vrp contains the pre-processed result of the encrypted OpenVera files. If there is no encrypted OpenVera file, VCS sends all the OpenVera pre-processed results to the tokens.vr file. use_sigprop                      Enables the signal property access functions. For example, vera_get_ifc_name()."
-ntb_shell_only,compiling a testbench separately from the design file.
-ntb_sfname <filename>,Specifies the file name of the testbench shell.
-ntb_sname <module_name>,Specifies the name and directory where VCS writes the testbench shell module.
-ntb_spath,Specifies the directory where VCS writes the testbench shell and shared object files. The default is the compilation directory.
-ntb_vipext .ext,Specifies an OpenVera encrypted-mode file extension to mark files for processing in OpenVera encrypted encrypted-mode extensions .vrp and .vrhp are not overridden and will always be in effect. You can pass multiple file extensions at the same time using the plus (+) character.
-v95,Specifies not recognizing Verilog 2001 keywords.
+systemverilogext+ext,Specifies a file name extension for SystemVerilog source files. If you use a different file name extension for the SystemVerilog part of your source code and omitted.
+verilog2001ext+ext,Specifies a file name extension for Verilog 2001 source files.
+verilog1995ext+ext,"Specifies a file name extension for Verilog 1995 1995 code that would be invalid in Verilog 2001 or SystemVerilog code, such as using Verilog 2001 or SystemVerilog keywords, like localparam and logic, as names. Note: Do not enter all three of these options on the same command line."
-extinclude,"If a source file for one version of Verilog contains the 'include compiler directive, VCS by default compiles ‘include the included file for the same version of Verilog, even if the included file has a different filename extension. If you want VCS to compile the included file with the version specified by its extension, enter this | the version specified by its extension."
+vcs+initreg+random,"Initializes all bits of the Verilog variables, registers defined in sequential UDPs, and memories including multi-dimensional arrays (MDAs) in your design to random value 0 or 1, at time zero. The default random seed is used. | Initializes all variables, registers and memories to random value 0 or 1, with the default seed. | +vcs+initreg+random."
+vcs+initreg+config+config_file,"Specifies a configuration file for initializing Verilog variables, registers defined in sequential UDPs, and memories including multi-dimensional arrays (MDAs) in your design, at time zero. In the configuration file, you can define the parts of a design to apply the initialization and the initialization values of the variables. | Specifies runtime configuration file config_file and overrides compile-time configuration file, if specified. | Uses specified seed for generating | Issues a warning message, ignores"
+vcs+initreg+random+nomem,Disables initialization of memories or allows initialization of variables that do not used when the +vcs+initreg+random or specified at compile-time.
+vcs+initreg+random+noreg,Disables initialization of variables that do not be used When the +vcs+initreg+random or specified at compile-time.
+rad,Performs Radiant Technology optimizations on your design. These optimizations are also enabled for SystemVerilog part of the design.
+optconfigfile+filename,Specifies a configuration file that lists the parts of your design you want to optimize (or not optimize) and the level of optimization for these parts. You can also use the configuration file to specify ACC write capabilities.
-R,Runs the executable file immediately after VCS links it together. Note: extra options are expected at runtime. | Runs the executable file immediately after VCS links it together.
-sdf min|typ|max:instance_name:file.sdf,"Enables SDF annotation. Minimum, typical, or maximum values specified in file.sdf are annotated on the instance, instance_name."
+allmtm,"Specifies compiling separate files for minimum, typical, and maximum delays when there are min:typ:max delay triplets in SDF files. If you use this or +maxdelays options at runtime to specify which with the +maxdelays, +mindelays, or +typdelays +maxdelays+maxdelays[maxdelays] +mindelays+mindelays[mindelays] +typdelays+typdelays[typdelays] compile-time options."
+charge_decay,"Enables charge decay in trireg nets. Charge decay does not work if you connect the trireg to a transistor (bi-directional pass) switch such as tran, rtran, tranif1, or rtranif0."
-hsopt=chargedecay,VCS optimization under hsopt related to +charge_decay.
+delay_mode_path,"Uses only delay specifications in module-path delays in specify blocks. Overrides all the delay specifications on all gates, switches, and continuous assignments to zero."
+delay_mode_zero,"Removes delay specifications on all gates, switches, continuous assignments, and module paths."
+delay_mode_unit,"Overrides all the delay specifications in module-path delays in specify blocks to zero delays. Overrides all the delay specifications on all gates, switches, and continuous assignments to the shortest time precision argument of all the 'timescale compiler directives in the source code. The default time unit and time precision argument of the 'timescale compiler directive is 1s. | switches, and continuous assignments to the shortest time precision argument of all the 'timescale compiler directives in the source code. Analysis Options"
+delay_mode_distributed,"Overrides all the delay specifications in module-path delays in specify blocks to zero delays. Uses only the delay specifications on all gates, switches, and continuous assignments."
-add_seq_delay,the sequential User-Defined Primitives (UDPs) without delays.
+maxdelays,"Specifies using the maximum timing delays in the min:typ:max delay triplets when compiling the SDF file. The mtm_spec argument to the $sdf_annotate | Specifies using the maximum delays in min:typ:max delay triplets in module path delays and timing checks, if you Also specifies using the maximum timing delays in min:typ:max delay triplets in an uncompiled SDF file."
+mindelays,"Specifies using the minimum timing delays in the min:typ:max delay triplets when compiling the SDF file. The mtm_spec argument to the $sdf_annotate | Specifies using the minimum delays in min:typ:max delay triplets in module path delays and timing checks, if you Also specifies using the minimum timing delays in min:typ:max delay triplets in an uncompiled SDF file."
+typdelays,"Specifies using the typical timing delays in min:typ:max delay triplets when compiling the SDF file. The mtm_spec argument to the $sdf_annotate | Specifies using the typical delays in min:typ:max delay triplets in module path delays and timing checks, if you compiled your using the typical timing delays in min:typ:max delay triplets in an uncompiled SDF file."
+multisource_int_delays,"Enables the multisource INTERCONNECT feature, including transport delays with full pulse control."
+nbaopt,Removes all intra-assignment delays in all the non-blocking assignment statements in the design.
+sdf_nocheck_celltype,"For a module instance to which an SDF file back-annotates delay data, disables comparing the module identifier in the source code with the CELLTYPE entry in the SDF file."
+transport_int_delays,Enables transport delays for delays on nets with a delay back-annotated from an INTERCONNECT entry in an SDF file. The default is inertial delays.
+transport_path_delays,Enables transport delays for module-path delays.
-sdfretain,Enables timing annotation as specified by a RETAIN entry on IOPATH delays.
+iopath+edge+sub-option,IOPATH SDF file entries.
+iopath+edge+strict,Enables warning message for edge sensitive input port in the SDF file where corresponding arc is not found in Verilog model. The data from SDF is not back annotated to the Verilog model.
+iopath+edge+ignore,by ignoring the edge in SDF.
+mp64,delays up to 64 bits. It supports both native delays in SDF and scaled delays due to a timescale difference.
+csdf+precompile,Precompiles your SDF file into a format that VCS can parse when it compiles your Verilog code.
-diag=sdf:icverbose,Enables the sdfAnnotateInfo file to display the total number of INTERCONNECT statement in an SDF file and the number of successfully annotated INTERCONNECT statement in an SDF file.
+pathpulse,Enables the search for PATHPULSE$ specparam in specify blocks.
+nospecify,Suppresses module-path delays and timing checks in blockssuppressing specify simulation performance.
+notimingcheck,Disables timing check system tasks in the design.
+no_notifier,Disables toggling of the notifier register that you specify in some timing check system tasks. This messages when VCS finds a timing violation that you specified in a timing check.
+no_pulse_msg,"Suppresses pulse error messages, however, not the generation of StE values at module path outputs when a pulse error condition occurs."
+no_tchk_msg,"Disables display of timing violations, but does not disable the toggling of notifier registers in timing"
+pulse_e/number,"Displays an error message and propagates an x value for any path pulse whose width is less than or equal to the percentage of the module-path delay specified by the number argument, but is still greater than the percentage of the module-path delay specified by the"
+pulse_r/number,Rejects any pulse whose width is less than number pulses narrow pulsesfiltering out percent of the module-path delay. The number argument is in the range of 0 to 100.
+pulse_int_r,applies only to INTERCONNECT delays.
+pulse_int_e,+pulse_e applies only to INTERCONNECT delays.
+pulse_on_event,"Specifies that when VCS encounters a pulse shorter than the module-path delay, VCS waits until the module-path delay elapses and then drives an x value on the module output port and displays an error message. It drives that x value for a simulation time equal to the length of the short pulse or until another simulation event drives a value on the output port."
+pulse_on_detect,"Specifies that when VCS encounters a pulse shorter than the module-path delay, VCS immediately drives an x value on the module output port, and displays an error message. It does not wait until the module-path delay elapses. It drives that x value until the short pulse propagates through the module or until another simulation event drives a value on the output port."
-negdelay,Enables the use of negative values in IOPATH IOPATH delaysSDF filesnegative values enablingSDF filesIOPATH delaysnegative values enabling and INTERCONNECT entries in SDF files. INTERCONNECT delaysSDF filesnegative values enablingSDF filesINTERCONNECT delaysnegative values enabling
+neg_tchk,Enables negative values in timing checks.
+old_ntc,Prevents the other timing checks from using delayed versions of the signals in the $setuphold and $recrem timing checks.
+NTC2,"In $setuphold and $recrem timing checks, specifies $setuphold $recrem checking the timestamp and timecheck conditions when the original data and reference signals change value instead of when their delayed versions change value."
-simprofile time | mem,Specifies the type of simulation profiling you want done.
-f <filename>,"Specify a file that contains a list of source files and compile-time options, including C source files and object files."
-file <filename>,Specify a file that contains a list of source files and source files and object files. with (-) character.
-F <filename>,specify a file list and a path to search for the files.
+plusarg_save,the executable.
+applylearn+filename,Recompiles your design to enable only the ACC capabilities that you needed for the debugging operations you did during a previous simulation of the design.
-e new_name_for_main,Specifies the name of your main() routine. You write your own main() routine when you are writing a C++ application or when your application does some processing before starting the simv executable. Note: Cosimulation Interface.
-P pli.tab,Compiles a user-defined PLI definition table file.
+vpi,Enables the use of VPI PLI access routines.
+vpi+1,"Allows you to reduce the runtime memory by reducing the information storage for VPI interface at runtime. compile-time, but preserves the structural information."
+vpi+1+assertion,"Allows you to browse, enable, and disable SV and RT assertions to the base features of +vpi+1."
-load shared_library:registration_routine,Specifies the registration routine in a shared library for a VPI application.
+vc+[abstract+allhdrs+list],functions and calling these functions in your source code. See the VCS DirectC Interface User Guide. The • +abstract DirectCabstract accessspecifying Enables abstract access through vc_handles. • +allhdrs DirectCvc_hdrs.h filevc_hdrs.h filein DirectC Writes the vc_hdrs.h file that contains external function declarations that you can use in your Verilog code. • +list functions C/C++ the DirectClisting Displays all the C/C++ functions that you called in your Verilog source code.
+vcs+flush+log,Increases the frequency of flushing both the compilation and simulation log file buffers.
+vcs+flush+dump,Increases the frequency of flushing all VCD file buffers.
+vcs+flush+fopen,Increases the frequency of flushing all the buffers for the files opened by the $fopen system function.
+vcs+flush+all,"+vcs+flush+log, +vcs+flush+dump, and +vcs+flush+fopen options."
-lmc-swift,Includes the LMC SWIFT interface. interfaceincluding SWIFT LMC
-lmc-swift-template,Generates a Verilog template for a SWIFT Model.
-error,"Revises the +lint and +warn options, to control error and warning messages. With them you can: • Disable the display of any lint, warning, or error messages • Disable the display of specific messages • Limit the display of specific messages to a maximum number that you specify | Revises the +lint and +warn options, to control error and warning messages."
-suppress,Disables the display of error and warning messages.
+sdfverbose,"By default, VCS displays no more than ten warning and ten error messages about back-annotating delay display of all back-annotation warning and error messages. This default limitation on back-annotation messages applies only to messages displayed on the screen and written in the simulation log file. If you specify an SDF log file in the $sdf_annotate system task, this log file receives all messages. | Enables the display of all back-annotation messages."
+lint=[no]ID|none|all,"Enables messages that tell you when your Verilog code contains something that is bad style, but is often used in designs."
-no_error ID+ID,"Changes the error messages with the UPIMI and IOPCWM IDs to warning messages with the both IDs as arguments, for example:"
-q,"Quiet mode; suppresses messages such as those about the C compiler VCS is using, the source files VCS is parsing, the top-level modules, or the specified timescale. | Quiet mode; suppresses display of VCS header and summary information. | Suppresses compiler messages. | Suppresses all vlogan messages."
-V,"Verbose mode; compiles verbosely. The compiler compilingverbose messages driver program prints the commands it executes as it runs the C compiler, assembler, and linker. If you is also passed to runtime executable, just as if you had entered simv -V. | Verbose mode; displays VCS version and extended summary information. | Compiles verbosely. -check_all in the vcs command line. Usage % vcs -check_all Example % vcs -check_all -debug_access Enables the required debug capabilities in a simulation. You can optimize simulation performance by enabling only the required debug capabilities. Table 3 describes the supported options of -debug_access. quit, and dump commands. Table 3         Supported Options of -debug_access access to get value, and enables the UCLI get command. This is the minimum entire design. equivalent to -debug_access+r+fn. • Read capability on registers, variables, and nets • Write (deposit) capability on registers and variables • Force capability on registers, variables, and nets drivers -debug_access+r+drivers. line cbk -debug_access+r+cbk. cbkd registers, and variables defined in classes. Class object debugging is also enabled. thread equivalent to -debug_access+r+thread. class objects, but the capability is also applied to the remaining portion of the to:-debug_access+r+w+thread+line+cbk+cbkd. pp equivalent to:-debug_access+w+cbk+drivers. Table 3          Supported Options of -debug_access (Continued) dmptf tasks/functions. to:-debug_access+r+w+wn+f+fn+fwn+drivers+line+cbk+cbkd+ thread+class+pp+dmptf."
-Vt,"Verbose mode; provides CPU time information. Like -V, but also prints the amount of time used by each simulation to slow down."
+warn=[no]ID|none|all,Uses warning message IDs to enable or disable display of warning messages.
+error+count,"Enables you to increase the VCS elaboration error count limit. By default, VCS stops elaboration after reaching 10 errors."
-parse_only,"To make sure VCS quits normally before all syntax and semantic issues are checked, you need to enable -parse_only"
+nolibcell,Does not define as a cell modules defined in libraries unless they are under the `celldefine compiler ‘celldefine‘celldefine[celldefine] directive.
+nocelldefinepli+0,"Enables recording in VPD files, the transition times and values of nets and registers in all modules defined under the 'celldefine compiler directive or defined in a library that you specify with the -v or - -v-v[v] -y-y[y] these modules."
+nocelldefinepli+1,"Disables recording in VPD files, the transition times and values of nets and registers in all modules defined under the 'celldefine compiler directive. modules. Modules in a library file or directory are not the 'celldefine compiler directive."
+nocelldefinepli+2,"In VPD files, disables recording the transition times and values of nets and registers in all modules defined under the 'celldefine compiler directive or defined in a library that you specify with the -v or -y options, whether the modules in these libraries are defined under the 'celldefine compiler directive modules."
+nocelldefinepli+1+ports,Removes the PLI capabilities from `celldefine ‘celldefine‘celldefine[celldefine] modules but allows PLI access to port nodes and parameters.
+nocelldefinepli+2+ports,Removes the PLI capabilities from library and ‘celldefine modules and allows PLI access to port nodes and parameters.
-licwait <timeout>,"Enables VCS to retry for a license until timeout expires, where timeout is the time in minutes."
-licqueue,"Tells VCS to try for the license till it finds the license. If there are multiple jobs asking for a license, then any one of those jobs get the license (similar to the older VCS_LICENSE_WAIT               You must set the VCS_LICENSE_WAIT variable to 1 and wait. Thus, the first job to enter the queue gets the"
-ID,"Returns useful information about a number of things: the version of VCS that you have set the VCS_HOME environment variable to, the name of VCS_HOME your workstation, your workstation’s platform, the host ID of your workstation (used in licensing), the version of the VCS compiler (same as VCS) and the VCS build date. | Returns useful information."
-ld linker,"Specifies an alternate front-end linker. Only applicable linker linkingspecifying another in incremental compile mode, which is the default."
-LDFLAGS options,Passes options to the linker.
-c,"Tells VCS to compile the source files, generate the hand by linkinglinking intermediate C, assembly, or object files, and compile or assemble the C or assembly code, but not to link"
-lname,Links the name library to the resulting executable. linkinglinking a specified library to the executable Usage is the letter l followed by a name (no space between l and name). For example: -lm (instructs VCS to include the math library).
-Marchive=number_of_module_definitions,"By default, VCS compiles module definitions into individual object files and sends all the object files in a command line to the linker. Some platforms use a fixed-length buffer for the command line, and if VCS sends too long a list of object files, this buffer overflows and the link fails. A solution to this problem is to have the linker create temporary object files containing more than one module definition so there are fewer object files on the linker command line. object files and specify how many module definitions are in these files."
-picarchive,"-picarchive • Enable Position Independent Code (PIC) object file generation along with linking the shared object version of VCS libraries. • Archive generated PIC code into multiple shared objects inside simv.daidir or simv.db.dir directory. • Link the Shared objects at runtime to the final executable, instead of linking all the objects statically into final executable in a single step at compile-time."
-cc compiler,Specifies an alternate C compiler. another C code generatingspecifying compiler
-CC options,Passes options to the C compiler or assembler. C code generatingpassing options to the compiler
-CFLAGS options,"Passes options to C compiler. Multiple -CFLAGS are allowed. Allows passing of C compiler optimization levels. For example, if your C code, test.c, calls a library file in your VCS installation under $VCS_HOME/include, use any of the following"
-cpp,Specifies the C++ compiler.
-jnumber_of_processes,Specifies the number of processes that VCS forks for parallel parallel compilation. There is no space between the compilation when generating intermediate C files (-gen_c) and their parallel compilation.
-C,Stops after generating the C code intermediate files.
-O0,"Suppresses optimization for faster compilation (but compilation faster for optimization generatingsuppressing code C slower simulation). Suppresses optimization for how VCS both writes intermediate C code files and letter ""O"" followed by a zero with no space between them."
-Onumber,"Specifies an optimization level for how VCS both writes and compiles intermediate C code files. The number can be in the 0-4 range; 2 is the default, 0 and 1 decrease optimization, 3 and 4 increase followed by 0, 1, 2, 3 or 4 with no space between them. See above for additional information regarding the -O0 variant."
-override-cflags,"Tells VCS not to pass its default options to the C compiler. By default, VCS has a number of C compiler options that it passes to the C compiler. The options it passes depends on the platform, whether it is a 64-bit compilation, whether it is a mixed HDL design, and other factors. VCS passes these options and then passes the options you specify with the -CFLAGS"
-gfile cmdfile,Overrides the default values for design generics and parameters by using values from the file cmdfile. The cmdfile file contains assign commands targeting design generics and parameters.
-pvalue+parameter_hierarchical_name=value,Changes the specified parameter to the specified value.
-parameters filename,"Changes the parameters specified in the file to values specified in the file. The syntax for a line in the file is as follows: Changes the parameters specified in the file to values specified in the file. The syntax for a line in the file is as follows: assign value path_to_parameter The path to the parameter is similar to a hierarchical name, except that you use the forward slash character (/) instead of a period as the delimiter."
-xzcheck [nofalseneg],Checks all the conditional expressions in the design and displays a warning message every time VCS evaluates a conditional expression to have an x or z value. nofalseneg                              Suppress the warning message when the value of a conditional expression transitions to an x or z value and then to 0 or 1 in the same simulation time step.
-race,"Enables dynamic race detection (read-write races, write-write races) for the entire design."
-racecd,Enables race detection for the part of your design that is enclosed between the ‘race and ‘endrace compiler directives.
+race=all,Enables the static race detection tool.
-timescale=time_unit/time_precision,"Occasionally, some source files contain the 'timescale compiler directive and others do not. In this case, if you specify the source files that do not contain the 'timescale compiler directive on the command line before you specify the ones that do, this is an error condition and VCS halts compilation, timescale for the source files that do not contain this compiler directive and precede the source files that do. Do not include spaces when specifying the"
-unit_timescale[=<default_timescale>],"the default time unit for the compilation-unit scope. You must not include spaces when specifying -override_timescale=time_unit/time_precision Overrides the time unit and precision unit for all the 'timescale compiler directives in the source code, ‘timescale timescale for all module definitions that precede the first 'timescale compiler directive. Do not include"
-time base_time,simulation base time for overrides the default TIMEBASE variable value in timebase variable base_time is ns.
-time_res value,overrides the default TIME_RESOLUTION variable value variable timebase
-noinherit_timescale,specify a global timescale within the compilation unit of any source file that does not have an explicit 'timescale directive.
"-vts_ignore_env=ENV1,ENV2,...","You can use the -vts_ignore_env=ENV1,ENV2,... variables from incremental compilation during VCS timestamp checks."
-gfile,override parameter and generic values through a file for both Verilog and VHDL respectively. | through a file for both Verilog and VHDL respectively.
-pvalue,for changing the parameter values from the vcs command line. | from the vcs command line.
-pvalue_nonlocal,"When param_assignments appear in a module_parameter_port_list and you specify the -pvalue_nonlocal, then any param_assignments that appear in the module become local parameters and shall not be overridden by any method (such as -pvalue)."
-pvalue+pkg1::WIDTH=3 -pvalue+pkg2::WIDTH=4,You can override the package parameters during package scope resolution.
-gv|-gvalue,defined in the source code only if the generic is of type integer or real. | with the value specified in the command line. | Overrides the generic value defined in the source code with the value specified in the command line during runtime.
-g|-generics cmdfile,Overrides the default values for the design generics by using values from the file cmdfile. The file cmdfile is an include file that contains assign commands targeting design generics.
-param_override=dont_report,You can use the -param_override=dont_report override messages in stdout and the compile log file.
-param_override=report,Suppress the message in stdout and compile log file and add it in the param_override.rpt log file in the current working directory.
-check_all,-check_all additional semantic checks that are traditionally run -ntb_opts check=all options for SystemVerilog. | VHDL.
-boundscheck,Enables the compile-time check for two-dimensional or three-dimensional arrays with packed dimensions.
-check,the VHDL code. The following error messages are displayed during runtime: • Error-[SIMERR_FDIVZERO_SCOPE] Divide by Zero Error • Error-[SIMERR_INCONSISTENTIC] Incorrect Binding Range • Error-[SIMERR_INCONSISTENTIS] Subtype constraints inconsistencies
+busconfloat+,VCS support options to detect multiple conflicts on buses.
-auto_tchk_local_precision,"VCS allows you to define local time precision for modules that uses different timescale units and precisions. To enable this feature, you can use a configuration file or the"
-varindex_drivers,"As per SystemVerilog LRM 1800 TM-2017, Section 6.5 Nets and variables, an error is issued when multiple continuous assignments or a mixture of procedural and continuous assignments writing to any term in the expansion of a written longest static prefix of a variable. VCS considers the longest static prefix for multiple driver analysis as defined in LRM under"
-ntb_opts multi_driver_no_source_info,"In the partition compile flow, VCS generates an error message in the presence of an invalid combination of structural and procedural drivers or an invalid combination of two structural drivers for the variables of a design. VCS dumps the driver information of all the variables of the design during elaboration, which significantly increases the compile time. You can use the -ntb_opts multi_driver_no_source_info driver information of variables."
+incdir+directory+,Specifies the directory or directories in which VCS searches for include files used in the `include directories‘includespecifying the search directories[include] search the ‘includespecifying compiler directive.
-sysc,Enables SystemC cosimulation engine.
-sysc=adjust_timeres,"Determines the finer time resolution of SystemC and HDL in case of a mismatch, and sets it as the simulator’s timescale. VCS may be unable to adjust the time resolution if you elaborate sc_set_time_resolution() function call in your SystemC code. In such cases, VCS reports an error and does not create simv."
+tetramax,Enables splitting of TetraMAX’s large testbench to improve VCS capability and to reduce compile time.
+noportcoerce,"Prevents VCS from coercing ports to inout ports, equivalent of the 'noportcoerce compiler directive."
+noerrorIOPCWM,"Changes the error condition, when a signal is wider or narrower than the inout port to which it is connected, to a warning condition, thus allowing VCS to create the simv executable after displaying the warning message."
-genid_db,enable and control the Search Identifiers feature: • -genid_db -genid_db • -nogenid_db -nogenid_db • -debug_access+idents_db -debug_access+idents_db • -debug_access+all
-nogenid_db,"Specify -nogenid_db, if you want to completely avoid -nogenid_db any disk space and CPU time overhead caused combination with -debug_access+all."
-l filename,Specifies a file where VCS records compilation -R-R[-] records messages from both compilation and simulation in the same file. | Specifies writing all messages from simulation to the specified file as well as displaying these messages on the standard output. | Specifies a log file where VCS records compilation messages and | Specifies a file where VCS records elaboration messages.
-a logFilename,Captures simulation output and appends the log information in the existing log file. If the log file doesn’t
-u,Changes all the characters in identifiers to uppercase. It does not change identifiers in quoted strings such as the first argument to the $monitor system task. | Changes all characters in identifiers to uppercase.
+define+macro=value+,Defines a text macro in your source code to a value or character string. You can test for this definition in your Verilog source code using the 'ifdef compiler directive.
+undefine+<macroname>,Undefines a text macro in your source code that is already defined.
-p1800_macro_expansion,are more LRM-compliant and accurate especially for SystemVerilog macros.
-o name,"Specifies the name of the executable file. In UNIX, the default is simv."
-platform,"Returns the name of the platform directory in your VCS installation directory. For example, when you install VCS on a Solaris version 5.4 workstation, VCS creates a directory named, sun_sparc_solaris_5.4, in the directory where you install VCS. In this directory are subdirectories for licensing, executable libraries, utilities, and other important files and executables. You need to set your path to these subdirectories. You"
-maxLayers value,Sets the maximum number of donut layers for a mixed HDL design. The default value is 8.
-xlrm,"Enables VHDL features beyond those described in IEEE Standard VHDL 1076-2008 LRM. | VCS supports randomization of real, realtime, and floating_pnt_constraint        shortreal variables in a constraint expression. This helps in generating random stimulus to your design in mixed-signal simulation. | Enables VHDL features beyond those described in LRM. -assert psl_in_block inside VHDL block statements in vunit. Usage $> vhdlan <VHDL_filename> -psl -assert psl_in_block <psl_file> Analysis Options Example $> vhdlan test.vhd -psl -assert psl_in_block test.psl -f optionsfile Usage % vhdlan -f optionsfile <VHDL_filename_list> where, <VHDL_filename_list> specifies the VHDL source file names to be analyzed. If you do not provide an extension, .vhd is assumed. The maximum identifier name length is 250 for package, package body and configuration names. The combined length of an entity name plus architecture name must not exceed 250 characters as well. All other VHDL identifier names and string literals do not have a limitation. Example % vhdlan -f optionsfile test.vhd -full64 Usage % vhdlan -full64 <VHDL_filename_list> Example % vhdlan -full64 test.vhd -functional_vital Usage % vhdlan -functional_vital <VHDL_filename_list> Example % vhdlan -functional_vital test.vhd Analysis Options -help Prints usage information for vhdlan. Usage % vhdlan -help <VHDL_filename_list> Example % vhdlan -help test.vhd -init_std_logic You can initialize all uninitialized VHDL signals, ports and variables of the data type STD_LOGIC/STD_ULOGIC (scalar/vector) with a given 9-value. A VHDL signal or variable of this type can take on the following values – ‘U’, ‘X’, '0', '1', 'Z', 'W', 'L', 'H', '-'. Usage The following is the usage: % vhdlan <VHDL_filename_list> -init_std_logic <0|1> Example command line: % vhdlan hello.vhd -init_std_logic 0 -list analyzed files, the names of the analyzed design units, and warning or error messages produced during analysis. Usage % vhdlan -list <VHDL_filename_list> Example % vhdlan -list test.vhd Analysis Options -nc Usage % vhdlan -nc <VHDL_filename_list> Example % vhdlan -nc test.vhd -no_functional_vital Usage % vhdlan -no_functional_vital <VHDL_filename_list> Example % vhdlan -no_functional_vital test.vhd -output outfile to the file you specify as outfile. Usage % vhdlan -output outfile <VHDL_filename_list> Example % vhdlan -output outfile test.vhd -psl You can include PSL in your design either by inlining the PSL using the //psl or /*psl */ pragmas in Verilog and SystemVerilog, and --psl pragma in VHDL, or by specifying the PSL in an external file using a verification unit (vunit). If you inline the PSL code, you Analysis Options Usage % vhdlan -psl [vhdlan_options] <VHDL_file> % vcs -psl [vcs_options] VHDL_file Example The following examples show how to inline PSL in Verilog using the //psl and /*psl */ pragmas, and in VHDL using the --psl pragma. In VHDL USE ieee.std_logic_1164.all; entity vh_ent is ... end vh_ent; architecture arch_vh_ent of vh_ent is ... -- psl default clock is (clk'event and clk = '1'); -- psl sequence seq1 is {in1;[*2];test_sig}; -- psl property p1 is -- (never seq1); -- psl A1: assert p1 report "" : Assertion failed P1""; end arch_vh_ent; To simulate the PSL code that is inlined in a mixed design (test.v and dut.vhd), execute the following commands: % vlogan -psl test.v % vhdlan -psl dut.vhd % vcs -psl top % simv The following examples show how to use vunit to include PSL in the design. In VHDL vunit test(vh_entity) { default clock is (clk'event and clk = '1'); property foo is always ({ a = '0'} |=> {(b = prev(b) and c = prev(c))}); assume foo; } To simulate both the PSL code inlined in a VHDL file (test.vhd), and the vunit specified in an external file (checker.psl or checker.txt), execute the following commands: % vhdlan -psl test.vhd checker.psl % vcs -psl top % simv Analysis Options or % vhdlan -psl test.vhd -pslfile checker.txt % vcs -psl top % simv -q Usage vhdlan -q <VHDL_filename_list> Example vhdlan -q test.vhd -smart_order dependencies internally and then do file-by-file analysis of all VHDL files passed to it. Usage % vhdlan -smart_order [vhdlan_options] VHDL_filelist Examples vhdlan -smart_order -work lib bottom.vhd mid.vhd top.vhd vhdlan -smart_order -work lib *.vhd vhdlan -smart_order -work lib t*.vhd vhdlan -smart_order -f flist -sv_opts “vlog_opts_to_SVAs” VHDL code. Usage % vhdlan -sv_opts ""vlog_opts_to_SVAs"" <VHDL_filename_list> Example % vhdlan % vhdlan -sva -sv_opts ""+define+SVA1"" file1.vhd Analysis Options -sva Usage % vhdlan -sva <VHDL_filename_list> Example % vhdlan -sva test.vhd -version Usage % vhdlan -version <VHDL_filename_list> Example % vhdlan -version test.vhd -vhdl02, -vhdl08, -vhdl19, -vhdl87, -vhdl93 also enables the signal and variable constrained by initial value feature. You can switch to are now, by default, VHDL-93 reserved words. VCS is VHDL-93 compliant. You can switch Usage % vhdlan -vhdl02 <vhd_file> % vhdlan -vhdl08 <vhd_file> % vhdlan -vhdl19 <vhd_file> % vhdlan -vhdl87 <vhd_file> % vhdlan -vhdl93 <vhd_file> Analysis Options Example % vhdlan -vhdl02 test.vhd -work library WORK to another library name in the setup file. Usage % vhdlan -work library <VHDL_filename_list> Example % vhdlan -work library test.vhd -xlrm Usage % vhdlan -xlrm <VHDL_filename_list> Example % vhdlan -xlrm test.vhd Analysis Options for vlogan This section describes the following analysis options for vlogan:"
+vcs+loopreport+number,Reports the zero delay loops.
+vcs+loopdetect+number,Enables the detection of zero delay loops.
-nonbaudpsched,"By default, VCS evaluates the output terminals of the sequential sequential UDP (user-defined primitive) in the NBA region the active to evaluation output UDPschanging the UDPssequential UDPschanging output evaluation to active region region. If the design is compiled with this switch, the output of sequential UDPs is scheduled in the active region of the scheduler."
-hsopt=gates,Improves runtime performance on gate-level designs (both functional and timing simulations with SDF). You may see some compile-time degradation when you use this switch. | (both functional and timing simulations with SDF).
-skip_translate_body,Tells VCS to omit compilation of Verilog/SystemVerilog/VHDL code between the following: translate_off translate_off translate_off pragma] translate_off*/ translate_off translate_off*/ pragma] and pragma] translate_on translate_on translate_on translate_on*/ pragma] translate_on translate_on*/
-bom top-level_module -bfl filename,Generates a file that contains a list of absolute path names to the source files of all the module definitions source filesgenerating a list of in a design or IP block.
+simargs,"Enables you to pass options starting with ""-"" to the VCS command line in the -R flow."
-diag env,"Enables you to dump all environment variables that are set before starting the compilation and the simulation process. The list of environment variables that are set in the terminal is stored in the log file, which can be used to debug the environment related issues when the verification setup is complex and multiple and when nested scripts are used. | Enables you to dump all environment variables that are set before starting the compilation and the simulation process. The list of environment variables that are set in the terminal is stored in the log file, which can be used to debug the environment related issues when the verification setup is complex and multiple and when nested scripts are used. -debug_access Enables the required debug capabilities in a simulation. You can optimize simulation performance by enabling only the required debug capabilities. Table Supported Options of -debug_access describes the supported options of -debug_access. quit, and dump commands. Table 4         Supported Options of -debug_access access to get value, and enables the UCLI get command. This is the minimum entire design. equivalent to -debug_access+r+fn. • Read capability on registers, variables, and nets • Write (deposit) capability on registers and variables • Force capability on registers, variables, and nets drivers -debug_access+r+drivers. line -debug_access+r+line. cbk -debug_access+r+cbk. Table 4          Supported Options of -debug_access (Continued) cbkd registers, and variables defined in classes. Class object debugging is also enabled. thread equivalent to -debug_access+r+thread. class objects, but the capability is also applied to the remaining portion of the to:-debug_access+r+w+thread+line+cbk+cbkd. pp equivalent to:-debug_access+w+cbk+drivers. dmptf tasks/functions. to:-debug_access+r+w+wn+f+fn+fwn+drivers+line+cbk+cbkd+ thread+class+pp+dmptf. | Enables you to dump all environment variables that are set before starting the compilation and the simulation process. The list of environment variables that are set in the terminal is stored in the log file, which can be used to debug the environment related issues when the verification setup is complex and multiple and when nested scripts are used. +vcs+learn+pli ACC capabilities enable debugging operations; however, they have a performance cost; design you use them for debugging operations so that you can recompile your design, and in the next simulation, enable them only where you need them. When you use this pli_learn.tab table file PLI +applylearn[applylearn]+applylearnACC the needed are they where only capabilitiesapplying in design Usage % simv +vcs+learn+pli +vcs+mipd+noalias For the acc_handle_simulated_net PLI routine, aliasing of a loconn net and a hiconn acc_handle_simulated_net net across the port connection is disabled if MIPD delay annotation happens for the port. If MIPDs you specify ACC capability: mip or mipb in the pli.tab file, such aliasing is disabled only file pli.tab when actual MIPD annotation happens. If during a simulation run, acc_handle_simulated_net is called before MIPD annotation to disable such aliasing for all ports whenever mip, mipb capabilities have been specified. SDF files. Usage % simv +vcs+mipd+noalias -load library_path_name runtime PLI dynamically at libraryloading dynamically loading. For example, % simv -load ./pli1.so -load ./pli2.so % vcs -P pli.tab design_source_files Usage % simv -load library_path_name +dumpports+portdir +dumpports+portdir golden for input and output ports, and the direction is analyzed only for inout ports. Usage % simv +dumpports+portdir -diag env Enables you to dump all environment variables that are set before starting the compilation and the simulation process. The list of environment variables that are set in the terminal is stored in the log file, which can be used to debug the environment related issues when the verification setup is complex and multiple and when nested scripts are used. VCS dumps all the environment variables in the simv_env_diag_<pid>.log log file that is generated in the current working directory. Usage % simv -diag env 25 SDC Options This section describes the following:"
-pcmakeprof,"profiling of time spent in each step of a compilation. -h | -help Usage %vcs -h | -help Examples %vcs -h | -help -mcg Enables the mixed code generation model in VCS backend. Part of code is aggressively optimized by the available C compilers. -v <file_name> Specifies a Verilog library file. VCS looks in this file for definitions of the module and UDP instances that VCS found in your source code, but for which it did not find the corresponding module or UDP definitions in your source code. Usage %vcs <File_name1.v> -v <File_name2.v> Examples %vcs top.v -v 1.v -y <directory> Specifies a Verilog library directory. VCS looks in the source files in this directory for definitions of the module and UDP instances that VCS found in your source code, but for which it did not find the corresponding module or UDP definitions in your source code. VCS looks in this directory for a file with the same name as the module or UDP identifier in the instance (not the instance name). If it finds this file, VCS looks in the file for the module or UDP definition to resolve the instance. If multiple -y options are on the vcs command line, VCS starts searching the directory Usage %vcs <filename1.v> -y <directory1> -y <directory2> -y <directory3 > +libext+.v Examples If rev1/cell.v, rev2/cell.v and rev3/cell.v all exist and define the module cell(), and you issue the following command: % vcs     top.v -y rev1 -y rev2 -y rev3 +libext+.v VCS picks cell.v from rev1. +libext you want VCS to look for in these directories. Usage <filename1.v>        -y directory/ +libext+.sv -sverilog Examples top.v -y dir/ +libext+.sv        -sverilog +libext+extension+ Specifies that VCS searches only for files with the specified file name extensions in a library directory. You can specify more than one extension, separating the extensions with the plus (+) character. For example, +libext+.v+.V+ specifies searching for files with either the .v or .V extension in a library. The order in which you add file name extensions these file name extensions. Usage <filename1.v>        -y directory/ +libext+.v+.V -sverilog Examples top.v -y dir/ +libext+.v+.V -sverilog +liborder Specifies searching for module definitions for unresolved module instances through the remainder of the library where VCS finds the instance, then searching the next and then the next library on the vcs command line before searching in the first library on the command line. Usage vcs <filename1.v > -v <filename2.v > -v <filename3.v > +liborder Examples vcs top.v -v 1.v -v 2.v +liborder +librescan Specifies always searching libraries for module definitions for unresolved module instances beginning with the first library on the vcs command line. Usage vcs <filename1.v > -v           <filename2.v >      -v <filename3.v >         +librescan Examples vcs top.v -v 1.v -v 2.v +librescan +libverbose Tells VCS to display a message when it finds a module definition in a source file in a Verilog library directory that resolves a module instantiation statement that VCS read in your source files, a library file, or in another file in a library directory. The message is as follows: Resolving module ""module_identifier"" By default, VCS does not display this message when it finds a module definition in a Verilog library file that resolves a module instantiation statement. VCS also displays verbose information of the module instances while resolving library messages related to the library modules. Usage vcs <filename1.v > -v           <filename2.v >      -v <filename3.v >         +libverbose Examples vcs top.v -v 1.v -v 2.v +libverbose -Mdirectory=<directory> | -Mlib=<dir> Specifies the incremental compile directory. The default name for this directory is csrc, and its default location is your current directory. You can substitute the shorter -Mdir for -Mdir-Mdir [-] -Mdirectory. it compiles a module and a central place to get the object files when it links together the tested and debugged by other members of your team without recompiling the modules for these parts of the design. Usage % vcs <file_name> -Mlib=<dir1> -Mlib=<dir2> % vcs <file_name> -Mlib=<dir1>:<dir2> Examples % vcs design.v -Mlib=/design/dir1 -Mlib=/design/dir2 % vcs design.v -Mlib=/design/dir1:/design/dir2 -Mupdate[=0] By default, VCS overwrites the makefile between compilations. If you want to preserve the compilation and updating the makefile. Usage vcs <filename.v> -Mupdate=0 Examples vcs top.v      -Mupdate=0 -Mmakep=make_path make command is used. For example, if there is a wrapper called wrapper_gmak over gmake, then you must use the following command to specify this to VCS: vcs test.v -Mmakep='wrapper_gmake' Using this mechanism, you can attach flags to the quoted string argument. For example, vcs test.v -Mmakep='gmake -r' The -r flag instructs gmake to disable the built-in implicit rules. You can use the following command: vcs test.v -Mmakep='gmake -n' This command does not build a simv, however, shows the commands that are executed in VCS can be useful in custom environments (that might have wrappers over the make command and so on), and can also give greater control during debugging. Usage vcs <filename>.v -Mmakep=makepath Examples vcs test.v -Mmakep='wrapper_gmake' vcs test.v -Mmakep='gmake -r' -noincrcomp Disables incremental compilation. Usage vcs <filename1.v>        -noincrcomp Examples vcs top.v      -noincrcomp -diskopt Saves disk space by compressing various files under the simv.daidir directory. Usage vcs <filename1.v> -diskopt Examples vcs top.v -diskopt -sverilog Enables SystemVerilog constructs specified in the IEEE Standard of SystemVerilog, IEEE Std 1800-2009. Usage vcs <filename> -sverilog Examples vcs top.v -sverilog -tbrca debug capabilities for TBRCA. -debug_access. Usage vcs <filename> -sverilog -tbrca -debug_access Examples modules and the ports of real cell modules. use the commands for step or next and line breakpoints. registers and variables of the entire testbench. -ignore keyword_argument Suppresses warning messages depending on which keyword argument is specified. The keyword arguments are as follows: • unique_checks unique_checks Suppresses warning messages about unique if and unique case statements. • priority_checks priority_checks Suppresses warning messages about priority if and priority case statements. • all Suppresses warning messages about unique if, unique case, priority if and priority case statements. You can tell VCS to report errors for both unique and priority violations with the -error -error-error[-] -error=UNIQUE VCS reports unique violations as error conditions. -error=PRIORITY VCS reports priority violations as error conditions. -error=UNIQUE,PRIORITY VCS reports unique and priority violations as error conditions. -assert keyword_argument compile/elaboration time. The following is the list of keyword_argument that are enabled when the -assert • -assert success successsuccess -assert • -assert summary -assert summarysummary • -assert maxcover maxcovermaxcover -assert • -assert maxsuccess maxsuccessmaxsuccess -assert • -assert quiet1 • -assert verbose The following is the list of assertion options that are enabled when the -assert enable_hier -assert • -assert hier -assert hier • -assert maxfail=N maxfail=Nmaxfail=N -assert • -assert finish_maxfail=N finish_maxfail=Nfinish_maxfail -assert The following is the list of assertion options that do not require the -assert enable_diag -assert • -assert dumpoff dumpoffdumpoff -assert • -assert nocovdb -assert nocovdbnocovdb • -assert nopostproc nopostprocnopostproc -assert • -assert quiet quiet -assert • -assert no_fatal_action no_fatal_action • -assert report report • -assert vacuous vacuous • -assert global_finish_maxfail=N global_finish_maxfail -assert async_disable and reset changes at the same time, and you have to use the sample value of the disable signal. Therefore, if you have an assertion assert property (@(posedge clk) disable iff(rst) a) and if you apply the -assert async_disable iff($sampled(rst)) a). Usage % vcs -sverilog <file_name> -assert async_disable -R Examples % vcs -sverilog test.v -assert async_disable -R -assert enable_diag Usage vcs -sverilog <filename> -assert enable_diag Examples vcs -sverilog test.sv -assert enable_diag -assert funchier Enables enhanced reporting for assertions in functions. Usage vcs -sverilog -assert funchier+svaext <filename> Examples vcs -sverilog -assert funchier+svaext test.sv -assert hier=file_name configuration file for enabling and disabling SystemVerilog assertions. You can either enable or disable: • Assertions in a module or in a hierarchy. a AssertionsSystemVerilogenabling or disabling module or a hierarchy • An individual assertion. If you pass an empty assert hier file at compile-time or runtime, VCS generates the CM- ASHR-EF error, as follows: Error-[CM-ASHR-EF] Empty file found, but it is empty. Please fix the file and try again. You can convert this error message to a warning message, as follows, using the Warning-[CM-ASHR-EFW] Empty file found, but it is empty. Please fix the file and try again. Note: If the assertion filter used in assert hier file does not match any assertion in the design, VCS generates the SVA-FILTUNUSEDwarning message, as follows, at compile-time or runtime: Warning-[SVA-FILTUNUSED] Unused filter in hier file '-assert (.)*GLITCH_CBO_TAP_holdinreset' in hier file cbo_basic_1213083628.hier does not match any module/instance hierarchy/assertion. You can convert this warning message to an error message, as follows, using the Error-[SVA-UNUSEDFLT] Unused filter in hier file '-assert (.)*GLITCH_CBO_TAP_holdinreset' in hier file cbo_basic_1213083628.hier does not match any module/instance hierarchy/assertion. The types of entries that you can specify in the file are as follows: -assert <assertion_name> or -assert <assertion_hierarchical_name> -assert If <assertion_name> is provided, VCS disables the assertions based on wildcard matching of the name in the full design. If <assertion_hierarchical_name> is provided, VCS disables the assertions based on wildcard matching of the name in the particular hierarchy given. Examples • -assert my_assert my_assert Disables all assertions with name my_assert in the full design. • -assert A* -assertA* Disables all assertions whose name starts with A in the full design. • -assert * * -assert Disables all assertions in the full design. • -assert top.INST2.A Disables all assertions whose names start with A in the hierarchy top.INST2. If assertions whose name starts with A exists in inner scopes under top.INST2, they are not disabled. This command has effect on assertions only in scope top.INST2. • +assert <assertion_name> or +assert <assertion_hierarchical_name> +assert assertion_hierarchical_name If <assertion_name> is provided, VCS enables the assertions based on wildcard matching of the name in the full design. If <assertion_hierarchical_name> is provided, then VCS enables the assertions based on wildcard matching of the name in the given hierarchy. • +assert my_assert my_assert +assert Enables all assertions with name my_assert in the full design. • +assert A* A* +assert Enables all assertions whose name starts with A in the full design. • +assert * * +assert Enables all assertions in the full design. • +assert top.INST2.A Enables assertion A in the hierarchy top.INST2. • +tree <module_instance_name> or +tree <assertion_hierarchical_name> tree +tree If <module_instance_name> is provided, VCS enables assertions in the specified module instance and all module instances hierarchically under that instance. If <assertion_hierarchical_name> is provided, VCS enables the specified SystemVerilog assertion. Wildcard characters can also be used for specifying the hierarchy. • +tree top.inst1 Enables the assertions in module instance top.inst1 and all the assertions in the module instances under this instance. • +tree top.inst1.a1 Enables the SystemVerilog assertion with the hierarchical name top.inst1.a1. • +tree top.INST*.A1 Enables assertion A1 from all the instances whose names start with INST under module top. • -tree <module_instance_name> or -tree <assertion_hierarchical_name> -tree -tree If <module_instance_name> is provided, VCS disables the assertions in the specified module instance and all module instances hierarchically under that instance. If <assertion_hierarchical_name> is provided, VCS disables the specified SystemVerilog assertion. Wildcard characters can also be used for specifying the hierarchy. • -tree top.inst1 Disables the assertions in module instance top.inst1 and all the assertions in the module instances under this instance. • -tree top.inst1.a1 Disables SystemVerilog assertion with the hierarchical name top.inst1.a1. • -tree top.INST*.A1 Disables assertion A1 from all the instances whose names start with INST under module top. • +module module_identifier module_identifier +module VCS enables all the assertions in all instances of the specified module, for example: • +module dev dev +module VCS enables the assertions in all instances of module dev. • -module module_identifier module_identifier -module VCS disables all the assertions in all instances of the specified module, for example: • -module dev de -module VCS disables the assertions in all instances of module dev. The specifications are applied serially as they appear in file file_name except for +/- assert. The +/- assert patterns are always serially applied after all other patterns are done. The result of applying the specifications in this file is that a group of assertions get excluded. The remaining assertions are available for further exclusion by other means, such as the $assertoff system task in the source code. However, the following should be noted: • The first specification denotes the default exclusion for interpreting the file. If the first specification is a minus(-), then all assertions are included before applying the first and the following specifications. Conversely, if the first specification is a plus(+), then all assertions are excluded prior to applying the first and the following specifications. • Unlike -/+module and -/+tree specifications, any assertion excluded by applying -assert specification cannot be included by the later specifications in the file. • If <assertion_name> is provided, VCS disables the assertions based on wildcard matching of the name in the full design. If <assertion_hierarchical_name> is provided, VCS disables the assertions based on wildcard matching of the name in the particular hierarchy given. -assert enable_hier -assert hier=file.txtassert hier=file.txt[-] assertions on or off. Usage vcs -sverilog -assert hier=<filename> <filename> [other_compile_options] Examples vcs -sverilog -assert hier=test.txt test.sv -assert filter_past For assertions that are defined with the $past system task, ignore these assertions when $pastignoring the past history buffer is empty. For instance, at the very beginning of the simulation, the past history buffer is empty. Therefore, the first sampling point and subsequent sampling points should be ignored until the past buffer has been filled with respect to the sampling point. -assert offending_values Enables the reporting of the values of all variables used in the assertion failure messages. Usage vcs -sverilog -assert offending_values <filename> [other_compile_options] Examples vcs -sverilog -assert offending_values test.sv -assert disable Disables all SystemVerilog assertions in the design. Usage vcs -sverilog -assert disable <filename> [other_compile_options] Examples vcs -sverilog -assert disable test.sv -assert disable_cover for coverage, and write an assertion coverage database during simulation. Usage vcs -sverilog -assert disable_cover <filename> [other_compile_options] Examples vcs -sverilog -assert disable_cover test.sv -assert disable_assert Disables only the assert and assume directives without affecting the cover directives. It complements the existing control options which allows you to disable only cover directives or all of the assertions such as assert/assume/cover. Usage vcs -sverilog -assert disable_assert <filename> [other_compile_options] Examples vcs -sverilog -assert disable_assert test.sv Specifying a delay or a repetition value greater than 200 in the assertion expression affects both compile-time and runtime performance. Therefore, VCS optimizes expression and issues a warning message as follows: Warning-[SVA-LDRF] Large delay or repetition found. Large delay or repetition found (data ##[0:200] (!data)). VCS will optimize compile time. However it may affect runtime. ""test.v"", 8 -assert disable_rep_opt Specifying a delay or a repetition value greater than 200 in the assertion expression affects both compile-time and runtime performance. Therefore, VCS optimizes expression and issues a warning message as follows: Warning-[SVA-LDRF] Large delay or repetition found. Large delay or repetition found (data ##[0:200] (!data)). VCS will optimize compile time. However it may affect runtime. ""test.v"", 8 -assert disable_rep_opt -assert dumpoff Disables the dumping of SVA information in the VPD file during simulation. Usage vcs -sverilog -assert dumpoff <filename> [other_compile_options] Examples vcs -sverilog -assert dumpoff test.sv -assert vpiSeqBeginTime Enables you to see the simulation time that a SystemVerilog assertion sequence starts when using Debussy. -assert vpiSeqFail Enables you to see the simulation time that a SystemVerilog assertion sequence doesn’t match when using Debussy. +lint=PWLNT:<max_count> Enables the PWLNT lint messages when $past is used in the code with the number of clock ticks exceeding 5. You can restrict the number of PWLNT lint messages for a particular compilation using the max_count argument. For example, +lint=PWLNT:10 restricts the number of PWLNT lint messages to a maximum of 10 for one compilation. –ova_enable_case Enables the compilation of OVA case pragmas only, when used without -Xova or - –Xova-Xova[-] –ova_inline-ova_inline ova_inline. All inlined OVA assertion pragmas are ignored. -ntb_define macro Specifies any OpenVera macro name on the command line. You can specify multiple macro names using the plus (+) character. The macro can also be defined to be a fixed number. For example, in the following: program test { integer x; x =12345; printf (""DEBUG===>         my value = %d and x = %d\n"", MYVALUE, x); } Examples % vcs -ntb_define MYVALUE=10000 myprog.vr -R -ntb_filext .ext Specifies an OpenVera file name extension. You can specify multiple file name extensions using the plus (+) character. -ntb_incdir <directory_path> Specifies the include directory path for OpenVera files. You can specify multiple include directories using the plus (+) character. -ntb_noshell -ntb_opts keyword_argument The keyword arguments are as follows: • ansi ansi argument to -ntb_optsANSI modein OpenVera filesassertionsOpenveraANSI mode Preprocesses the OpenVera files in the ANSI mode. The default preprocessing mode is the Kernighan and Ritchie mode of the C language. • check arraysassertionsOpenVerabounds check argument to -ntb_optsbounds checkin OpenVera dynamic check in dynamic arrays Does a bounds check on dynamic type arrays (dynamic, associative, queues) and issues an error at runtime. • check=dynamic -ntb_opts to argument check Same as check. Does a bounds check on dynamic type arrays (dynamic, associative, queues) and issues an error at runtime. • check=fixed in check arraysassertionsOpenVerabounds fixed-sise OpenVera checkin check=fixedbounds arrays fixed-size Does a bounds check only on fixed size arrays and issues an error at runtime. • check=all check=all Does a bounds check on both fixed size and dynamic type arrays and issues errors at runtime. • dep_check dependency dep_check argument to -ntb_optscircular dependency check checkin OpenVeraassertionsOpenVeracircular check Enables dependency analysis and incremental compilation. Detects files with circular dependencies and issues an error message when VCS cannot determine which file to compile first. • no_file_by_file_pp preprocessingdisabling no_file_by_file_pp to -ntb_optsassertionsOpenVerafile-by-file argument By default, VCS does file-by-file preprocessing on each input file, feeding the concatenated result to the parser. This argument disables this behavior. • print_deps checkin print_deps argument to -ntb_opts-ntb_optsprint_depscircular dependency check OpenVeradisplay on screenassertionsOpenVeracircular dependency checkdisplay on screen Tells VCS to display the dependencies for the source files on the screen. Enter this argument with the dep_check argument. -ntb_opts sv_fmt The default padding used in displayed or printed strings is right padding. The sv_fmt $display(""%10s"", ""my_string""); is to put 10 spaces to the left of my_string. To specify right padding when -ntb_opts sv_fmt is used, put a dash before the number of spaces. For example, the result of $display(""%-10s"", ""my_string""); is to put 10 spaces to the right of my_string. -ntb_opts tb_timescale=<value> Specifies an overriding timescale for the testbench, whenever the required testbench timescale is different from that of the design. It must be used in conjunction with the If the required testbench timescale is different from the design or DUT timescale, then both the testbench timescale and the DUT timescale must be passed during VCS compilation. Examples The following command specifies a required testbench timescale of 10ns/10ps and a design timescale of 1ns/1ps: % vcs -ntb_opts tb_timescale=10ns/10ps -timescale=1ns/1ps file.sv -ntb_opts tokens Pre-processes the OpenVera files to generate two files, tokens.vr and tokens.vrp. The tokens.vr contains the preprocessed result of the non-encrypted OpenVera files, while the tokens.vrp contains the pre-processed result of the encrypted OpenVera files. If there is no encrypted OpenVera file, VCS sends all the OpenVera pre-processed results to the tokens.vr file. use_sigprop Enables the signal property access functions. For example, vera_get_ifc_name(). -ntb_shell_only from the design file. -ntb_sfname <filename> Specifies the file name of the testbench shell. -ntb_sname <module_name> Specifies the name and directory where VCS writes the testbench shell module. -ntb_spath Specifies the directory where VCS writes the testbench shell and shared object files. The default is the compilation directory. -ntb_vipext .ext Specifies an OpenVera encrypted-mode file extension to mark files for processing in mode extensions .vrp and .vrhp are not overridden and will always be in effect. You can pass multiple file extensions at the same time using the plus (+) character. -v95 Specifies not recognizing Verilog 2001 keywords. Usage <filename1.v>        --v95 Examples Usage top.v        --v95 +systemverilogext+ext Specifies a file name extension for SystemVerilog source files. If you use a different file SystemVerilog LRM (IEEE Std 1800-2012) rules for all the source files on the vcs command line and not only the files with the specified extension. Examples ====== file1.v ========== module Verilog_mod; reg a; wire b,c; assign a = b + c; // This is cont assignment to reg. // It should be supported for SV only!!! endmodule We also have a SystemVerilog code in file2 as below ======= file2.sv ======== module sv_mod; logic a; logic b,c; assign a = b + c; // this is cont assignment to reg. endmodule +verilog2001ext+ext The Verilog2001 files have names with the .v extensions, while all SystemVerilog files, including the checkers, have a name with the .sv extension. In case of checkers, the symbolic link with the .sv extension is used. Examples vcs +define+ASSERT_ON <design files and other options> \ -y $VCS_HOME/packages/sva +libext+.sv -sverilog \ +verilog2001ext+.v+incdir+$VCS_HOME/packages/sva_cg +verilog1995ext+ext Verilog 1995 code that would be invalid in Verilog 2001 or SystemVerilog code, such as using Verilog 2001 or SystemVerilog keywords, like localparam and logic, as names. Note: Do not enter all three of these options on the same command line. Examples vcs +define+ASSERT_ON <design files and other options> \ -y $VCS_HOME/packages/sva +libext+.sv -sverilog \ +verilog1995ext+.v+incdir+$VCS_HOME/packages/sva_cg -extinclude Verilog 1995 code that would be invalid in Verilog 2001 or SystemVerilog code, such as using Verilog 2001 or SystemVerilog keywords, like localparam and logic, as names. If a source file for one version of Verilog contains the 'include compiler directive, VCS ‘include by default compiles the included file for the same version of Verilog, even if the included file has a different filename extension. If you want VCS to compile the included file with Examples If source file a.v contains the following: `include ""b.sv"" module a(); reg ar; endmodule and if source file b.sv contains the following: module b(); logic ar; endmodule VCS compiles b.sv for SystemVerilog with the following command line: vcs a.v +systemverilogext+.sv -extinclude +systemverilogext -extinclude +vcs+initreg+random Initializes all bits of the Verilog variables, registers defined in sequential UDPs, and memories including multi-dimensional arrays (MDAs) in your design to random value 0 or 1, at time zero. The default random seed is used. The supported data types are: • reg • bit • integer • int • logic Usage vcs +vcs+initreg+random [other_vcs_options] Examples module top; reg a; reg [3:0]b; initial begin $monitor(""Time:%0t a:%b b:%0b"",$time,a,b); #1 a=1; end endmodule vcs test.v +vcs+initreg+random Output Time:0 a:0 b:110 Time:1 a:1 b:110 +vcs+initreg+config+config_file Specifies a configuration file for initializing Verilog variables, registers defined in sequential UDPs, and memories including multi-dimensional arrays (MDAs) in your design, at time zero. In the configuration file, you can define the parts of a design to apply the initialization and the initialization values of the variables. Following is the syntax of the configuration file entries: defaultvalue x|z|0|1|random <seed_value> instance instance_hierarchical_name x|z|0|1|random <seed_value> tree instance_hierarchical_name depth x|z|0|1|random <seed_value> module module_name x|z|0|1|random <seed_value> modtree module_name depth x|z|0|1|random <seed_value> Note: VCS supports initializing parts of the design with z|0|1 values in the initreg configuration file. Value X specifies the items to be excluded from initialization. Value random specifies initialization with random values of 0 and 1. Usage vcs +vcs+initreg+config+config_file [other_vcs_options] Examples vcs +vcs+initreg+config+config.txt_file test.v %cat config.txt module mid 0 tree top.m2.b1 0 0 instance top.m1.b1 1 modtree leaf 1 1 +vcs+initreg+random+nomem at compile-time. Usage vcs +vcs+initreg+random +vcs+initreg+random+nomem [other_vcs_options] or vcs +vcs+initreg+config+config_file +vcs+initreg+random+nomem [other_vcs_options] Examples vcs +vcs+initreg+random +vcs+initreg+random+nomem test.v module top; reg a; reg [3:0]b; reg [3:0]c [2]; initial begin $monitor(""Time:%0t a:%b b:%0b c[0]:%b c[1]:%b"",$time,a,b,c[0],c[1]); #1 a=1; end endmodule Output Time:0 a:0 b:110 c[0]:xxxx c[1]:xxxx Time:1 a:1 b:110 c[0]:xxxx c[1]:xxxx +vcs+initreg+random+noreg Usage vcs +vcs+initreg+random +vcs+initreg+random+noreg [other_vcs_options] or vcs +vcs+initreg+config+config_file +vcs+initreg+random+noreg [other_vcs_options] Examples vcs +vcs+initreg+random +vcs+initreg+random+noreg test.v module top; reg a; reg [3:0]b; reg [3:0]c [2]; initial begin $monitor(""Time:%0t a:%b b:%0b c[0]:%b c[1]:%b"",$time,a,b,c[0],c[1]); #1 a=1; end endmodule Output Time:0 a:x b:xxxx c[0]:0000 c[1]:0110 Time:1 a:1 b:xxxx c[0]:0000 c[1]:0110 +rad Performs Radiant Technology optimizations on your design. These optimizations are also enabled for SystemVerilog part of the design. Usage vcs -sverilog test.v +rad Examples vcs -sverilog test.v +rad +optconfigfile+filename Specifies a configuration file that lists the parts of your design you want to optimize (or not optimize) and the level of optimization for these parts. You can also use the configuration file to specify ACC write capabilities. Usage vcs -sverilog test.v +optconfigfile+test.cfg Examples vcs -sverilog test.v +optconfigfile+test.cfg % cat test.cfg set exprToLoopMinExprNum 4 -R Runs the executable file immediately after VCS links it together. Note: recommended when extra options are expected at runtime. Examples vcs file.v -sverilog -R -sdf min|typ|max:instance_name:file.sdf Enables SDF annotation. Minimum, typical, or maximum values specified in file.sdf are annotated on the instance, instance_name. Usage vcs [other_vcs_options] -sdf min|typ|max:instance_name:filename Examples vcs test.v -sdf min:top:test.sdf `timescale 1ns/1ns module top; reg in; wire out; dut inst(.out(out),.in(in)); initial begin $monitor(""Time:%2t in:%0b out:%0b"",$time,in,out); in = 1'b0; #15 in = 1'b1; end endmodule module dut(output out,input in); buf (out,in); specify (in => out) = (5,5); endspecify endmodule (CELL (CELLTYPE ""dut"") (INSTANCE inst) (DELAY (ABSOLUTE (IOPATH in out (2:3:4) (2:3:4)) ) ) ) +allmtm Specifies compiling separate files for minimum, typical, and maximum delays when the +mindelays, +typdelays, or +maxdelays options at runtime to specify which +maxdelays+maxdelays[maxdelays] +mindelays+mindelays[mindelays] +typdelays compile-time options. +typdelays+typdelays[typdelays] Usage vcs [other_vcs_options] +allmtm simv +mindelays/+maxdelays/+typdelays Examples vcs test.v +allmtm simv +mindelays +charge_decay Enables charge decay in trireg nets. Charge decay does not work if you connect the trireg to a transistor (bi-directional pass) switch such as tran, rtran, tranif1, or rtranif0. Usage vcs +charge_decay [other_vcs_options] Examples vcs test.v +charge_decay module test; wire tmp1; sub isub( tmp1 ); endmodule module sub( arg1 ); inout arg1; trireg (medium) #(1,1,1) arg1; reg r; assign arg1= r; initial begin #1 r = 1'b0; #3 r = 1'bz; #4 r = 1'b1; end endmodule -hsopt=chargedecay recommended to use -hsopt=chargedecay along with +charge_decay. Usage vcs -hsopt=chargedecay +charge_decay [other_vcs_options] +delay_mode_path Uses only delay specifications in module-path delays in specify blocks. Overrides all the delay specifications on all gates, switches, and continuous assignments to zero. Usage vcs +delay_mode_path [other_vcs_options] Examples vcs test.v +delay_mode_path module top; reg in; wire out; dut inst(.out(out),.in(in)); initial begin $monitor(""Time:%2t in:%0b out:%0b"",$time,in,out); in = 1'b0; #15 in = 1'b1; end endmodule module dut(output out,input in); buf #(6,6) (out,in); specify (in => out) = (5,5); endspecify endmodule Output Time: 0 in:0 out:x Time: 5 in:0 out:0 Time:15 in:1 out:0 Time:20 in:1 out:1 +delay_mode_zero Removes delay specifications on all gates, switches, continuous assignments, and module paths. Usage vcs +delay_mode_zero [other_vcs_options] Example vcs test.v +delay_mode_zero module top; reg in; wire out; dut inst(.out(out),.in(in)); initial begin $monitor(""Time:%2t in:%0b out:%0b"",$time,in,out); in = 1'b0; #15 in = 1'b1; end endmodule module dut(output out,input in); buf #(6,6) (out,in); specify (in => out) = (5,5); endspecify endmodule Output Time: 0 in:0 out:0 Time:15 in:1 out:1 +delay_mode_unit Overrides all the delay specifications in module-path delays in specify blocks to zero delays. Overrides all the delay specifications on all gates, switches, and continuous assignments to the shortest time precision argument of all the 'timescale compiler directives in the source code. The default time unit and time precision argument of the 'timescale compiler directive is 1s. Usage vcs +delay_mode_unit [other_vcs_options] Example vcs test.v +delay_mode_unit module top; reg in; wire out; dut inst(.out(out),.in(in)); initial begin $monitor(""Time:%2t in:%0b out:%0b"",$time,in,out); in = 1'b0; #15 in = 1'b1; end endmodule module dut(output out,input in); buf #(6,6) (out,in); specify (in => out) = (5,5); endspecify endmodule Output Time: 0 in:0 out:x Time: 1 in:0 out:0 Time:15 in:1 out:0 Time:16 in:1 out:1 +delay_mode_distributed Overrides all the delay specifications in module-path delays in specify blocks to zero delays. Uses only the delay specifications on all gates, switches, and continuous assignments. Usage vcs +delay_mode_distributed [other_vcs_options] Example vcs test.v +delay_mode_distributed module top; reg in; wire out; dut inst(.out(out),.in(in)); initial begin $monitor(""Time:%2t in:%0b out:%0b"",$time,in,out); in = 1'b0; #15 in = 1'b1; end endmodule module dut(output out,input in); buf #(6,6) (out,in); specify (in => out) = (5,5); endspecify endmodule Output Time: 0 in:0 out:x Time: 6 in:0 out:0 Time:15 in:1 out:0 Time:21 in:1 out:1 -add_seq_delay Primitives (UDPs) without delays. Usage -add_seq_delay <n> Where, n is the delay specification argument. It can be a real number or a real number followed by a time unit. The time unit can be fs, ps, ns, us, ms, or s. If no time unit is specified, then the simulation time_unit is used. For example, if simulation time_unit/time_precision is 1ns/1ps, then -add_seq_delay 3 means 3ns. The delay specification argument is applied to all sequential UDPs (without delays) in the design. Examples For example, consider that the simulation time_unit/time_precision is 1ns/1ps. -add_seq_delay 1ns -add_seq_delay 0.7 -add_seq_delay 0.7ns -add_seq_delay 700ps Key Points to Note • If sequential UDPs already have delay specified (#(delay), including #0), then -add_seq_delay is ignored. That is, -add_seq_delay only supports sequential UDPs without delays. specify (posedge ck => q +: d) = (10,11); endspecify The above IOPATH delay (10,11) remains the same even when -add_seq_delay <n> is specified. • If you use +delay_mode_zero and -add_seq_delay on the same command line, then +delay_mode_zero -add_seq_delay the UDP is considered, as mentioned below: delay is smaller than it. -add_seq_delay 15ps +delay_mode_unit, then still you see 15ps delay. you specify -add_seq_delay 15ps +delay_mode_distributed, then still you see 15ps delay. +maxdelays Specifies using the maximum timing delays in the min:typ:max delay triplets when compiling the SDF file. The mtm_spec argument to the $sdf_annotate system task Usage vcs +maxdelays       [other_vcs_options] Examples vcs test.v +maxdelays `timescale 1ns/1ns module top; reg in; wire out; dut inst(.out(out),.in(in)); initial begin $monitor(""Time:%2t in:%0b out:%0b"",$time,in,out); $sdf_annotate(""gate.sdf"",top); in = 1'b0; #15 in = 1'b1; end endmodule module dut(output out,input in); buf (out,in); specify (in => out) = (1,1); endspecify endmodule (CELL (CELLTYPE ""dut"") (INSTANCE inst) (DELAY (ABSOLUTE (IOPATH in out (2:3:4) (2:3:4)) ) ) ) Output Time: 0 in:0 out:x Time: 4 in:0 out:0 Time:15 in:1 out:0 Time:19 in:1 out:1 +mindelays Specifies using the minimum timing delays in the min:typ:max delay triplets when compiling the SDF file. The mtm_spec argument to the $sdf_annotate system task Usage vcs +mindelays       [other_vcs_options] Examples vcs test.v +mindelays `timescale 1ns/1ns module top; reg in; wire out; dut inst(.out(out),.in(in)); initial begin $monitor(""Time:%2t in:%0b out:%0b"",$time,in,out); $sdf_annotate(""gate.sdf"",top); in = 1'b0; #15 in = 1'b1; end endmodule module dut(output out,input in); buf (out,in); specify (in => out) = (1,1); endspecify endmodule (CELL (CELLTYPE ""dut"") (INSTANCE inst) (DELAY (ABSOLUTE (IOPATH in out (2:3:4) (2:3:4)) ) ) ) Output Time: 0 in:0 out:x Time: 2 in:0 out:0 Time:15 in:1 out:0 Time:17 in:1 out:1 +typdelays Specifies using the typical timing delays in min:typ:max delay triplets when compiling the SDF file. The mtm_spec argument to the $sdf_annotate system task overrides this Usage vcs +typdelays       [other_vcs_options] Examples vcs test.v +typdelays `timescale 1ns/1ns module top; reg in; wire out; dut inst(.out(out),.in(in)); initial begin $monitor(""Time:%2t in:%0b out:%0b"",$time,in,out); $sdf_annotate(""gate.sdf"",top); in = 1'b0; #15 in = 1'b1; end endmodule module dut(output out,input in); buf (out,in); specify (in => out) = (1,1); endspecify endmodule (CELL (CELLTYPE ""dut"") (INSTANCE inst) (DELAY (ABSOLUTE (IOPATH in out (2:3:4) (2:3:4)) ) ) ) Output Time: 0 in:0 out:x Time: 3 in:0 out:0 Time:15 in:1 out:0 Time:18 in:1 out:1 +multisource_int_delays Enables the multisource INTERCONNECT feature, including transport delays with full pulse control. Usage vcs +multisource_int_delays [other_vcs_options] Examples vcs test.v +multisource_int_delays Consider two arcs delays, where delays are originating from multiple (two or more) sources and ending on to a single destination. (S1 -> D1) a delay of 4 ns and (S2 -> D1) a delay of 5 ns. VCS, by default annotates the largest delay on both the paths. When +multisource_int_delays is used the delay used would be different for different source to destination. So, the user in such cases would be able to see 4 ns on (S1->D1) and 5 ns on (S2->D1). +nbaopt Removes all intra-assignment delays in all the non-blocking assignment statements in the design. Many users enter a #1 intra-assignment delay in non-blocking procedural assignment statements to make debugging in the Wave window easier. Usage vcs +nbaopt       [other_vcs_options] Examples reg1 <= #1 reg2; These delays impede the simulation performance of the design, so after debugging, you Note: assignment statements in the design, not just the #1 delays. +sdf_nocheck_celltype For a module instance to which an SDF file back-annotates delay data, disables comparing the module identifier in the source code with the CELLTYPE entry in the SDF file. Usage vcs +sdf_nocheck_celltype [other_vcs_options] Example vcs test.v +sdf_nocheck_celltype `timescale 1ns/1ns module top; reg in; wire out; dut inst(.out(out),.in(in)); initial begin $monitor(""Time:%2t in:%0b out:%0b"",$time,in,out); $sdf_annotate(""test.sdf"",top); in = 1'b0; #15 in = 1'b1; end endmodule module dut(output out,input in); buf (out,in); specify (in => out) = (1,1); endspecify endmodule (CELL (CELLTYPE ""dut0"") (INSTANCE inst) (DELAY (ABSOLUTE (IOPATH in out (2:3:4) (2:3:4)) ) ) ) wrong CELLTYPE is given in SDF, due to +sdf_nocheck_celltype CELLTYPE checking is disabled Output Time: 0 in:0 out:x Time: 3 in:0 out:0 Time:15 in:1 out:0 Time:18 in:1 out:1 +transport_int_delays Enables transport delays for delays on nets with a delay back-annotated from an INTERCONNECT entry in an SDF file. The default is inertial delays. Usage vcs +transport_int_delays +pulse_int_e/number +pulse_int_r/number [other_vcs_options] Examples vcs test.v +transport_int_delays         +pulse_int_e/80 +pulse_int_r/60 +transport_path_delays Enables transport delays for module-path delays. Usage vcs +transport_path_delays +pulse_e/number +pulse_r/number [other_vcs_options] Examples vcs test.v +transport_path_delays         +pulse_e/80 +pulse_r/60 -sdfretain Enables timing annotation as specified by a RETAIN entry on IOPATH delays. By default, VCS ignores RETAIN entries with the following warning message: Warning-[SDFCOM_RCI] RETAIN clause ignored SDF_filename, line_number module: module_name, ""instance: hierarchical_name"" SDF Warning: RETAIN clause ignored, but IOPATH annotated, Please use -sdfretain switch to consider RETAIN Usage The syntax for RETAIN entries is as follows: (IOPATH port_spec port_instance (RETAIN delval_list)*                          delval_list) Examples (IOPATH RCLK DOUT[0] (RETAIN (40)) (100.1) (100.2)) -sdfretain=warning filesRETAIN -sdfretain=warningSDF entriesenablingRETAIN entriesSDF filesenablingSDFRT_IRVwanring If the RETAIN entry values are larger than the delay values, VCS displays the following warning message at runtime: Warning-[SDFRT_IRV] RETAIN value ignored RETAIN value is ignored as it is greater than IOPATH delay Warning-[SDFCOM_RLTPD] RETAIN value larger than IOPATH delay SDF_filename, line_number module: module_name, ""instance: hierarchical_name"" SDF Warning: RETAIN value (value) is larger than IOPATH delay, RETAIN will be ignored at runtime +iopath+edge+strict port in the SDF file and corresponding arc is not found in Verilog model, VCS by default does not give the warning message, you should use the +iopath+edge+strict switch to +iopath+edge+strict display the warning message. After the warning message is displayed, the data from SDF is not back-annotated to the Verilog model. Usage vcs +iopath+edge+strict [other_vcs_options] Examples specify if (en) (in => out ) = (1); endspecify The corresponding SDF syntax is as follows: (COND en (IOPATH (negedge in) out (3))) vcs test.v +iopath+edge+strict [other_vcs_options] The following error message appears: Warning-[SDFCOM_INF] IOPATH not found ./Source/BugsCSH/bug598908.sdf, 11 module: TBUF, ""instance: top.T1.b1"" SDF Warning: IOPATH from in to out is not found. +iopath+edge+ignore Usage vcs +iopath+edge+ignore Examples specify if (en) (in => out ) = (1); endspecify corresponding SDF syntax as follows: (COND en (IOPATH (negedge in) out (3))) vcs test.v +iopath+edge+ignore +iopath+edge+max Usage vcs +iopath+edge+max Examples specify if (en) (in => out ) = (1); endspecify corresponding SDF syntax as follows: (COND en (IOPATH (negedge in) out (3))) (COND en (IOPATH (posedge in) out (4))) max(3,4) is chosen as delay from in to out +iopath+edge+min Usage vcs +iopath+edge+min Examples specify if (en) (in => out ) = (1); endspecify corresponding SDF syntax as follows: (COND en (IOPATH (negedge in) out (3))) (COND en (IOPATH (posedge in) out (4))) min(3,4) is chosen as delay from in to out +mp64 native delays in SDF and scaled delays due to a timescale difference. Usage vcs +mp64 [other_vcs_options] Examples vcs test.v +mp64 (IOPATH A Y (22890654323) (25892654323)) +csdf+precompile Precompiles your SDF file into a format that VCS can parse when it compiles your Verilog code. Usage vcs +csdf+precompile+ Examples Precompiled sdf can be used in command line as follows: vcs +csdf+precompile+test1.sdf vcs test.v -sdf min:tb.dut:test1.sdf_c Precompiled sdf can be used in $sdf_annotate as follows: $sdf_annotate(""test1.sdf_c"",tb.dut,,,""MINIMUM""); -diag=sdf:icverbose Enables the sdfAnnotateInfo file to display the total number of INTERCONNECT statement in an SDF file and the number of successfully annotated INTERCONNECT statement in an SDF file. Usage vcs -diag=sdf:icverbose [other_vcs_options] Examples vcs test.v -diag=sdf:icverbose (INTERCONNECT U_AND_2/Y U_BUF_1/A (33) (44)) %cat sdfAnnotateInfo Static entries in elaborated design under ""tb"": Annotated by SDF ""./top.sdf"": No. of Pathdelays          = 0   Annotated = 0.00% No. of Tchecks             = 0   Annotated = 0.00% Total               Annotated Percentage INTERCONNECT                                                      1              1 100.00% Path Delays Summary of above +pathpulse Enables the search for PATHPULSE$ specparam in specify blocks. Usage SPECPARAM PATHPULSE can be used in two modes: • Specify a Pulse Control for each IOPATH in the module • Specify a Pulse Control for all the IOPATH in the module Examples vcs test.v +pathpulse specify (clk => q) = 12; (data => q) = 10; specparam PATHPULSE$clk$q = (2,9), PATHPULSE$clr$q = (0,4), endspecify +nospecify blockssuppressing specify significantly improve simulation performance. Usage vcs +nospecify [other_vcs_options] Examples vcs test.v +nospecify module top; reg in; wire out; dut inst(.out(out),.in(in)); initial begin $monitor(""Time:%2t in:%0b out:%0b"",$time,in,out); $sdf_annotate(""test.sdf"",top); in = 1'b0; #15 in = 1'b1; end endmodule module dut(output out,input in); buf (out,in); specify (in => out) = (1,1); endspecify endmodule (CELL (CELLTYPE ""dut"") (INSTANCE inst) (DELAY (ABSOLUTE (IOPATH in out (2:3:4) (2:3:4)) ) ) ) Output Time: 0 in:0 out:0 Time:15 in:1 out:1 +notimingcheck simulation performance. The extent of this improvement depends on the number of timing checks after VCS has compiled them into the executable. However, the executable not in the executable. If you need the delayed versions of the signals in negative timing Note: • VCS recognizes +notimingchecks to be the same as +notimingcheck +notimingchecks when you enter it on the vcs or simv command line. command in UCLI. • Disables display of timing violations, but does not disable the toggling of Usage vcs +notimingcheck [other_vcs_options] Examples vcs test.v +notimingcheck timescale 1ns/1ps module top; reg d,clk; wire q; dut inst(.q(q),.d(d),.clk(clk)); initial begin $monitor(""Time:%5t clk:%0b q:%0b"",$time,clk,q); d <= 1'b0; clk = 0; #8 d <= 1'b1; #8 d <= 1'b0; #10 $finish(); end always #5 clk = ~clk; endmodule module dut(output reg q,input d,clk); reg notifier; always @(posedge clk) q <=d; specify (posedge clk => q) = (0,0); $setuphold(posedge clk,d,0.917,1.2,notifier); endspecify endmodule Output Time:    0 clk:0 q:x Time: 5000 clk:1 q:0 Time:10000 clk:0 q:0 Time:15000 clk:1 q:1 Time:20000 clk:0 q:1 No hold violation reported at time 16ns +no_notifier Disables toggling of the notifier register that you specify in some timing check system timing violation that you specified in a timing check. Usage vcs +no_notifier [other_vcs_options] Examples vcs test.v +no_notifier `timescale 1ns/1ps module top; reg d,clk; wire q; dut inst(.q(q),.d(d),.clk(clk)); initial begin $monitor(""Time:%5t clk:%0b q:%0b inst.notifier:%0b"",$time,clk,q,inst.notifier); d <= 1'b0; clk = 0; #8 d <= 1'b1; #8 d <= 1'b0; #10 $finish(); end always #5 clk = ~clk; endmodule module dut(output reg q,input d,clk); reg notifier; always @(posedge clk) q <=d; specify (posedge clk => q) = (0,0); $setuphold(posedge clk,d,0.917,1.2,notifier); endspecify endmodule Output Time:    0 clk:0 q:x inst.notifier:x Time: 5000 clk:1 q:0 inst.notifier:x Time:10000 clk:0 q:0 inst.notifier:x Time:15000 clk:1 q:1 inst.notifier:x ""timing.v"", 24: Timing violation in top.inst $hold( posedge clk:15000, d:16000, limit: 1200 ); Time:20000 clk:0 q:1 inst.notifier:x Time:25000 clk:1 q:0 inst.notifier:x +no_pulse_msg Suppresses pulse error messages, however, not the generation of StE values at module path outputs when a pulse error condition occurs. Usage vcs +no_pulse_msg +transport_path_delays +pulse_r/30 +pulse_e/80 Examples vcs test.v +no_pulse_msg +transport_path_delays +pulse_r/30 +pulse_e/80 `timescale 1ns/1ps module top; reg in; wire out; dut inst1(.out(out),.in(in)); initial begin $monitor(""Time:%5t in:%0b out:%0b "",$time,in,out); $sdf_annotate(""gate.sdf"",top); in = 1'b0; #15 in = 1'b1; #3 in = 1'b0; #15 $finish(); end endmodule module dut(output out,input in); buf (out,in); specify (in => out) = (0,0); endspecify endmodule (CELL (CELLTYPE ""dut"") (INSTANCE inst1) (DELAY (ABSOLUTE (IOPATH in out (2:5:6) (2:5:6)) ) ) ) Output Time:    0 in:0 out:x Time: 5000 in:0 out:0 Time:15000 in:1 out:0 Time:18000 in:0 out:0 Time:20000 in:0 out:x Time:23000 in:0 out:0 +no_tchk_msg Disables display of timing violations, but does not disable the toggling of notifier registers Usage vcs +no_tchk_msg {other_vcs_options] Examples vcs test.v +no_tchk_msg `timescale 1ns/1ps module top; reg d,clk; wire q; dut inst(.q(q),.d(d),.clk(clk)); initial begin $monitor(""Time:%5t clk:%0b q:%0b inst.notifier:%0b"",$time,clk,q,inst.notifier); d <= 1'b0; clk = 0; #8 d <= 1'b1; #8 d <= 1'b0; #10 $finish(); end always #5 clk = ~clk; endmodule module dut(output reg q,input d,clk); reg notifier; always @(posedge clk) q <=d; specify (posedge clk => q) = (0,0); $setuphold(posedge clk,d,0.917,1.2,notifier); endspecify endmodule Output Time:    0 clk:0 q:x inst.notifier:x Time: 5000 clk:1 q:0 inst.notifier:x Time:10000 clk:0 q:0 inst.notifier:x Time:15000 clk:1 q:1 inst.notifier:x Time:16000 clk:1 q:1 inst.notifier:0 Time:20000 clk:0 q:1 inst.notifier:0 Time:25000 clk:1 q:0 inst.notifier:0 +pulse_e/number Displays an error message and propagates an x value for any path pulse whose width is less than or equal to the percentage of the module-path delay specified by the number argument, but is still greater than the percentage of the module-path delay specified by the Usage vcs +transport_path_delays +pulse_e/number +pulse_r/number [other_vcs_options] Example vcs test.v +transport_path_delays +pulse_e/80 +pulse_r/30 `timescale 1ns/1ps module top; reg in; wire out; dut inst1(.out(out),.in(in)); initial begin $monitor(""Time:%5t in:%0b out:%0b "",$time,in,out); $sdf_annotate(""gate.sdf"",top); in = 1'b0; #15 in = 1'b1; #3 in = 1'b0; #15 $finish(); end endmodule module dut(output out,input in); buf (out,in); specify (in => out) = (0,0); endspecify endmodule (CELL (CELLTYPE ""dut"") (INSTANCE inst1) (DELAY (ABSOLUTE (IOPATH in out (2:5:6) (2:5:6)) ) ) ) Output Time:    0 in:0 inst1.out:x Time: 5000 in:0 inst1.out:0 Time:15000 in:1 inst1.out:0 Time:18000 in:0 inst1.out:0 Warning Time = 20000: Pulse flagged as an error in top.inst1, value = StE. Path information not available. Time:20000 in:0 inst1.out:x Time:23000 in:0 inst1.out:0 +pulse_r/number Rejects any pulse whose width is less than number percent of the module-path delay. The pulses pulsesfiltering narrow out number argument is in the range of 0 to 100. Usage vcs +transport_path_delays +pulse_e/number +pulse_r/number [other_vcs_options] Example `timescale 1ns/1ps module top; reg in; wire out; dut inst1(.out(out),.in(in)); initial begin $monitor(""Time:%5t in:%0b out:%0b "",$time,in,out); $sdf_annotate(""gate.sdf"",top); in = 1'b0; #15 in = 1'b1; #1 in = 1'b0; #15 $finish(); end endmodule module dut(output out,input in); buf (out,in); specify (in => out) = (0,0); endspecify endmodule (CELL (CELLTYPE ""dut"") (INSTANCE inst1) (DELAY (ABSOLUTE (IOPATH in out (2:5:6) (2:5:6)) ) ) ) Output Time:    0 in:0 out:x Time: 5000 in:0 out:0 Time:15000 in:1 out:0 Time:16000 in:0 out:0 +pulse_int_r Usage vcs +transport_int_delays +pulse_int_e/number +pulse_int_r/number [other_vcs_options] Example vcs test.v +transport_int_delays +pulse_int_r/40 +pulse_in_e/80 +pulse_int_e +pulse_e Usage vcs +transport_int_delays +pulse_int_e/number +pulse_int_r/number [other_vcs_options] Example vcs test.v +transport_int_delays +pulse_int_r/40 +pulse_in_e/80 +pulse_on_event Specifies that when VCS encounters a pulse shorter than the module-path delay, VCS waits until the module-path delay elapses and then drives an x value on the module output port and displays an error message. It drives that x value for a simulation time equal to the length of the short pulse or until another simulation event drives a value on the output port. Usage when there is an asymmetric delays with transport delay enabled and whenever the propagate through the module. Examples vcs test.v +pulse_on_event +transport_path_delays +pulse_e/100 +pulse_r/0 module top; reg in; wire out; dut inst1(.out(out),.in(in)); initial begin $monitor(""Time:%2t in:%0b out:%0b "",$time,in,out); in = 1'b1; #10 in = 1'b0; #1 in = 1'b1; #15 $finish(); end endmodule module dut(output out,input in); buf (out,in); specify (in => out) = (4,6); endspecify endmodule output: Time: 0 in:1 out:x Time: 4 in:1 out:1 Time:10 in:0 out:1 Time:11 in:1 out:1 Warning:     Time = 15: Pulse flagged as an error in top.inst1, value = StE. Path information not available. Time:15 in:1 out:x Time:16 in:1 out:1 In this example, the scheduling problem is that the leading edge of the pulse on the input, at time 10, schedules a transition to 0 on the output at time 16; but the trailing edge, at time 11, schedules a transition to 1 on the output at time 15.Obviously, the output has to end up with a value of 1. VCS cannot allow the events scheduled at time 15 and 16 to occur in sequence. If VCS allows the events to occur, the output ends up with a value of 0.VCS cancels both events on the output. Due to +pulse_on_event, an error message and an X value pulse on the output is propagated. +pulse_on_detect Specifies that when VCS encounters a pulse shorter than the module-path delay, VCS immediately drives an x value on the module output port, and displays an error message. It does not wait until the module-path delay elapses. It drives that x value until the short pulse propagates through the module or until another simulation event drives a value on the output port. Usage When there is an asymmetric delays with transport delay enabled and whenever the propagate through the module. Examples vcs test.v +pulse_on_event +transport_path_delays +pulse_e/100 +pulse_r/0 module top; reg in; wire out; dut inst1(.out(out),.in(in)); initial begin $monitor(""Time:%2t in:%0b out:%0b "",$time,in,out); in = 1'b1; #10 in = 1'b0; #1 in = 1'b1; #15 $finish(); end endmodule module dut(output out,input in); buf (out,in); specify (in => out) = (4,6); endspecify endmodule output: Time: 0 in:1 out:x Time: 4 in:1 out:1 Time:10 in:0 out:1 Warning:  Time = 11: Pulse flagged as an error in top.inst1, value = StE. Path information not available. Time:11 in:1 out:x Time:16 in:1 out:1 +pulse_on_detect displays the leading edge of the X value pulse on the output. This is done as soon as events on the input, controlled by the +pulse_e/number and +pulse_r/ number options, schedule an X value pulse to appear on the output. Pulse on detect behavior differs from pulse on event behavior in that it calls for the X value pulse to begin before the delay elapses. -negdelay Enables the use of negative values in IOPATH and INTERCONNECT entries in SDF files. IOPATH delaysSDF filesnegative values enablingSDF filesIOPATH delaysnegative values enabling INTERCONNECT delaysSDF filesnegative values enablingSDF filesINTERCONNECT delaysnegative values enabling To consider a negative INTERCONNECT delay, one of the following should be true: • Sum of INTERCONNECT and PORT delays should be greater than zero • Sum of INTERCONNECT and IOPATH delays should be greater than zero • Sum of INTERCONNECT and DEVICE delays should be greater than zero Otherwise, the negative INTERCONNECT delay is ignored, and a warning message is generated for the same. Similarly, to consider a negative IOPATH delay, the sum of IOPATH and DEVICE delays should be greater than zero. Otherwise, the negative IOPATH delay is ignored, and a warning message is generated for the same. Limitations • RETAIN on negative IOPATH • INCREMENT delay Examples vcs test.v -negdelay Sum of INTERCONNECT and IOPATH delay is greter than 0 (CELL (CELLTYPE ""DFFSHQX1"") (INSTANCE F1) (DELAY (ABSOLUTE (IOPATH CK Q (-4.095:-4.104:-4.409) (-4.095:-4.104:-4.409)) ) ) ) (CELL (CELLTYPE ""dut"") (INSTANCE) (DELAY (ABSOLUTE (INTERCONNECT F1/Q U1/A (5.104) (5.104)) ) ) ) +neg_tchk Enables negative values in timing checks. Usage vcs +neg_tchk [other_vcs_options] Examples vcs test.v +neg_tchk specify (posedge clk => q) = (1,1); $setuphold(posedge clk,d,0.917,-0.2,notifier); endspecify +old_ntc Prevents the other timing checks from using delayed versions of the signals in the $setuphold and $recrem timing checks. Examples `timescale 1ns/1ns module top; reg clk, d; reg rst; wire q; dff dff1(q, clk, d, rst); initial begin $monitor($time,,clk,,d,,q); rst = 0; clk = 0; d = 0; #100 clk = 1; #100 clk = 0; #10 d = 1; #90 clk = 1; #1 clk = 0; // width violation #100 $finish; end endmodule module dff(q, clk, d, rst); output q; input clk, d, rst; reg notif; DFF_UDP(q, d_clk, d_d, d_rst, notif); specify $setuphold(posedge clk, d, -10, 20, notif, , , d_clk, d_d); $setuphold(posedge clk, rst, 10, 10, notif, , , d_clk, d_rst); $width(posedge clk, 5, 0, notif); endspecify endmodule primitive DFF_UDP(q,data,clk,rst,notifier); output q; reg q; input data,clk,rst,notifier; table // clock data rst notifier state q // ------------------------------ r 0 0 ? : ? : 0 ; r 1 0 ? : ? : 1 ; f ? 0 ? : ? : - ; ? ? r ? : ? : 0 ; ? * ? ? : ? : - ; ? ? ? * : ? : x ; endtable endprimitive +NTC2 In $setuphold and $recrem timing checks, specifies checking the timestamp and $setuphold $recrem timecheck conditions when the original data and reference signals change value instead of when their delayed versions change value. Example vcs test.v +neg_tchk +NTC2 -simprofile time | mem Specifies the type of simulation profiling you want done, -f <filename> Specify a file that contains a list of source files and compile-time options, including C source files and object files. -f • You can use Verilog comment characters // and /* */ to comment out entries in the file. The comment character // used in between file path is treated as a file path only and not considered as a comment. For example, consider /abc/def//xyz.v. The comment character // used here is not treated as a comment. • You can specify all compile-time options that begin with a plus (+) character. However, you can only specify the following compile-time options that begin with a minus (-) character:"
-f,"-y          -l        -u         -v          -sverilog -file <filename> including C source files and object files. options that begin with (-) character. -file -F <filename> search for the files. Usage %vcs top.v -F <path_to_file>/<filelist> of the file list. Consider that the <filelist> consisting of files a.v and b.v exists in the previous directory of the current working directory. With the following syntax, the path to the <filelist> is added as a prefix to the content of the <filelist>. When parsed, VCS searches for files ../a.v and ../b.v. %vcs top.v <source_files> -F ../<filelist> You can also specify an absolute path name using the following syntax: %vcs top.v -F <absolute_path>/<filelist> The syntax allows you to search for files <absolute_path>/a.v and <absolute_path>/ b.v. • You can use Verilog comment characters such as // and /* */ to comment out entries in the file. • You can specify all compile-time options that begin with a plus (+) character. However, you can only specify the following compile-time options that begin with a minus (-) character: | Specifies a file that contains a list of path names to source files."
-CC,-f       -F       -gen_asm         -gen_obj          -l       -line
-P,"-u       -v       -y +plusarg_save them into the executable. Examples vcs test.v +plusarg_save +plusarg_ignore Examples vcs test.v +plusarg_ignore +applylearn+filename Recompiles your design to enable only the ACC capabilities that you needed for the debugging operations you did during a previous simulation of the design. -e new_name_for_main Specifies the name of your main() routine. You write your own main() routine when you are writing a C++ application or when your application does some processing before starting the simv executable. Note: -P pli.tab Compiles a user-defined PLI definition table file. +vpi Enables the use of VPI PLI access routines. +vpi+1 Allows you to reduce the runtime memory by reducing the information storage for VPI preserves the structural information. • Browse the design hierarchy and read the values of variables. This facilitates debugging. • Write over or force values on variables using vpi_put_value(). This allows a foreign language testbench to drive a stimulus to a Verilog design. • Register VPI callbacks. This facilitates the waveform dumping features. However, certain advance debugging features (such as Line stepping, Driver/Loads information, and so on) will not be available. Note: +vpi+1+assertion and RT assertions to the base features of +vpi+1. • When +vpi+1 is used with debug capabilities, the following capabilities are disabled: ◦ Line breakpoints are disabled inside initial, always, task, and function blocks. ◦ Statement, thread, and frame callbacks. ◦ VPI handles to statements. +vpi+1+assertion Allows you to browse, enable, and disable SV and RT assertions to the base features of +vpi+1. -load shared_library:registration_routine Specifies the registration routine in a shared library for a VPI application. +vc+[abstract+allhdrs+list] in your source code. See the VCS DirectC Interface User Guide. The optional suffixes to • +abstract DirectCabstract accessspecifying Enables abstract access through vc_handles. • +allhdrs DirectC filein filevc_hdrs.h DirectCvc_hdrs.h Writes the vc_hdrs.h file that contains external function declarations that you can use in your Verilog code. • +list functions C/C++ the DirectClisting Displays all the C/C++ functions that you called in your Verilog source code. +vcs+flush+log Increases the frequency of flushing both the compilation and simulation log file buffers. +vcs+flush+dump Increases the frequency of flushing all VCD file buffers. +vcs+flush+fopen Increases the frequency of flushing all the buffers for the files opened by the $fopen system function. +vcs+flush+all +flush+fopen options. -lmc-swift Includes the LMC SWIFT interface. interfaceincluding SWIFT LMC -lmc-swift-template Generates a Verilog template for a SWIFT Model. -error Revises the +lint and +warn options, to control error and warning messages. With them you can: Revises the +lint and +warn options, to control error and warning messages. With them you can: • Disable the display of any lint, warning, or error messages • Disable the display of specific messages • Limit the display of specific messages to a maximum number that you specify Note: is supported at runtime: -error=[no]message_ID[:max_number],... -nc -suppress Disables the display of error and warning messages. +sdfverbose By default, VCS displays no more than ten warning and ten error messages about back- annotation warning and error messages. This default limitation on back-annotation messages applies only to messages displayed on the screen and written in the simulation log file. If you specify an SDF log file in the $sdf_annotate system task, this log file receives all messages. Usage vcs +sdfverbose [other_vcs_options] Examples vcs test.v +sdfverbose module top; reg d,clk; wire q; dut inst(.q(q),.d(d),.clk(clk)); initial begin $monitor(""Time:%2t clk:%0b q:%0b inst.notifier:%0b"",$time,clk,q,inst.notifier); $sdf_annotate(""test.sdf"",top,,""sdf.log"",""MAXIMUM""); d <= 1'b0; clk = 0; #8 d <= 1'b0; #6.8 d <= 1'b1; #10 $finish(); end always #5 clk = ~clk; endmodule module dut(output reg q,input d,clk); reg notifier; wire d_d; always @(posedge clk) q <=d; assign cond1 = d; specify (posedge clk => q) = (0,0); $setuphold(posedge clk,d,0.917,-0.2,notifier,,cond1,clk_d,d_d); endspecify endmodule +lint=[no]ID|none|all Enables messages that tell you when your Verilog code contains something that is bad style, but is often used in designs. Where, • no Specifies disabling lint messages that have the ID that follows. There is no space between the keyword no and the ID. • none Specifies disabling all lint messages. IDs that follow in a comma separated list are exceptions. • all Specifies enabling all lint messages. IDs that follow preceded by the keyword no in a comma separated list are exceptions. Usage enabling or disabling warning messages. Additionally, these options have in common that some of their messages have the same ID. This is because when there is a condition in your code that causes VCS to display both a warning and a lint message, the corresponding lint message contains more information than the warning message and can be considered more verbose. Examples • Enable all lint messages except the message with the GCWM ID: +lint=all,noGCWM • Enable the lint message with the NCEID ID: +lint=NCEID • Enable the lint messages with the GCWM and NCEID IDs: +lint=GCWM,NCEID • Disable all lint messages. This is the default. +lint=none The number of possible lint messages is not large. They are as follows: Lint-[IRIMW] Illegal range in memory word Lint-[NCEID} Non-constant expression in delay Lint-[GCWM] Gate connection width mismatch Lint-[CAWM] Continuous Assignment width mismatch Lint-[IGSFPG] Illegal gate strength for pull gate Lint-[TFIPC] Too few instance port connections Lint-[IPDP] Identifier previously declared as port Lint-[PCWM] Port connect width mismatch Lint-[VCDE] Verilog compiler directive encountered -no_error ID+ID Changes the error messages with the UPIMI and IOPCWM IDs to warning messages example: Examples -no_error UPIMI+IOPCWM UPIMI+IOPCWM -noerror -q Quiet mode; suppresses messages such as those about the C compiler VCS is using, the source files VCS is parsing, the top-level modules, or the specified timescale. -V Verbose mode; compiles verbosely. The compiler driver program prints the commands messages compilingverbose entered simv -V. -Vt Verbose mode; provides CPU time information. Like -V, but also prints the amount of time +warn=[no]ID|none|all Uses warning message IDs to enable or disable display of warning messages. In the following warning message: Warning-[TFIPC] Too few instance port connections Usage +warn=[no]ID|none|all,... Where, no        Specifies disabling warning messages with the ID that follows. There is no space between the keyword no and the ID. none      Specifies disabling all warning messages. IDs that follow, in a comma-separated list, specify exceptions. VCS treats all SDF error messages as warning messages so including +warn=none disables SDF error messages. all       Specifies enabling all warning messages, IDs that follow preceded by the keyword no, in a comma separated list, specify exceptions. Examples"
+warn=noIPDW,Enables all warning messages except the warning with the IPDW ID.
"+warn=none,TFIPC",Disables all warning messages except the warning with the TFIPC ID.
"+warn=noIPDW,noTFIPC",Disables the warning messages with the IPDW and TFIPC IDs.
+warn=all,"Enables all warning messages. This is the default. In cases where both -error and +warn for the same ID are used on the command line in order to downgrade the error to warning and at the same time suppress warning, the order in which they are specified on the command line also impact the compilation. VCS processes the options based on the order they are specified in the command line. If the can take effect because the -error=no<ID> has already downgraded it to warning. might not see the error and the warning is suppressed. To suppress an error, always use -suppress=ID, which actually combines the functionality of -error=no<ID> and +warn=no<ID> together. +error+count Enables you to increase the VCS elaboration error count limit. By default, VCS stops elaboration after reaching 10 errors. number of errors reaches the count limit with the following note: Note-[MAX_ERROR_COUNT] Maximum error count reached Current number of errors has reached the default maximum error count (12). Use +error+<count> to increase the limit. Note: that, when VCS encounters a fatal error (for example, syntax error), it exits immediately irrespective of the count that you have specified in the +error -parse_only VCS runs in multiple stages, such as parsing, and compilation/elaboration stage. To make sure VCS quits normally before all syntax and semantic issues are checked, you -parse_only Usage % vcs -parse_only <other options> This enables the VCS to run only during the parsing stage to check for syntax errors. Any syntax errors found is reported. Regardless of whether any syntax error is reported or not, VCS stops at the end of the parsing stage. The link or elaboration stages are not run. Also, simv executable is not generated. +nolibcell Does not define as a cell modules defined in libraries unless they are under the `celldefine compiler directive. ‘celldefine‘celldefine[celldefine] +nocelldefinepli+0 Enables recording in VPD files, the transition times and values of nets and registers in all modules defined under the 'celldefine compiler directive or defined in a library that -v-v[v] -y-y[y] modules. +nocelldefinepli+1 Disables recording in VPD files, the transition times and values of nets and registers in all PLI access to these modules. Modules in a library file or directory are not affected by this +nocelldefinepli+2 In VPD files, disables recording the transition times and values of nets and registers in all modules defined under the 'celldefine compiler directive or defined in a library that you specify with the -v or -y options, whether the modules in these libraries are defined under modules. Disabling recording of transition times and values of the nets and registers in library cells can significantly increase simulation performance. Note: Disabling recording transitions in library cells is intended for batch simulation only and not for interactive debugging with GUI. +nocelldefinepli+1+ports Removes the PLI capabilities from `celldefine modules but allows PLI access to port ‘celldefine‘celldefine[celldefine] nodes and parameters. +nocelldefinepli+2+ports Removes the PLI capabilities from library and ‘celldefine modules and allows PLI access to port nodes and parameters. -licwait <timeout> Enables VCS to retry for a license until <timeout> expires, where <timeout> is the time in minutes. Usage % vcs -licwait <timeout> <other compile options> Examples % vcs -licwait 10 <other compile options> Here, VCS waits for the license for 10 minutes. -licqueue Tells VCS to try for the license till it finds the license. If there are multiple jobs asking for a license, then any one of those jobs get the license (similar to the older or the deprecated Usage % vcs -licqueue <other compile options> VCS_LICENSE_WAIT enables the license wait. Thus, the first job to enter the queue gets the license when the -ID Returns useful information about a number of things: the version of VCS that you have set the VCS_HOME environment variable to, the name of your workstation, your workstation’s VCS_HOME platform, the host ID of your workstation (used in licensing), the version of the VCS compiler (same as VCS) and the VCS build date. -ld linker Specifies an alternate front-end linker. Only applicable in incremental compile mode, which linkingspecifying linker another is the default. -LDFLAGS options Passes options to the linker. Examples -LDFLAGS ""-z muldefs"",-LDFLAGS ""-rdynamic"", -LDFLAGS ""-lpthread"", -LDFLAGS ""-L <path>"", -LDFLAGS ""-l name"", -LDFLAGS ""-load"" -c Tells VCS to compile the source files, generate the intermediate C, assembly, or object hand by linkinglinking files, and compile or assemble the C or assembly code, but not to link them. Use this -lname Links the name library to the resulting executable. Usage is the letter l followed by a name executable the to library specified a linkinglinking (no space between l and name). For example: -lm (instructs VCS to include the math library). -Marchive=number_of_module_definitions By default, VCS compiles module definitions into individual object files and sends all the object files in a command line to the linker. Some platforms use a fixed-length buffer for the command line, and if VCS sends too long a list of object files, this buffer overflows and the link fails. A solution to this problem is to have the linker create temporary object files containing more than one module definition so there are fewer object files on the specify how many module definitions are in these files. the object files containing more than one module definition are copies of the object files for each module definition. After the linker creates the simv executable, it deletes the temporary object files. -picarchive VCS can fail during linking due to the following two reasons: • Huge size of object files: VCS compiles the units of your design into object files, then calls the linker to combine them together. Sometimes the size of a design is large enough that the size of text section of these object files exceeds the limit allowed by the linker. If so, the linker fails and generates the following error: relocation truncated to fit:.... • Large number of object files: By default, VCS compiles module or entity definitions into individual object files and sends this list of object files in a single command line to the linker. Some platforms use a fixed-length buffer for the command line. If VCS sends a long list of object files, this buffer overflows and the link fails, generating errors such as: make: execvp: gcc: Argument list too long make: execvp: g++: Argument list too long -picarchive 1. Enables Position Independent Code (PIC) object file generation along with linking the shared object version of VCS libraries. 2. Archives generated PIC code into multiple shared objects inside simv.daidir or simv.db.dir directory. 3. Links the Shared objects at runtime to the final executable, instead of linking all the objects statically into final executable in a single step at compile-time. -cc compiler Specifies an alternate C compiler. compiler another generatingspecifying code C -CC options Passes options to the C compiler or assembler. the C code options to compiler generatingpassing -CFLAGS options Passes options to C compiler. Multiple -CFLAGS are allowed. Allows passing of C compiler optimization levels. For example, if your C code, test.c, calls a library file in your arguments: Examples %vcs top.v test.c -CFLAGS ""-I$VCS_HOME/include"" or %setenv CWD 'pwd' %vcs top.v test.c -CFLAGS ""-I$CWD/include"" or %vcs top.v test.c -CFLAGS ""-I../include"" The reason to enter ""../include"" is because VCS creates a default csrc directory where it runs gcc commands. The csrc directory is under your current working directory. Therefore, you need to specify the relative path of the include directory to the csrc directory for gcc C compiler. Further, you cannot edit files in the csrc because VCS automatically creates this directory. -cpp Specifies the C++ compiler. Note: If you are entering a C++ file or an object file compiled from a C++ file on the vcs command line, you must tell VCS to use the standard C++ library for linking. To do this, enter the -lstdc++ linker flag with the -LDFLAGS elaboration Examples vcs top.v source.cpp -P my.tab \ -cpp /net/local/bin/c++ -LDFLAGS -lstdc++ -jnumber_of_processes Specifies the number of processes that VCS forks for parallel compilation. There is parallel compilation generating intermediate C files (-gen_c) and their parallel compilation. -C Stops after generating the C code intermediate files. -O0 Suppresses optimization for faster compilation (but slower simulation). Suppresses for C code generatingsuppressing optimization faster compilation optimization for how VCS both writes intermediate C code files and compiles these files. -Onumber Specifies an optimization level for how VCS both writes and compiles intermediate C code files. The number can be in the 0-4 range; 2 is the default, 0 and 1 decrease optimization, or 4 with no space between them. See above for additional information regarding the -O0 variant. -override-cflags Tells VCS not to pass its default options to the C compiler. By default, VCS has a number of C compiler options that it passes to the C compiler. The options it passes depends on the platform, whether it is a 64-bit compilation, whether it is a mixed HDL design, and other factors. VCS passes these options and then passes the options you specify with the -gfile cmdfile Overrides the default values for design generics and parameters by using values from the file cmdfile. The cmdfile file contains assign commands targeting design generics and parameters. Usage assign value path_to_parameter/generic The path to the parameter or generic is similar to a hierarchical name except that you use the forward slash character (/) instead of a period as the delimiter. -pvalue+parameter_hierarchical_name=value Changes the specified parameter to the specified value. -parameters filename Changes the parameters specified in the file to values specified in the file. The syntax for a line in the file is as follows: assign value path_to_parameter The path to the parameter is similar to a hierarchical name, except that you use the forward slash character (/) instead of a period as the delimiter. -xzcheck [nofalseneg] Checks all the conditional expressions in the design and displays a warning message every time VCS evaluates a conditional expression to have an x or z value. nofalseneg Suppress the warning message when the value of a conditional expression transitions to an x or z value and then to 0 or 1 in the same simulation time step. -race Enables dynamic race detection (read-write races, write-write races) for the entire design. Usage % vcs <design_file> -race Example % vcs test.v -race -racecd Enables race detection for the part of your design that is enclosed between the 'race and 'endrace compiler directives. Usage % vcs <design_file> -racecd Example % vcs test.v -racecd +race=all Usage % vcs <design_file> +race=all Example % vcs test.v +race=all -timescale=time_unit/time_precision Occasionally, some source files contain the 'timescale compiler directive and others do not. In this case, if you specify the source files that do not contain the 'timescale compiler directive on the command line before you specify the ones that do, this is an error timescale for the source files that do not contain this compiler directive and precede the -unit_timescale[=<default_timescale>] compilation-unit scope. You must not include spaces when specifying arguments to this The IEEE Standard 1800-2005 SystemVerilog LRM explains the time unit declaration, as follows: ""The time unit of the compilation-unit scope can only be set by a time unit declaration, not a 'timescale directive. If it is not specified, then the default time unit shall be used."" The default_timescale value should be in the same format as the `timescale directive. If the default timescale is not specified, then 1s/1s is taken as the default timescale of the compilation-unit. -override_timescale=time_unit/time_precision Overrides the time unit and precision unit for all the 'timescale compiler directives in the ‘timescale definitions that precede the first 'timescale compiler directive. Do not include spaces Usage vcs -sverilog               -override_timescale=1ms/1ms Examples vcs -sverilog 1.v               -override_timescale=1ms/1ms cat 1.v `timescale 1ps/1ps module top(); test dut(); test1 dut1(); initial $printtimescale (top); endmodule -time base_time base time for simulation timebase variable -time_res value timebase variable -noinherit_timescale compilation unit of any source file that does not have an explicit 'timescale directive. unit/time precision specification present inside the module, program, interface, or package definition, then the time unit/time precision is determined using the following rules: • If the module or interface definition is nested, then the time unit/time precision shall be inherited from the enclosing module or interface. • Else, if `timescale directive is previously specified within the file, then the time unit/ time precision shall be set to that of the `timescale directive. • Else, if the time unit/time precision is specified outside all other declarations within a compilation unit, then the time unit/time precision shall be set to that specification. • Else, the global time unit/time precision specified by the -noinherit_timescale Similarly in presence of other timescale options specified in this document, the following is the precedence: -override_timescale > -noinherit_timescale > -timescale/-unit_timescale Therefore, when the combination of options are used, the behavior is as follows: • If the -timescale (or the -unit_timescale) and the -noinherit_timescale options are used in the same command line, timescale from the -noinherit_timescale • In case of three-step flow, if the -timescale (or -unit_timescale) and the -noinherit_timescale options are used in different command line, such as one is in vlogan and another is in vcs command line, timescale specified at vlogan stage cannot be overridden at vcs stage (except for the case when you use the - -overridde_timescal Examples You can use the following vcs and vlogan command lines: % vcs -noinherit_timescale=""10ps/1ps"" a.v b.v c.v -noinherit_timescale or % vcs -noinherit_timescale=""10ps/1ps"" b.v c.v a.v or % vlogan -noinherit_timescale=""10ps/1ps"" c.v a.v c.v Any of the above commands result into the following timescale: • module A - 10ps/1ps • module B - 10ps/1ps • module P - 100ps/1ps • module Q - 10ps/1ps • module X - 1ns/1ns • module Y - 1ns/1ns -vts_ignore_env=ENV1,ENV2,... certain environment variables from incremental compilation during VCS timestamp checks. Usage vcs <file_name> -vts_ignore_env=myenv1,myenv2 Examples vcs test.v -vts_ignore_env=myenv1,myenv2 -gfile through a file for both Verilog and VHDL respectively. You must specify the file name, which contains the list of all generics and parameters that Usage % vcs top_level_entity_or_module -gfile parameters_or_generics_file other_options The syntax for the parameters_or_generics_file is as follows: assign val path Where, val: Specifies the value that overrides the specified parameter/generic. path: Specifies the absolute hierarchical path to the parameter/generic value which is to be overridden. Note: The -gfile supports only VHDL syntax for hierarchical path representation. All escaped identifiers in the Verilog path must be converted into VHDL extended identifiers. If the escaped identifier contains ‘\’ characters, they must be escaped with another ‘\’ character. For example, consider the following Verilog hierarchical path for the parameter ‘P1’. top.dut.\inst1_\cpu .inst2.P1 The corresponding generics_file entry is as follows: assign 'hffffffff /top/dut/\inst1_\\cpu\/inst2/P1 All ‘for-generate’ and ‘instance-array’ parentheses must be round parentheses, and the path delimiter must be ‘/’. All instance paths for VHDL-Top and Verilog- Top designs must start with ‘/’. Example: -gfile follows: % vcs vh_top -gfile overrides.txt Where, overrides.txt contains the following entries: assign 'hffffffff /top/dut/\inst1_\\cpu\/inst2/P1 assign    ""DUMMY"" /top/dut/\inst1_\\cpu\/inst2/P2 assign    10.34 /top/dut/\inst1_\\cpu\/inst2/P3 • Integer • Real • String message. -pvalue vcs command line. Usage vcs -pvalue+hierarchical_name_of_parameter= value Examples vcs source.v -pvalue+test.d1.param1=33 Note: -pvalue_nonlocal When param_assignments appear in a module_parameter_port_list and you specify the -pvalue_nonlocal, then any param_assignments that appear in the module become local parameters and shall not be overridden by any method (such as -pvalue). Examples % vcs -sverilog -pvalue+dly=20 -pvalue_nonlocal test.v -pvalue+pkg1::WIDTH=3 -pvalue+pkg2::WIDTH=4 You can override the package parameters during design elaboration using the -pvalue Examples % vcs -sverilog -pvalue+pkg1::WIDTH=3 -pvalue+pkg2::WIDTH=4 test.v ./simv -gv|-gvalue generic is of type integer or real. Examples vcs work.top -gvalue /TOP/LEN=1 -g|-generics cmdfile Overrides the default values for the design generics by using values from the file cmdfile. The file cmdfile is an include file that contains assign commands targeting design generics. -param_override=dont_report the generic override messages in stdout and the compile log file. Usage % vcs <design_files> -pvalue|-gfile|-gv|-g -param_override=dont_report -param_override=report Suppress the message in stdout and compile log file and add it in the param_override.rpt log file in the current working directory. Usage % vcs <design_files> -pvalue|-gfile|-gv|-g -param_override=report Examples %vcs -sverilog t.v -pvalue P=10 -param_override=dont_report -check_all -check_all check=all options for SystemVerilog. -boundscheck -boundscheck at compile-time, -boundscheck at runtime, and -ntb_opts -check_all at compile-time. Thus, warning messages are generated for fixed-size arrays and error messages are generated for variable-sized arrays. -boundscheck Enables the compile-time check for two-dimensional or three-dimensional arrays with packed dimensions. The following warning message is displayed during compile-time: Warning-[SIOB] Select index out of bounds and intermediate index access of fixed size and variable size unpacked arrays, dynamic arrays, and queues. Warning messages are generated for fixed size arrays, and error messages are generated for variable size arrays. The following error messages or warning messages are displayed during runtime out-of- bounds index access: • Error-[DT-OBAE] Out of bound access for queues • Error-[DT-OBAE] Out of bound access for dynamic arrays • Warning-[AOOBAW] Out of bound access for fixed size unpacked arrays • Warning-[AOOBAW] Out of bound access for fixed size packed arrays Examples vcs test.v -boundscheck -check messages are displayed during runtime: • Error-[SIMERR_FDIVZERO_SCOPE] Divide by Zero Error • Error-[SIMERR_INCONSISTENTIC] Incorrect Binding Range • Error-[SIMERR_INCONSISTENTIS] Subtype constraints inconsistencies +busconfloat+ VCS support options to detect multiple conflicts on buses. Buses are considered to be in conflict or floating state when: • Any bus for which two or more active drivers have different strength values. Active drivers are those with Strong (strong0, strong1) or Supply (supply0, supply1) strength. • Any external bus (that is inout or output port of DUT) for which two or more active drivers have the same values is considered to be in conflict state. • Any bus is in floating state when all drivers are HiZ. VCS reports an error if the state has been held for an interval greater than that provided in the command line/ $busconfloat task argument. In some cases, a driver can be a driver of multiple buses. Note: For external buses, multiple drivers with different values also creates a conflict scenario. However, if multiple drivers drive the same value, it is also considered a conflict. Usage +busconfloat+IBC_interval+IBF_interval+EBC_interv al+EBF_interval +DUT_instance_path • Using system task: $busconfloat(IBC_interval, IBF_interval, EBC_interval, EBF_interval, ""DUT_instance_path"") where, IBC_interval and IBF_interval are the internal bus conflict and floating intervals (the interval that conflict must be present before reporting a message). EBC_interval and EBF_interval are the external bus conflict and floating state intervals respectively. If both are specified, then the parameters given in the compile time options are observed. VCS also detects buses based on the +busdrive[+config_file] compile- scenarios are considered as buses: +busconfloat+* is given: • No +busdrive*: All internal and external buses are detected. • +busdrive: Selects only buses in cells with BUSCHECK. Therefore, +busdrive supercedes $busconfloat. • +busdrive+cfgfile: Selects only buses driven by cells given in cfgfile. Therefore, cfgfile supercedes $busconfloat. • . Both +busdrive+cfgfile and +busdrive: Selects buses driven by the cells specified in cfgfile and buses in cells with BUSCHECK. Examples vcs -sverilog test.v +busconfloat+100+100+100+100+""top.i_dut"" module top; wiretarget; dut i_dut(.pad_0(target)); tester i_tester(.pad_0(target)); initial begin $monitor($stime, , ""(i_dut.is_drive,i_tester.is_drive)=(%b,%b) (i_dut.in_data,i_tester.indata)=(%b,%b) : EB=%v"", i_dut.is_drive, i_tester.is_drive, i_dut.in_data, i_tester.indata, target); $display(""--- floating ---""); i_dut.in_data = 0; i_dut.is_drive = 1; i_tester.indata = 0; i_tester.is_drive = 1; #(200) ; $display(""--- io0 is ON ---""); i_dut.in_data = 0; i_dut.is_drive = 0; #(200) ; $display(""--- conflict ---""); i_dut.in_data = 0; i_dut.is_drive = 0; i_tester.indata = 0; i_tester.is_drive = 0; #(200) ; i_tester.is_drive = 1; #(200) ; $finish; end endmodule module tester(pad_0); inoutpad_0; reg[(1 - 1):0]is_drive; reg[(1 - 1):0]indata; wire[(1 - 1):0]outdata; tester_driver inst_0(.pad(pad_0), .indata(indata[0]), .outdata(outdata[0]), .is_drive( is_drive[0])); endmodule module dut(pad_0); inoutpad_0; parameterinstance_num= 1; regin_data; regout_data; regis_drive; IO_CELL inst_0(.EB(pad_0), .C(is_drive), .A(in_data), .X(out_data)); endmodule module IO_CELL(A, C, X, EB); inputA; inputC; outputX; inoutEB; specify specparam BUSCHECK$= 1; specparam AREA$= 0; specparam BC$= 1; (A => EB) = (1, 1); (C => EB) = (0, 0, 1, 1, 1, 1); (EB => X) = (1, 1); endspecify buf (X, EB); bufif0 (EB, A, C); endmodule module tester_driver(pad, indata, outdata, is_drive); inoutpad; inputindata; outputoutdata; inputis_drive; assign pad = ((!is_drive) ? indata : 1'bz); assign outdata = pad; endmodule %cat conflict.external.rpt External conflicts Bus name: top.i_dut.pad_0 400 St0 top.i_dut.inst_0.EB 400 St0 top.i_tester.inst_0.pad 600 St0 top.i_dut.inst_0.EB 600 HiZ top.i_tester.inst_0.pad %cat float.external.rpt External floating Bus name: top.i_dut.pad_0 1 HiZ top.i_dut.inst_0.EB 1 HiZ top.i_tester.inst_0.pad 201 St0 top.i_dut.inst_0.EB 201 HiZ top.i_tester.inst_0.pad -auto_tchk_local_precision VCS used global time precision to scale delay or timing check limit values at compile time, when there were separate timescale or precision for each module. VCS allows you to define local time precision for modules that uses different timescale units and precisions. To enable this feature, you can use a configuration file or the Usage % vcs <filename> -auto_tchk_local_precision -full64 Examples % vcs test.v -auto_tchk_local_precision -full64 -varindex_drivers As per SystemVerilog LRM 1800 TM-2017, Section 6.5 Nets and variables, an error is issued when multiple continuous assignments or a mixture of procedural and continuous assignments writing to any term in the expansion of a written longest static prefix of a variable. VCS considers the longest static prefix for multiple driver analysis as defined in Usage vcs <file_name> -sverilog -full64 -varindex_drivers Examples `timescale 1ns/1fs module top(); reg CLK, D; wire OP1; dff f1(OP1, D, CLK); //clock generator always #5000000 CLK = ~CLK; //print initial begin D=0; CLK=0; D, CLK, OP1); end //test initial begin #43000000 D=1; #4000000 D=0; #1000000 D=1; #10000000 D=0; #20000000 $finish; end endmodule //Simple D Flip Flop `timescale 1ns/1ns module dff (q, d, clk); output q; input d, clk; reg q, notifier; always @(posedge(clk)) q=d; specify specparam t_setup=3000000; $setup(d, posedge clk, t_setup, notifier); endspecify endmodule -ntb_opts multi_driver_no_source_info In the partition compile flow, VCS generates an error message in the presence of an invalid combination of structural and procedural drivers or an invalid combination of two structural drivers for the variables of a design. VCS dumps the driver information of all the variables of the design during elaboration, which significantly increases the compile time. You can use the -ntb_opts information of variables. Usage %vcs -sverilog -full64 -partcomp <file_name> <configuration_file> -ntb_opts multi_driver_no_source_info Examples %vcs -sverilog -full64 -partcomp test.sv +optconfigfile+test.cfg -ntb_opts multi_driver_no_source_info +incdir+directory+ Specifies the directory or directories in which VCS searches for include files used in the ‘includespecifying `include compiler directive. search the the search directories[include] directories‘includespecifying Files to be included and specified with the 'include compiler directive are called included files. VCS searches for included files in the following order: 1. In the current directory +incdir Examples You can specify more than one directory separated by the plus (+) character. For example: +incdir+dir1+dir2 +incdir+dir1+dir2 In this example subdirectories dir1 and dir2 are in the current directory. +incdir+/file_sys/server/design_group/design_lib You can also specify an absolute path name. -sysc Enables SystemC cosimulation engine. -sysc=adjust_timeres Determines the finer time resolution of SystemC and HDL in case of a mismatch, and sets it as the simulator’s timescale. VCS may be unable to adjust the time resolution if you function call in your SystemC code. In such cases, VCS reports an error and does not create simv. in three-step (UUM) flow. +tetramax Enables splitting of TetraMAX’s large testbench to improve VCS capability and to reduce compile time. +noportcoerce is the equivalent of the 'noportcoerce compiler directive. +noerrorIOPCWM Changes the error condition, when a signal is wider or narrower than the inout port to which it is connected, to a warning condition, thus allowing VCS to create the simv executable after displaying the warning message. -genid_db feature and prepare the internal search database. feature: • -genid_db -genid_db • -nogenid_db -nogenid_db • -debug_access+idents_db -debug_access+idents_db • -debug_access+all Usage % vcs -genid_db -debug_access+idents_db <file_name> Examples % vcs -genid_db -debug_access+idents_db top.v the feature is not enabled. If you elaborate your design with -debug_access+all, but without -genid_db, then VCS creates the database during the first search query. This postpones most of the disk space and CPU overhead. -nogenid_db Specify -nogenid_db, if you want to completely avoid any disk space and CPU time -nogenid_db -debug_access+all. -l filename -R-R[-] VCS records messages from both compilation and simulation in the same file. -a logFilename Captures simulation output and appends the log information in the existing log file. If the -u Changes all the characters in identifiers to uppercase. It does not change identifiers in quoted strings such as the first argument to the $monitor system task. +define+macro=value+ Defines a text macro in your source code to a value or character string. You can test for this definition in your Verilog source code using the 'ifdef compiler directive. The =value argument is optional. Usage vcs <file_name> +define+macro=value+ Examples vcs design.v +define+USETHIS The macro is used inside the source file using the 'ifdef compiler directive. If this macro `ifdef USETHIS package p1; endpackage `else package p2; Endpackage `endif +undefine+<macroname> Undefines a text macro in your source code that is already defined. Note: If the text macro is defined more than once in the source code, undefining does not happen because the undef flag is overwritten. Usage % vcs <file_name> -sverilog -full64 +undefine+<macroname> Examples % vcs temp.v -sverilog -full64 +undefine+A After compiling below example with the above vcs command, string ""Fail"" does not appear in simulation log, because macro A is no longer defined in the design once +undefine+A -p1800_macro_expansion results that are more LRM-compliant and accurate especially for SystemVerilog macros. Usage % vcs [elab_options] <file_name> -sverilog -p1800_macro_expansion Examples % vcs [elab_options] test.sv -sverilog -p1800_macro_expansion -o name Specifies the name of the executable file. In UNIX, the default is simv. -platform Returns the name of the platform directory in your VCS installation directory. For example, when you install VCS on a Solaris version 5.4 workstation, VCS creates a directory named, sun_sparc_solaris_5.4, in the directory where you install VCS. In this directory are subdirectories for licensing, executable libraries, utilities, and other important files and executables. You need to set your path to these subdirectories. You can do so by Examples set path=($VCS_HOME/bin\ $VCS_HOME/'$VCS_HOME/bin/vcs -platform'/bin\$path) -maxLayers value Sets the maximum number of donut layers for a mixed HDL design. The default value is 8. -xlrm Enables VHDL features beyond those described in IEEE Standard VHDL 1076-2008 LRM. +vcs+loopreport+number Reports the zero delay loops. It is mandatory to include the +vcs+loopreport+number When +vcs+loopreport+number is specified at compile time, VCS does the following • If number is not specified at runtime, VCS checks if the simulation event loops for 2,000,000 times (by default) in the same simulation time tick, and issues a runtime warning message. VCS also terminates the simulation and generates a report when a zero delay loop is detected. • If +vcs+loopreport+N is specified at runtime, VCS checks if the simulation event loops for 'N' times instead of 2,000,000. VCS then issues a runtime warning message, and terminates the simulation. Usage vcs +vcs+loopreport+number [other_vcs_options] Examples vcs test.v +vcs+loopreport+100000 module dummy(); top t1(); endmodule module top(); reg A,B; initial A=1; always @* A= ~B; always @* B=A; Output VCS Loop Detection: Switching loop detection algorithm ON at time 0 delta-cycles exceeded the threshold-limit. Possible zero delay loop(s). Error-[VCS_LOOP_DETECTED] Infinite loop in simulation Detected an infinite loop in the simulation at time 0. Details written to ""loop-info-46283.log, loop-info-verbose-46283.log"". %cat loop-info-46283.log ========================================================== SIMULATION TIME: 0 ======================Loop no.=1========================= Module             : top Instance (Signals) : dummy.t1 ( A ) File           : /remote/us01home59/nusri/loopreport/test.v 8-9, Loop occurs within the module top %cat loop-info-verbose-46283.log ####################################################### SIMULATION TIME: 0 #################Loop no. 1############################ Constr   : Always Module   : top Instance : dummy.t1 /remote/us01home59/nusri/loopreport/test.v : 8-9. (signal: A) --------------------------------------------------------- Constr   : Always Module   : top Instance : dummy.t1 /remote/us01home59/nusri/loopreport/test.v : 8-9. (signal: A) --------------------------------------------------------- +vcs+loopdetect+number Enables the detection of zero delay loops. When +vcs+loopdetect+number is specified at • If number is not specified at runtime, VCS checks if the simulation event loops for 2,000,000 times (by default) in the same simulation time tick, and issues a runtime error message. VCS also terminates the simulation. • If +vcs+loopdetect+N is specified at runtime, VCS checks if the simulation event loops for 'N' times instead of 2,000,000. VCS then issues a runtime error message, and terminates the simulation. Usage vcs +vcs+loopdetect+number [other_vcs_options] Examples vcs test.v +vcs+loopdetect+100000 module dummy(); top t1(); endmodule module top(); reg A,B; initial A=1; always @* A= ~B; always @* B=A; endmodule Output Error-[INFL_SIM] infinite loop in simulation. Detected an infinite loop in the simulation at time 0. -nonbaudpsched By default, VCS evaluates the output terminals of the sequential UDP (user-defined sequential UDPschanging output evaluation to the active region UDPschanging UDPssequential output evaluation to the active region primitive) in the NBA region. If the design is compiled with this switch, the output of sequential UDPs is scheduled in the active region of the scheduler. -hsopt=gates Improves runtime performance on gate-level designs (both functional and timing simulations with SDF). You may see some compile-time degradation when you use this switch. Usage vcs -sverilog test.v -hsopt=gates Examples vcs -sverilog test.v -hsopt=gates -skip_translate_body Tells VCS to omit compilation of Verilog/SystemVerilog/VHDL code between the following: translate_off translate_off pragma] translate_off translate_off*/ translate_off*/ translate_off pragma] and translate_on translate_on pragma] translate_on translate_on*/ translate_on*/ translate_on pragma] Examples Example of VHDL code with Translate off entity E1 is end entity E1; architecture A1 of E1 is begin assert false report ""before translate off"" severity note; assert false report ""after translate off before translate on"" severity note; assert false report ""after translate on before 2nd time translate off"" severity note; assert false report ""after translate off before translate on"" severity note; assert false report ""after 2nd time translate on"" severity note; end architecture A1; Command Line % vhdlan E1.vhdl -skip_translate_body % vcs E1 -R Assertion NOTE at 0 NS in design unit E1(A1) from process /\/test/E1_inst\/_P0: ""before translate off"" Assertion NOTE at 0 NS in design unit E1(A1) from process /\/test/E1_inst\/_P1: ""after translate on before 2nd time translate off"" Assertion NOTE at 0 NS in design unit E1(A1) from process /\/test/E1_inst\/_P2: ""after 2nd time translate on"" -bom top-level_module -bfl filename Generates a file that contains a list of absolute path names to the source files of all the source a list of filesgenerating module definitions in a design or IP block. or IP block. extension to the filename you specify. If a module definition is in a Verilog source file in a Verilog library directory, the name of the directory and source file is included in the path names. If a module definition is in a Verilog library file, the pathname of the library file is included in the list. The following is an example of the output pathname file: /file_system/design_group/LIBDIR/dev.v /file_system/user_name/design1/top.v /file_system/design_group/libfile +simargs Enables you to pass options starting with ""-"" to the VCS command line in the -R flow. Examples If you want to use VCS for invoking the Verdi interactive session from the compile line as follows: % vcs test.v -kdb -debug_access+all -lca +simargs+-gui=verdi -R This command compiles the design and opens the Verdi interactive session in which you can perform various activities, such as running the interactive simulation, dumping FSDB, debugging using waveforms, and so on. -diag env Enables you to dump all environment variables that are set before starting the compilation and the simulation process. The list of environment variables that are set in the terminal is stored in the log file, which can be used to debug the environment related issues when the verification setup is complex and multiple and when nested scripts are used. command line or simv command line. Usage % vlogan -diag env Dumps all the environment variables in the vlogan_env_diag_<pid>.log log file that is generated in the AN.DB directory. % vcs -diag env Dumps all the environment variables in the vcs_env_diag_<pid>.log log file that is generated in the simv.daidir directory. % simv -diag env Dumps all the environment variables in the simv_env_diag_<pid>.log log file that is generated in the current working directory. -pcmakeprof compilation. The profiling result is tabulated and printed at the end of the compilation partition compile, with different steps. The profiling result includes the time consumed by parsing all design files, loading an analyzed design, resolving the design, creating partitions, compiling a particular partition, stitching all partitions together, and the total time consumed by an entire compilation. Due to floating number precision, the value of “All_partition_time” and “Total_time” may differ slightly from the exact sum of numbers. Usage Single Compile flow usage : vcs test.v -pcmakeprof Partition Compile flow usage : vcs test.v -partcomp -pcmakeprof Examples Single Compile Flow Example Activity Real (s) User (s) Sys (s)         Virt       Res (MB) Shr (MB) Priv           nFLT (MB)                         (MB) Parsing    0.00      0.00       0.00       414.4      114.5      2.1        112.5      0 Compil     2.00      0.42       0.28       414.4      114.5      2.1        112.5      0 ing Elaborat 1.15        0.25       0.08       240.7      62.7       2.0        60.7       0 ion Link       0.47      0.16       0.18       /          /          /          /          / Total_t    5.00      0.98       1.09       /          /          /          /          / ime Partition Compile Flow Example Activity Real (s) User (s) Sys (s)         Virt       Res (MB) Shr (MB) Priv           nFLT (MB)                         (MB) Parsing    0.00      0.01       0.01       /          /          /          /          / Global_a 2.65        0.32       0.27       323.9      64.9       2.1        62.9       0 nalysis _Partiti 2.62        0.67       0.99       389.3      111.9      69.2       42.7       0 on:_vcs_ pc_packa ge_lMdT3 Activity Real (s) User (s) Sys (s)    Virt    Res (MB) Shr (MB) Priv     nFLT (MB)                      (MB) _Partiti 2.76        0.94      1.00   389.3   118.1    33.0     116.8    0 on:tb_D0 cPw All_part 2.81        1.63      2.03   671.8   128.2    69.2     58.9     0 ition_t ime Stitchin 3.38        0.82      1.13   349.5   95.1     1.1      94.0     0 g_&_Elab oration Elaborat 1.63        0.27      0.07   192.7   45.8     2.1      43.7     0 ion Link       0.48      0.14      0.19   /       /        /        /        / Total_t    10.00     2.77      3.43   /       /        /        /        / ime 3 This section describes the following:"
-a filename,Specifies writing all messages from simulation to the specified file as well as displaying these messages on the standard output.
-,"Specifies the path to the simv.daidir directory in case it has daidir=/path/to/simv.dai      been moved. dir | Continues writing to the log file to provide a coherent log of save_options=continue_log   the full execution, which contains entries from the simulation | Handles snapshots with a lot of 0-bytes more efficiently. save_options=skip_zero_by tes | Activates the immediate save behavior,as a result of which, s save_options=save_immedia   state can be saved immediately - even in the middle of a time tely                        step. | Applies autopartitioning to both modules and packages with a high partcomp=autopart_high threshold, which results in larger and fewer partitions. | Applies autopartitioning in relax mode. Use lax                       -partcomp=autopart_high gives less balanced partitions. It relaxes the partitioning with a high threshold to get maximum gain in turnaround time. | Disables autopartitioning of modules and packages. You can use partcomp=nomodautopart the nomodautopart and nopkgautopart options individually also. ,nopkgautopart | Generates partition information in the specified directory. partcomp_dir=<dir_na me> | Reuses the existing partition information from the specified partcomp_sharedlib=<di partition database and recompiles only the modified design-specific r_name>                partitions. | Limits the module partitions to the specified number. partcomp=modpart_limi t:N | Generates configuration file that contains the XMR information of partcomp=gen_xmr_confi the design. g=top_module | simprofile_dir_path database. | Prints information about memory above threshold, whether they are Xkeyopt=sparseDiag+ inferred sparse or not. Default threshold value is 512MB. print | Prints information about memory above threshold, whether they are Xkeyopt=sparseDiag+ inferred sparse or not. printDetails | Specifies the threshold above which all memories are considered Xkeyopt=sparseDiag+ under sparseDiag. elabThres+<int> | Enables memories above a specified threshold to be sparse. Xkeyopt=sparseDiag+ force | Stops dynamic unsparsing for memories at runtime. Xkeyopt=sparseDiag+ noDynUnsparse | Prints all sparse memory diagnostics in specified file name. Xkeyopt=sparseDiag+ logFile+<FileName> | Does not print module/node names used in a design. Xkeyopt=sparseDiag+ noDesignNames | Disables sparse inferencing. Xkeyopt=sparseDisa ble | Disables auto inferencing of sparse memories. Xkeyopt=sparseDisa ble+autoInfer | Prints all the sparse memory diagnostics in specified file name. sparse+logFile[+<Fi leName>] -sparse+stats | Stops dynamic unsparsing of all the design memories. sparse+noDynUnspa rse | Specifies the threshold Integer percentage beyond which the sparse+unsparseThre memory is dynamically unsparsed. sPercent+<Int> -diag vpi Enables VPI diagnostic messages. Usage % simv -diag vpi Example % vcs -sverilog +vpi -P value.tab value.c tokens.v % simv -diag vpi -diag vhpi Enables VHPI diagnostic messages. Usage % simv -diag vhpi Example % simv -diag vhpi -sparse+logFile[+<FileName>] -sparse+stats Prints all the sparse memory diagnostics in specified file name. Usage % simv -sparse+logFile[+<FileName>] -sparse+stats Example % simv -sparse+logFile+abc -sparse+stats -sparse+noDynUnsparse Stops dynamic unsparsing of all the design memories. Usage % simv -sparse+noDynUnsparse Example % simv -sparse+noDynUnsparse -sparse+stats Reports sparse memory stats at the end of simulation, that is, module name, node name, dynamically unsparsed or not, unpacked dimension, packed dimension and count of memory words written till end of simulation. Usage % simv -sparse+stats Example % simv -sparse+stats -sparse+unsparseThresPercent+<Int> Specifies the threshold Integer percentage beyond which the memory is dynamically unsparsed. By default, the threshold is 20%. Usage % simv -sparse+unsparseThresPercent+<Int> Example % simv -sparse+unsparseThresPercent+50 7 This section describes the following: | Specifies the path to dump Distsim related logs. distsim=log_dir:<dir_pa th> | Enables Multiple TB Data Recv Requests feature. distsim=multiple_same_cha nnel_req | You can specify the number of parallel processes VCS can launch j<num_of_processes> for the native code generation phase of the compilation/elaboration. | You can generate an Xprop instrumentation report with the -report every module instance in a design. -xprop=banner the simulation. The message gets printed at time 0, and whenever there is a change in the merge mode. Usage %simv -xprop=banner Example %simv -xprop=banner -report=xprop[+exit] report displays the instrumentation status of every module instance in a design. Usage %simv -report=xprop Example %simv -report=xprop 10 Coverage Options This section describes the following : | Enables or disables the coverage data collection for all the cg_coverage_control=value     coverage groups in your NTB-OV or SystemVerilog testbench. The valid values are 0 and 1. A value of 0 disables coverage collection and a value of 1 enables coverage collection. | If the time resolution of SystemC and HDL differs, VCS can also sysc=adjust_timeres automatically determine the finer time resolution and set it as the simulator’s time scale. To enable this feature, you must use the | sysc=noshow_sc_main hierarchy and revert to use SystemC on Top internally. | sysc=force_vcs_log_on_er      capture messages sent to the SC_REPORT_ERROR. ror | sysc=enable_multiple_dki_    -sysc=enable_multiple_dki_driver_check to turn a driver_check                 warning E115 into an error. message. | sysc=disable_multiple_dki    -sysc=disable_multiple_dki_driver_check to turn off the _driver_check                warning E115 . | Allows you to specify a global timescale within the compilation noinherit_timescale unit of any source file that does not have an explicit 'timescale directive. | Overrides the time unit and precision unit for all the 'timescale override_timescale=    compiler directives in the source code and provides a timescale time_unit/time_prec    for all module definitions that do not have a 'timescale compiler ision                  directive. | Produces result that is accurate especially for SystemVerilog p1800_macro_expans     macros. ion | Enables you to specify the timescale for the source files that do not timescale=time_un      contain 'timescale compiler directive and precede the source files it/time_precision      that do. | param_override=dont messages in stdout and the compile log file. _report | Compresses the resulting log file with the gzip compression. force_list_compress | fgp=auto_affinity:allowHy     physical cores interchangeably. perThreadCpu | fgp=auto_affinity:maxLoad     not considered for FGP simulation. ForAvailCpu+<load_thresho ld_value> | fgp=min_num_cores:<value>      simulation. | fgp=num_fsdb_threads:<val      mandatory when FSDB dumping is enabled. ue> | fgp=use_least_locked_soc       number of cores that are locked by other processes. ket -fgp=allow_less_cores the simulation” to the soft limit as “Maximum <value> number of cores are required by the simulation”. Therefore, if there are less than the specified number of cores available, simulation does not quit with an error but assigns the available number of cores to the simulation and continue to run. Usage To enable this feature, use the following command at runtime: % simv -fgp=single_socket_mode -fgp=num_cores:<value> -fgp=allow_less_cores If there are no cores available, the simulation quits with an affinity error indicating the lack of resources. Example % simv -fgp=single_socket_mode -fgp=num_cores:7 -fgp=allow_less_cores -fgp=auto_affinity:allowHyperThreadCpu In a hyper-threading enabled machine, each physical CPU core can be divided into virtual cores. By default, FGP simulation uses only physical cores. The virtual threads and physical cores interchangeably. Usage Following is the use model: % simv -fgp=num_threads:<value> -fgp=auto_affinity:allowHyperThreadCpu Example Consider a hyper-threading enabled machine with four physical CPU cores. To run FGP %simv -fgp=num_threads:<value> -fgp=auto_affinity:allowHyperThreadCpu Where <value> = 2 to 7. simulation, then <value> = 2 or 3. -fgp=auto_affinity:maxLoadForAvailCpu+<load_threshold_value> simulation. The default load threshold value is 0.1. Running FGP simulation on a highly loaded core slows down the other job(s) running on the core and degrades the FGP runtime performance. It is recommended to use only lightly loaded cores for FGP. Usage Following is the use model: % simv -fgp=num_threads:<value> -fgp=auto_affinity:maxLoadForAvailCpu +<load_threshold_value> Example % simv -fgp=num_threads:7 -fgp=auto_affinity:maxLoadForAvailCpu+0.2 -fgp=cpu_affinity Allows you to specify fixed list of cores that can be used. Usage % simv -fgp=num_threads:<value>,cpu_affinity:<list_of_cores> Example For example, consider the following configuration: %lscpu ... node0 CPU(s): 0-4,10-14 node1 CPU(s): 5-9,15-19 When you use the following runtime command: % simv -fgp=num_threads:8,cpu_affinity:\(6-9,16-19\) 9 cores are selected from the 10 available node1 CPUs. Here, (6-9, 16-19) are core numbers. -fgp=diag:ruse generates the fgp_diag_profile.txt file with the details for each thread. You can find the data with thread divergence, imbalance, master time, and total time in this file. Usage % simv -fgp=num_threads:<value> -fgp=diag:ruse Example % simv -fgp=num_threads:5 -fgp=diag:ruse -fgp=fsdb_adjust_cores The number of cores are specified using the -fgp=fsdb_num_threads:<value> sub- number of cores from a hard limit of M number of cores to a soft limit of maximum of M number of cores required for FSDB dumping. If all the cores are assigned to simulation, then the least loaded core is used for FSDB dumping. During simulation, the core switches dynamically depending upon the load on the simulation cores. Usage %simv -fgp=single_socket_mode -fgp=num_cores:N -fgp=num_fsdb_threads:M -fgp=fsdb_adjust_cores Example Under single socket mode, if you request N cores for simulation and M cores for FSDB dumping, the affinity behavior is as follows: If the total number of cores = 0, the simulation shows an error. If 0 < available cores <= N, VCS assigns all available cores to simulation. Assuming simulation to be heavier and higher priority process than dumping, dumping switches dynamically between cores depending upon the load. If N < available cores <= N+M, VCS assigns N cores for simulations and rest of the cores for dumping. If M+N < available cores, VCS assigns N cores for simulation and M cores for dumping. For example, Number of cores Number of FSDB Available Cores         Actual           Actual Dumping (N)             Threads (M)                            Simulation Cores Cores Allocated Allocated 6                 3                  0                 Error            Error 6                 3                  5                 5                0 6                 3                  6                 6                0 6                 3                  8                 6                2 6                 3                  9+                6                3 -fgp=min_num_cores:<value> less vacant cores than the min_num_cores, the simulation terminates. Usage % simv -fgp=single_socket_mode -fgp=allow_less_cores -fgp=num_cores:<value> -fgp=min_num_cores:<value> Where <value> sets the lower limit for the number of cores for simulation. Example % simv -fgp=single_socket_mode -fgp=allow_less_cores -fgp=num_cores:10 -fgp=min_num_cores:9 In this example, 9 is the minimum number of cores and the simulation terminates if there are less than 9 cores. -fgp=num_cores:<value> <value>, are picked that includes one master core and <value>-1 child cores. Note: Usage % simv -fgp=single_socket_mode -fgp=num_cores:<value> Example % simv -fgp=single_socket_mode -fgp=num_cores:10 In this example, 10 number of cores are picked that includes one master core and nine child cores. -fgp=num_fsdb_threads:<value> FSDB dumping is enabled. VCS allocates as many cores as specified by <value> for dumping. When <value>=0, FSDB dumping runs on the master core (core that runs all the non- parallel portion of the design) and VCS generates a warning message. The remaining cores of the socket are used for FGP. When <value> is greater than 0, additional cores are allocated for dumping. following error: Error-[FGP_NO_FSDB_DUMPING_THREADS] No cores specified for FSDB dumping Exclusive cores for FSDB dumping must be specified in non-mutex synchronization mode. Usage Specify exclusive cores for FSDB dumping using the following command: %simv -fgp=num_threads:<value> -fgp=num_fsdb_threads:M Example %simv -fgp=num_threads:8 -fgp=num_fsdb_threads:5 -fgp=num_threads:<value> picked that includes one master core and <value> child cores. Usage %simv -fgp=num_threads:<value> simv collects a list of free cores. A core is determined to be loaded or free based on the load threshold. If the number of free cores is less than the requested number of threads (<value>+1), then VCS generates an error. Otherwise, VCS uses <value>+1 cores out of the list (first use the cores on one socket) and bind threads to them. If enough free cores are not available, VCS generates an error message. Example When you use the following runtime command: % simv -fgp=num_threads:8 9 cores are selected from the 10 available node1 CPUs. -fgp=schedpli call-backs at runtime. Usage % simv -fgp=num_threads:<value> -fgp=schedpli Example % simv -fgp=num_threads:5 -fgp=schedpli -fgp=single_socket_mode some cores are shared with the FSDB dumping threads. When simulation starts, VCS detects the number of cores that are available on the current socket. All cores are treated as available irrespective of the current CPU load. When the simulation threads are created, VCS distributes these threads to the available cores. If the simulation threads do not use all the assigned cores, the simulation continues, but VCS generates a warning message. Note: Usage % simv -fgp=single_socket_mode -fgp=num_cores:<value> Example % simv -fgp=single_socket_mode -fgp=num_cores:9 -fgp=sync:<scheme_value> scheme used for optimal performance is -fgp=sync:busywait, which is best for optimizing simulation performance. You can also select any of the following synchronization schemes to override the default scheme: • mutex - Specify this scheme to use pthread_mutex based synchronization. • serial - Specify this scheme to run the threads serially. This is used to debug any potential thread race issue. Usage %simv -fgp=sync:<scheme_value> Example %simv -fgp=sync:busywait -fgp=use_least_locked_socket locked by other processes. Usage % simv -fgp=single_socket_mode -fgp=num_cores:<value> -fgp=use_least_locked_socket Example % simv -fgp=single_socket_mode -fgp=num_cores:8 -fgp=use_least_locked_socket 22 Native Low Power Options This section describes the following: | Adds an assertion that checks for a stable value on output of an power=clamp_toggle_check_on_iso_ena isolation cell only when isolation is enabled. ble | power=default_applies_to_dont_fil       that has no filters and -elements applies to both input and output ter                                     ports. | Reports all unassociated isolation ports and violation reasons. power_report=isolation_unassociated | Removes the debug capabilities specified with the -debug_access -)* | sdc=current_design: <design_name> | sdc=verify_false_pa similar to set_multicycle_path command. th:<N> | sdc=verify_clock_gr asynchronous in SDC (using set_clock_groups -asynchronous oup:<N>             commands) are modeled similar to multicycle paths but with boolean value inserted (instead of X). | sdc=dynamic_multi_c by STA) paths and setup violation aspect of all unconstrained lock                (untimed by STA) paths. | sdc=verify_max_de       similar to set_multicycle_path command. Random delay mode for lay                     MCP applies to set_max_delay path commands. mcpLogs/sdc_parser_verbose.log. All the parser related messages and prints are dumped in this file. | A multicycle path is specified when the path between sequential sdc=verify_multicyc     elements needs multiple clock cycles, which would otherwise need le_path:single_cy       a single cycle. Therefore, by default, the tool expects the setup cle                     multiplier to be a number greater than 1. | sdc=abort_no_sdc_p      message if no valid path is found during the SDC analysis . ath -sdc=current_design:<design_name> Usage % vcs -sdc=current_design:<design_name> Example % vcs -sdc=current_design:mult2x -sdc=verify_false_path:<N> set_multicycle_path command. If no value is specified, a multicycle path delay of 10 destination clock cycles is computed by default. You can override the default delay by substituting argument 'N' with the required value. Usage %vcs -sdc=verify_false_path:<N> Example -sdc=verify_false_path:2 -sdc=verify_clock_group:<N> (using set_clock_groups -asynchronous commands) are modeled similarly to multicycle paths but with a boolean value inserted (instead of X). If no value is specified, a multi-cycle path delay of two destination clock cycles is computed by default. You can override the default delay by substituting argument 'N' with the required value. Usage % vcs -sdc=verify_clock_group:<N> Example % vcs -sdc=verify_clock_group:2 -sdc=verify_reset the destination does not reset at the same time (due to different reset or non resettable register), this causes metastability at destination. By default, X injection happens for one clock cycle of the source clock and can be controlled by substituting argument ‘N’ with the required value. Usage % vcs -sdc=verify_reset Example % vcs -sdc=verify_reset -sdc=dynamic_multi_clock setup violation aspect of all unconstrained (untimed by STA) paths. Usage % vcs -sdc=dynamic_multi_clock Example % vcs -sdc=dynamic_multi_clock -sdc=j:<n> -sdc_parallel of cores on which SDC analysis will be parallelized. It is suitable for designs with high compile time. Usage %vcs -sdc=j:<n> -sdc_parallel Example %vcs -sdc=j:4 -sdc_parallel -sdc=allerrors maximum number of parsing errors reported will be limited to 1000. Usage %vcs -sdc=allerrors Example %vcs -sdc=allerrors -sdc=clockglitch to expose bugs due to clock shifting in GLS and RTL designs. Diagnostics are also available in sdc_cg_diag.txt file under mcpLogs directory to identify on which signal and timestamp clock shifting is detected. Usage % vcs -sdc=clockglitch Example % vcs -sdc=clockglitch -sdc=mda_struct any reference, implicit or explicit, to multi-dimensional arrays or SystemVerilog structure fields is not supported. Usage %vcs -sdc=mda_struct Example %vcs -sdc=mda_struct -sdc=allow_nba assignment in the non-clocked procedural blocks. Usage % vcs -sdc=allow_nba Example % vcs -sdc=allow_nba -sdc=hold Usage % vcs -sdc=hold Example % vcs -sdc=hold -sdc=latch Usage %vcs -sdc=latch Example %vcs -sdc=latch -sdc=verify_max_delay set_multicycle_path command. Random delay mode for MCP applies to set_max_delay path commands also. Usage %vcs -sdc=verify_max_delay Example %vcs -sdc=verify_max_delay -sdc=parser_verbose All the parser related messages and prints are dumped in this file. Usage %vcs -sdc=parser_verbose Example %vcs -sdc=parser_verbose -sdc=verify_multicycle_path:single_cycle A multicycle path is specified when the path between sequential elements needs multiple clock cycles, which would otherwise need a single cycle. Therefore, by default, the tool expects the setup multiplier to be a number greater than 1. If a setup multiplier of 1 is specified, by default, MCP analysis is not performed, and instead the following warning is reported: Warning-[MCP-SINGLE-CYCLE] MCP of single cycle MCP command(test.sdc:3) has cycle multiplier of 1 and will be ignored during analysis. Use -sdc=verify_multicycle_path:single_cycle to turn on MCP verification of single cycles. To avoid this warning, -sdc=verify_multicycle_path:single_cycle compile time switch can be used. Usage %vcs -sdc=verify_multicycle_path:single_cycle Example %vcs -sdc=verify_multicycle_path:single_cycle -sdc=abort_no_sdc_path found during the SDC analysis. Usage Example vcs <test_file>.v -sdc=<test_file>.sdc,diag:hi -sverilog -sdc=abort_no_sdc_path Output The compilation aborts with the following error message because no sdc path is found in the design: [VCS-DIV] -- Error : No SDC paths found for validation, aborting elaboration as -sdc=abort_no_sdc_path is given. Please look into mcpLogs directory for detailed diagnostics This section describes the following: | sdc=sanity:sanitystarttim     sanity violations checks kicks in, at runtime. e:<time> | sdc=sanity:clock:margin:<     violations for period and duty-cycle is thrown percent> gin:<time>                    misalignment of time between master versus generated clocks. | sdc=max_destination_viola     reported per destination stops when the specified number of tion:<N>                      violations is reached (N). | sdc=finish_max_violation:     once the specified number of violations (global count) is <N>                           reached. The default value of N is 1000. | sdc=violation_prefix:<pre fix> | sdc=maxSuccessiveViolatio     the destination for the same transition in input on successive N ns:<N>                        or S-1 clock cycles, whichever is smaller. Here, S is the setup multiplier specified in the set_multicycle_path command. -sdc=no_x message of the MCP constraint in the simulation log. The simulation remains untouched (without any X or delay insertion) and is similar to a plain VCS run. The verify_reset checking (if turned on) remains active even with -sdc=no_x, that is, reset related X- injection will still be observed. Usage %simv -sdc=no_x Example %simv -sdc=no_x -sdc=off neither MCP constraint violations are printed nor X-injection happens. Usage %simv -sdc=off Example %simv -sdc=off -sdc=diag:path SDC command considered, relevant line number in SDC file, hierarchical path of the set_multicycle_path (book_example.sdc:8) is ACTIVE & VIOLATING PATH top.d.q1 => top.d.q4 is ACTIVE & VIOLATING MCP path summary: considered 1, active 1, inactive 0, violating 1 Usage %simv -sdc=diag:path Example %simv -sdc=diag:path -sdc=random_delay In this mode, delay between source and destination is randomly selected between 0 to N(N= MCP delay specified in set_multicycle_path command) cycles. Correct value will always be available after N cycles. In case of an early capture, destination will sample random value if this runtime switch is specified. Usage %simv -sdc=random_delay Example %simv -sdc=random_delay -sdc=sanity:sanitystarttime:<time> kicks in, at runtime. Usage %simv -sdc=sanity:sanitystarttime:<time> Example ./simv -sdc=sanity:sanitystarttime:105ns Here,the clock sanity checks start after 105 ns, and takes into consideration of stabilization from 105 ns onwards. Any violations before this time are not considered, also no clock stabilization logic kicks in before this time. All analysis takes place post 105ns. -sdc=starttime:<time> checks are tracked and reported. Usage %simv -sdc=starttime:<time> Example ./simv -sdc=starttime:274us A violation initiated before this time is not detected. If both options are specified, then clock sanity checks starts at sanity:sanitystarttime. Alternately early Capture Violation checks can also be turned off and on via Verilog toggles or UCLI command. -sdc=sanity:clock:margin:<percent> duty-cycle is thrown. Usage %simv -sdc=sanity:clock:margin: Example %simv -sdc=sanity:clock:margin:20 For example, if clock period is 100 in sdc and 115 in observed with a margin of 20,that is, -sdc=sanity:clock:margin:20 there wont be a period violation. sdc=sanity:clock:delaymargin:<time> versus generated clocks Usage %simv sdc=sanity:clock:delaymargin:<time> Example %simv -sdc=sanity:clock:delaymargin:1000fs if the misalignment is >= 1000fs then only the clock timing alignment violation is reported. -sdc=max_destination_violation:<N> when the specified number of violations is reached (N) Usage %simv -sdc=max_destination_violation:<N> At the end of the simulation the destinations are shown in the simulation report as follows: Following destination(s) had reached the maximum violation per destination and further sdc checks have been stopped on those. Use -sdc=max_destination_violation:<N> to change the maximum destination violation count. 1. testbench.mult.ff2 2. testbench.mult.ff5 ---------------------------------------- Example %simv -sdc=max_destination_violation:5 -sdc=finish_max_violation:<N> violations (global count) is reached. The default value of N is 1000. Usage %simv -sdc=finish_max_violation:<N> Example %simv -sdc=finish_max_violation:7 -sdc=violation_prefix:<prefix> Usage %simv -sdc=violation_prefix:<prefix> Example %simv -sdc=violation_prefix:MCP_check -sdc=noprint_violation Usage %simv -sdc=noprint_violation Example %simv -sdc=noprint_violation -sdc=clockglitch:<N> default, 10% delay is applied. Usage %simv -sdc=clockglitch:<N> Example For -simv=clockglitch:10, delay of 10% of the period is applied. -sdc=sanity:clock:noexit Although the SDC analysis will terminate for paths with identified Clock period violation, Usage %simv -sdc=sanity:clock:noexit At the point of encountering a clock period violation, all SDC checks are disabled. Adding the following options overrides this behaviour and continues the SDC checks. use -sdc=sanity:clock:noexit to continue checks for other clocks. Example %simv -sdc=sanity:clock:noexit -sdc=verify_reset:off as normal. Usage %simv -sdc=verify_reset:off Example %simv -sdc=verify_reset:off -sdc=dynamicfrequency supposed to be the same even if the clocks related to these calculations are running with a different clock period than what is specified in the SDC files. Any change in clock period beyond the specified clock-margin would terminate the analysis for that clock. For additional messages, this switch can be augmented with ""diag"" and ""hi"" options and can be used as either -sdc=dynamicfrequency:diag or -sdc=dynamicfrequency:diag:hi. Since clock periods are learnt dynamically, when this feature is enabled the clock-margin grace argument (-sdc=sanity:clock:margin:n) is ignored. Usage %simv -sdc=dynamicfrequency Sample messages relating to observed clock period change when dynamicfrequency SDC-WARN @ time 133 s : Clock period violation (due to change in clock period) has been identified. All further SDC analysis related to this clock: sys_clk except sanity:clock will be stopped. SDC-LOG @ time 133 s : Clock period updated for clock: testbench.mult.clk(sys_clk) (File:dynfreq_fs.sdc, Line:1) from 20 s to 22 s SDC-WARN @ time 155 s : Clock period within limits (due to clock period stabilization). SDC analysis related to clock: sys_clk started. Example %simv -sdc=dynamicfrequency -sdc=maxSuccessiveViolations:<N> same transition in input on successive N or S -1 clock cycles, whichever is smaller. Here is N any number higher than 1, and S is the setup multiplier specified in the set_multicycle_path command. Note: By default, the reporting count is limited to 1 for a given input transition that causes a change in the destination within the violation window. This reporting count can be increased using by setting N to any number higher than 1 in -sdc=maxSuccessiveViolations:<N>. Usage %simv -sdc=maxSuccessiveViolations:<N> Example set_multicycle_path -setup 5 -from ff1* -to ff2* Here, by default, only single violation is reported for a given change in ff1 that causes ff2 to change within 5 cycles. However, if -sdc=maxSuccessiveViolations:10 is used, then Early Capture violations would be reported on consecutive cycles for 4 cycles for a given change in ff1. 26 UNR Options This section describes the following :"
-exitstatus,Returns a value based on the type of exit.
-force_list,Enables the force reporting feature and generates an ASCII text file containing information about the forces/deposits/releases applied during the simulation in time order. | language forces/releases. | Enables the force reporting feature and generates an ASCII text file containing information about the forces/deposits/releases applied during the simulation in the time order.
-force_list_hier,Generates a force list report for the desired instance hierarchies <list_file>                   in the design.
-frames,Controls the number of lines printed in the stack.
"-g, -gen, -generics",Changes the VHDL generics at runtime.
-gui,Invokes simulation in interactive mode using Verdi.
+ignorempcond,VCS supports delayed annotations when multiple inputs change simultaneously. It ignores condition checking and inserts the least delay from applicable delays.
-io_gz,Reads files that are compressed using the gzip.
-no_save,Deactivates the Save/Restore functionality.
-noscanopt,Avoids re-compilation of the design.
-novitaltiming,Enables functional-only simulation of VITAL components. –ova_enable_case_maxfail   Includes OVA case violations in computation of global failure
+override_model_delays,"Enables the +mindelays, +typdelays, and +maxdelays SmartModels."
-pathmap,Specifies a translation table for file paths from the saved simulation to the restored simulation if files have been moved.
+plus-options,Enables user-defined plusarg options.
-save,Saves all files open for writing (default behavior).
-save_closed_files,Saves and restores the files that are created and closed using Verilog system tasks before saving the simulation state.
-save_file <file name> |,"Saves all open files in writable mode, and all files that open in"
-save_file_skip <file,Enables you to skip saving one or more files depending on the
-l simv.log,before save and from after restore but no messages about the snapshot restore itself.
-save_options=use_gzip,Uses the gzip compressor for Save/Restore's memory snapshot.
-save_options=use_lz4,Uses the lz4 compressor for Save/Restore's memory snapshot.
-save_uncompressed,Stores Save/Restore's memory snapshot in an uncompressed form.
-sig program,Starts the program that displays the compile-time options that were on the VCS command line when you created the simv (or simv.exe) executable file.
-ucli,Starts the simulation from the UCLI prompt.
-ucli -ucli2Proc,Launch UCLI in its own process (default:thread).
+vcs+finish+time,"Enables you to specify when VCS either stops or ends the simulation, provided that the time value is less than 2^32."
+vcs+ignorestop,Tells VCS to ignore the $stop system tasks in your source code.
+vcs+initreg+0|1|,"Initializes all bits of the Verilog variables, registers defined in random|seed_value           sequential UDPs, and memories including multi-dimensional arrays (MDAs) in your design to the specified values at time zero."
+vcs+initreg+config+confi,"Specifies a configuration file for initializing Verilog variables, g_file                        registers defined in sequential UDPs, and memories including multi-dimensional arrays (MDAs) in your design at time zero."
+vcs+nostdout,"Disables all text output from VCS, including messages and text from $monitor and $display and other system tasks for only the Verilog portion of the design."
+vcs+stop+time,Enables you to specify the simulation time when VCS stops the simulation.
-xlrm gd_pulseprop,"VCS propagates a gate pulse, even when the pulse width is equal to the gate delay."
-xlrm gd_pulsewarn,VCS generates a warning when it detects that the width of a pulse is identical to the gate delay.
-xlrm hier_inst_seed,"Uses instance-specific initialization seeds for random number generators of modules, programs, interfaces, and packages. -a filename Specifies writing all messages from simulation to the specified file as well as displaying these messages on the standard output. It also appends to an existing log file (including messages about snapshot restore). Usage % simv -a filename Example Consider the following example: module top; initial begin $display(""Step 1""); #1; $display(""Step 2""); $save(""state""); #1; $display(""Step 3""); #1; $display(""Step 4""); end endmodule To run the example, use the following commands: vcs -full64 top.v simv -a simv.log simv -r state -a simv.log The running of these commands generates the generates the following output: After restore, simv.log contains the following: • All entries from the save run (until it finishes; not just until the point of save) • From the restore run. • $ cat simv.log Step 1 Step 2 Step 3 Step 4 Step 3 Step 4 -daidir=/path/to/simv.daidir Specifies the path to the simv.daidir directory in case it has been moved. simv and simv.daidir are moved to DIR2, and the simulation is restored in DIR3. Usage % simv -daidir=/path/to/simv.daidir Example Consider the following example: module top; initial begin #1; $display(""Step 1""); #1; $save(""state""); #1; $display(""Step 2""); #1; $finish(); end endmodule To run the example, use the following commands: mkdir dir1 dir2 dir3 # Compile and save in dir1. cd dir1 vcs -full64 ../top.v -debug_access simv # Move simv to dir2. mv simv* csrc ../dir2 # Restore in dir3. cd ../dir3 ../dir2/simv -r ../dir1/state -daidir=../dir2/simv.daidir Restore run requires -daidir switch to find the moved simv.daidir directory. -error Revises the +lint and +warn options, to control error and warning messages. With them you can: • Disable the display of any lint, warning, or error messages. • Disable the display of specific messages. • Limit the display of specific messages to a maximum number that you specify. Only the following feature is supported at runtime. -error=[no]message_ID[:max_number],... Usage % simv -error=[no]message_ID[:max_number],... Example Consider the following example: Error-[INFL_SIM] Infinite loop in simulation Detected an infinite loop in the simulation at time 0. -xlrm hier_inst_seed example: module top (); son son1 (); son son2 (); son son3 (); endmodule module son (); initial $display(""%m SEED = %d"", $urandom()); endmodule %simv     -xlrm hier_inst_seed top.son1 SEED = 2384297078 top.son2 SEED = 3389395885 top.son3 SEED = 1089914581 If you pass an empty assert hier file at compile-time or runtime, VCS generates the CM- ASHR-EF error. with -error=noCM-ASHR-EF at run time it can be coverted as a warning Warning-[CM-ASHR-EF] Empty file The assertion hier control configuration file 'tmp.txt' is empty and hence it will be ignored. Please fix the file and try again. -exitstatus Returns a value based on the type of exit. Usage % simv -exitstatus Example module test; reg r = 1'b0;; initial begin r = 1; assert (r==0); end endmodule vcs test.v simv -exitstauts echo $status -f Enables you to specify user-defined arguments in a file. These arguments are those that VHDL, and pure Verilog designs. Usage % simv -f <filename.f> Example % simv -f <filename.f> filename.f -ova_report -lca -cm_name foo ... ... -force_list Enables the force reporting feature and generates an ASCII text file containing information about the forces/deposits/releases applied during the simulation in time order. Usage % simv -force_list <filename> Where, filename is the user-defined ASCII file name. It can be a relative path or an absolute path. Compression is disabled by default. Use the -force_list_compress is saved with the same name, but changes its filename extension by appending .gz at the end of it. Example % simv -force_list report.log -force_list_compress For the above command, the output file is: report.log.gz Use gunzip to uncompress a force list file. For example, uncompress the above output file as follows: gunzip report.log.gz This results in the original file report.log, which is uncompressed. -force_list_hier <list_file> Generates a force list report for the desired instance hierarchies in the design. Usage % simv -force_list_hier <list_file> Where, <list_file> is the configuration file. This file allows you to specify the hierarchy and levels of hierarchy to be dumped in the resultant -force_list output file. Note: To use this feature, you must first compile your designs with the -force_list Examples Example 1 module tb(); reg r; wire oA, oB; dut dut(r, oA, oB); initial begin r = 0; #10 force tb.dut.instA.oA = 1; #10 force tb.dut.instA.instB.oB = 1; end endmodule module dut(input r, output oA, oB); A instA(r, oA, oB); endmodule module A(input r, output oA, oB); assign oA = r; B instB(r, oB); endmodule module B(input r, output oB); assign oB = r; endmodule Example 2 +tb.dut.instA 1 Compile test.v as follows: % vcs -debug_access -sverilog -force_list test.v Simulation command: % simv -force_list=uniqueID forceReport.txt -force_list_hier hierarchyConfig.cfg The following is the forceReport.txt output: VCS Force List Header Section Language Forces ID    Target     Module      File Line 1 tb.dut.instA.oA tb test.v 7 Event List Section"
----,"Time: 10 ---- 1       LF 'b1 -frames Controls the number of lines printed in the stack. Usage % simv -frames <num> Where <num> specifies the number of lines in the stack. When <num> is zero, VCS displays all the lines in the stack. Example simv -frames 0 -g, -gen, -generics Changes the following types of VHDL generics at runtime: • Any generic that stays in VHDL and is not propagated directly or indirectly into Verilog • Any generic that does not shape the tree or define the widths of ports through mixed HDL boundary • Generics such as delays, file names, and timing checks control Usage % simv -g generics_file Example specify the hierarchical path of the generic and a new value to override. A sample generics_file is as follows: % cat generics_file assign 1 /TOP/LEN assign ""OK.dat"" /TOP/G1/vhdl1/FILE_NAME assign (4 ns) /TOP/G1/VHDL1/delay assign 16 /TOP/width assign 4 /TOP/add_width -gui Invokes simulation in interactive mode using Verdi. Usage % simv -gui You must use the same version of VCS and Verdi to ensure problem-free debugging of your simulation. Example Consider the following example: module top; initial begin $display(""Step 1""); #1; $display(""Step 2""); #1; $display(""Step 3""); #1; $display(""Step 4""); end endmodule To run the example, use the following commands: vcs -full64 -debug_access+all -kdb top.v simv -gui The -gui switch starts the simulation under a graphical debugger for interactive analysis. +ignorempcond VCS supports delayed annotations when multiple inputs change simultaneously. It ignores condition checking and inserts the least delay from applicable delays. When multiple inputs change simultaneously, they create an impact on a specific output signal. If there are no matching conditional arcs that extend from the inputs (which are toggling) to the output, then VCS does not annotate a zero delay. Usage % simv +ignorempcond Example Consider the following example: module top(); reg in1,in2; wire out; dut inst(.out(out),.in1(in1),.in2(in2)); initial begin $monitor(""TIme:%0t out:%0b in1:%0b in2:%0b"",$time,out,in1,in2); in1=0; in2=0; end endmodule module dut(output out,input in1,in2); assign out =in1& in2; specify if(in1==1'b1) (in2=>out)=3; if(in2==1'b1) (in1=>out)=4; endspecify endmodule vcs test.v simv +ignorempcond Output TIme:0 out:x in1:0 in2:0 TIme:3 out:0 in1:0 in2:0 -io_gz Reads files that are compressed using the gzip. Usage % simv -io_gz Example This example shows how the utility is used to read a gzipped file. module m1; integer mcd,code,code1,mcd1; string str; initial begin mcd = $fopen(""test_file.txt"",""w""); $fwrite (mcd,""%s"",""\nThis is VCS test file\n""); $fclose(mcd); $system(""gzip test_file.txt""); mcd = $fopen(""test_file.txt.gz"",""r""); do begin code = $fgets(str,mcd); $display(""%s"",str); end while($feof(mcd)==0); $fclose(mcd); end endmodule You can use the following commands to run the test case. vcs -sverilog test.v simv -io_gz Output This is a VCS test file. -l filename Specifies writing all messages from simulation to the specified file as well as displaying these messages on the standard output. Usage % simv -l filename Example Consider the following example: module top; initial begin $display(""Step 1""); #1; $display(""Step 2""); $save(""state""); #1; $display(""Step 3""); #1; $display(""Step 4""); end endmodule To run the example, use the following commands: vcs -full64 top.v simv -l simv.log simv -r state -l simv.log After restore, simv.log contains only entries from restore run: $ cat simv.log > Step 3 > Step 4 +maxdelays Specifies using the maximum delays in min:typ:max delay triplets in module path delays specifies using the maximum timing delays in min:typ:max delay triplets in an uncompiled SDF file. +allmtm+allmtm[allmtm] specifies using the compiled SDF file with the maximum delays. +override_model_delays+override_model_delays[override_model_delays] Usage % simv +maxdelays Example Consider the following example: timescale 1ns/1ns module top; reg in; wire out; dut inst(.out(out),.in(in)); initial begin $monitor(""Time:%2t in:%0b out:%0b"",$time,in,out); $sdf_annotate(""gate.sdf"",top); in = 1'b0; #15 in = 1'b1; end endmodule module dut(output out,input in); buf (out,in); specify (in => out) = (1,1); endspecify endmodule (CELL (CELLTYPE ""dut"") (INSTANCE inst) (DELAY (ABSOLUTE (IOPATH in out (2:3:4) (2:3:4)) ) ) ) Output Time: 0 in:0 out:x Time: 4 in:0 out:0 Time:15 in:1 out:0 Time:19 in:1 out:1 +mindelays Specifies using the minimum delays in min:typ:max delay triplets in module path delays +allmtm+allmtm[allmtm] specifies using the minimum timing delays in min:typ:max delay triplets in an uncompiled SDF file. specifies using the compiled SDF file with the minimum delay. Usage % simv +mindelays Example Consider the following example: timescale 1ns/1ns module top; reg in; wire out; dut inst(.out(out),.in(in)); initial begin $monitor(""Time:%2t in:%0b out:%0b"",$time,in,out); $sdf_annotate(""gate.sdf"",top); in = 1'b0; #15 in = 1'b1; end endmodule module dut(output out,input in); buf (out,in); specify (in => out) = (1,1); endspecify endmodule (CELL (CELLTYPE ""dut"") (INSTANCE inst) (DELAY (ABSOLUTE (IOPATH in out (2:3:4) (2:3:4)) ) ) ) Output Time: 0 in:0 out:x Time: 2 in:0 out:0 Time:15 in:1 out:0 Time:17 in:1 out:1 +no_pulse_msg Suppresses pulse error messages, however, not the generation of StE values at module path outputs when a pulse error condition occurs. Usage % simv +no_pulse_msg Example Consider the following example: vcs test.v +transport_path_delays +pulse_r/30 +pulse_e/80 simv +no_pulse_msg timescale 1ns/1ps module top; reg in; wire out; dut inst1(.out(out),.in(in)); initial begin $monitor(""Time:%5t in:%0b out:%0b "",$time,in,out); $sdf_annotate(""gate.sdf"",top); in = 1'b0; #15 in = 1'b1; #3 in = 1'b0; #15 $finish(); end endmodule module dut(output out,input in); buf (out,in); specify (in => out) = (0,0); endspecify endmodule (CELL (CELLTYPE ""dut"") (INSTANCE inst1) (DELAY (ABSOLUTE (IOPATH in out (2:5:6) (2:5:6)) ) ) ) Output Time:    0 in:0 out:x Time: 5000 in:0 out:0 Time:15000 in:1 out:0 Time:18000 in:0 out:0 Time:20000 in:0 out:x Time:23000 in:0 out:0 -no_save Deactivates the Save/Restore functionality (thereby avoiding, for example, process restarts that would be necessary to prepare for Save/Restore). Usage % simv -no_save Example Consider the following example: module top; initial begin $display(""Step 1""); #1; $display(""Step 2""); #1; $display(""Step 3""); #1; $display(""Step 4""); end endmodule To run the example, use the following commands: vcs -full64 top.v simv -no_save -noscanopt Avoids re-compilation of the design. Usage % simv -noscanopt Example simv -noscanopt -novitaltiming Enables functional-only simulation of VITAL components. All timing information is discarded for VITAL models during simulation. Timing information includes wire delays, path delays, and timing checks. Any SDF information supplied on the command line is ignored when this switch is present. Usage % simv -novitaltiming Example simv -novitaltiming –ova_enable_case_maxfail Includes OVA case violations in computation of global failure count for the -assert Usage % simv -ova_enable_case_maxfail Example module top; reg [2:0] mda[31:0][31:0]; reg [2:0] testdetect[31:0][31:0]; bit i,j; //ova full_case on; initial begin for(i = 31; i >= 0; i = i - 1) begin for(j = 0; j <= 31; j = j + 1) begin case(mda[i][j]) 1: begin testdetect[i][j] = 1'b1; end endcase #1; end end end vcs -sverilog -full64 test.v -ova_enable_case simv -ova_enable_case_maxfail -assert global_finish_maxfail=1 Output Ova [0]: ""test.v"", 9: Full case violation at time 0 in top Select expression value when violation happend: 32'b00000000000000000000000000000xxx Warning-[OVART-NAFRLTS] Too many assertion failures. The OVA run-time detected that the number of assertion failures has reached the maximum allowed limit (1). Terminating simulation. Please verify that you are not using the options setting the limit too low +override_model_delays +mindelays[mindelays]+mindelays +typdelays[typdelays]+typdelays +maxdelays[maxdelays]+maxdelays timing used by SWIFT SmartModels. SWIFT SmartModels Usage % simv +override_model_delays Example simv +override_model_delays -pathmap Specifies a translation table for file paths from the saved simulation to the restored simulation if files have been moved. Usage % simv -pathmap <file_with_pathmaps> where, <file_with_pathmaps>: <old_directory_path_name>:<new_directory_path_name> Example Consider the following example: module top; integer fid, ret; string str; initial begin fid = $fopen(""input.txt"", ""r""); #1; $save(""state""); #1; ret = $fgets(str, fid); if (ret == 0) begin $display(""Failed to read file.""); end else begin $display(""Read: %s"", str); end #1; $fclose(fid); end endmodule To run the example, use the following commands: mkdir dir1 dir2 vcs -full64 -sverilog top.v cd dir1 ../simv mv input.txt ../dir2 ../simv -r state -pathmap pathmap.txt The restore simulation needs the -pathmap switch that maps from the absolute path of dir1 to the absolute path of dir2 to successfully find the moved input.txt file. +plus-options $test$plusargs system task can check for such options. Usage % simv +plus-options Example Consider the following example: module test; initial begin if($test$plusargs(""HELLO"")) begin $display(""Hello""); end end endmodule vcs test.v [other_vcs_options] simv +HELLO -q Quiet mode; suppresses display of VCS header and summary information. Suppresses the proprietary message at the beginning of simulation and suppresses the VCS Simulation Report at the end (time, CPU time, data structure size, and date). Suppresses SystemC BMI warnings and notes at the start of simulation. Usage % simv -q Example Consider the following example: example: module test; initial $display(""Hello""); endmodule vcs test.v simv -q Output Hello -save Saves all files open for writing (default behavior). All these files are saved in the directory named: <name_of_the_saved_image>.FILES. Usage % simv -save Example Consider the following example: module top; initial begin $display(""Step 1""); #1; $display(""Step 2""); $save(""state""); #1; $display(""Step 3""); #1; $display(""Step 4""); end endmodule To run the example, use the following commands: vcs -full64 top.v simv -save simv -r state Since $save is used, ""-save"" can be passed to simv (default behavior). Simulation output after restore: > Step 3 > Step 4 -save_closed_files Saves and restores the files that are created and closed using Verilog system tasks before saving the simulation state. Usage % simv -save_closed_files Example Consider the following example: module top; integer fid; initial begin $display(""Step 1""); fid = $fopen(""tmp.txt"", ""w""); $fdisplay(fid, ""OUTPUT""); $fclose(fid); $display(""Step 2""); $save(""state""); #1; $display(""Step 3""); end endmodule To run the example, use the following commands: vcs -full64 top.v simv -save_closed_files rm tmp.txt simv -r state The running of these commands restores the tmp.txt file, which has already been closed at the point of save but is included in the snapshot. -save_file <file name> | <directory name> Saves all open files in writable mode, and all files that are opened in read-only mode, • With <file name>, saves the specified open file in read/write mode. • With <directory name>, saves all files in the specified directory open in read/write mode. Usage % simv -save_file <file name> | <directory name> Example Consider the following example: module top; integer fid; string str; initial begin fid = $fopen(""input.txt"", ""r""); $display(""Step 1""); #1; $display(""Step 2""); $save(""state""); #1; $display(""Step 3""); #1; $display(""Step 4""); $fclose(fid); end endmodule To run the example, use the following commands: vcs -full64 -sverilog top.v simv -save_file input.txt With the switch we see that the file mentioned with switch -save_file is saved as well when the snapshot is saved: Step 1 Step 2 Info: [VCS_SAVE_RESTORE_INFO] Saved / global/vcs_rnd02/magnusb/vcs_regrs/x64/sr_cmd_ref_guide_examples/summa ry/save_file/input.txt at state.FILES/11.input.txt . Step 3 Step 4 -save_file_skip <file name> | <directory name> • With <file name>, skips saving the specified file that is open in read/write mode. • With <directory name>, skips all files in the specified directory that are open in read/ write mode. Usage % simv -save_file_skip <file name> | <directory name> Example Consider the following example: module top; integer fid; initial begin fid = $fopen(""tmp.txt"", ""w""); $fdisplay(fid, ""OUTPUT_1""); #1; $save(""state""); #1; $fdisplay(fid, ""OUTPUT_2""); #1; $fclose(fid); end endmodule To run the example, use the following commands: vcs -full64 top.v simv -save_file_skip tmp.txt rm -f tmp.txt simv -r state A save run with switch ""-save_file_skip tmp.txt"" will exclude the opened file from the snapshot. -save_options=continue_log -l simv.log Continues writing to the log file to provide a coherent log of the full execution, which contains entries from the simulation before save and from after restore but no messages about the snapshot restore itself. Usage % simv -save_options=continue_log -l simv.log Example Consider the following example: module top; initial begin $display(""Step 1""); #1; $display(""Step 2""); $save(""state""); #1; $display(""Step 3""); #1; $display(""Step 4""); end endmodule To run the example, use the following commands: vcs -full64 top.v simv -l simv.log -save_options=continue_log simv -r state -l simv.log -save_options=continue_log After restore, simv.log contains log entries from the following: • Save simulation up to the point of save • Restore simulation. • $ cat simv.log > Step 1 > Step 2 > Step 3 > Step 4 -save_options=skip_zero_bytes Handles snapshots with a lot of 0-bytes more efficiently. Try this if the memory usage of the restored simulation is much larger than that of the simulation before save. Usage % simv -save_options=skip_zero_bytes Example Consider the following example: top.v import ""DPI"" function void alloc_sparsely_populated_mem();//Defined in dpi.cxx module top; initial begin #1; $display(""Step 1""); alloc_sparsely_populated_mem(); #1; $save(""state""); #1; $display(""Step 2""); $finish(); end endmodule To run the example, use the following commands: vcs -full64 -sverilog top.v dpi.cxx simv time -f 'Peak RMEM usage in KB: %M' simv -r state # vs. simv -save_options=skip_zero_bytes time -f 'Peak RMEM usage in KB: %M' simv -r state In the restore run with the switch, peak memory usage is reduced since the sparsely populated memory is handled more efficiently. -save_options=use_gzip Uses the gzip compressor for Save/Restore's memory snapshot. Usage % simv -save_options=use_gzip Example Click Example to learn more. -save_options=use_lz4 Uses the lz4 compressor for Save/Restore's memory snapshot. Usage % simv -save_options=use_lz4 Example Click Example to learn more. -save_options=save_immediately Verilog’s $save and the UCLI save commands do not save a snapshot directly but schedule it for the end of the current timestep. This forces the user to advance simulation save behavior,as a result of which, s state can be saved immediately - even in the middle of a time step, without the need to schedule it. Usage -save_options=save_immediately -save_uncompressed Stores Save/Restore's memory snapshot in an uncompressed form. Usage % simv -save_uncompressed Example Consider the following example: module top; initial begin $display(""Step 1""); #1; $display(""Step 2""); $save(""state""); #1; $display(""Step 3""); #1; $display(""Step 4""); end endmodule To run the example, use the following commands: vcs -full64 top.v # simv -save_options=use_lz4 # simv -save_options=use_gzip simv -save_uncompressed simv -r state If compression selected, the memory snapshot is compressed to state.FILES/ mmap.data.compressed. In the uncompressed case, the memory snapshot is stored in ""state"". +sdfverbose Enables the display of all back-annotation messages. Usage % simv +sdfverbose Example Consider the following example: vcs test.v [other_vcs_options] simv +sdfverbose module top; reg d,clk; wire q; dut inst(.q(q),.d(d),.clk(clk)); initial begin $monitor(""Time:%2t clk:%0b q:%0b inst.notifier:%0b"",$time,clk,q,inst.notifier); $sdf_annotate(""test.sdf"",top,,""sdf.log"",""MAXIMUM""); d <= 1'b0; clk = 0; #8 d <= 1'b0; #6.8 d <= 1'b1; #10 $finish(); end always #5 clk = ~clk; endmodule module dut(output reg q,input d,clk); reg notifier; wire d_d; always @(posedge clk) q <=d; assign cond1 = d; specify (posedge clk => q) = (0,0); $setuphold(posedge clk,d,0.917,-0.2,notifier,,cond1,clk_d,d_d); endspecify endmodule -sig program Starts the program that displays the compile-time options that were on the vcs command line when you created the simv (or simv.exe) executable file. Usage % simv -sig program Example % simv -sig echo echo +typdelays Specifies using the typical delays in min:typ:max delay triplets in module path delays and +allmtm+allmtm[allmtm] specifies using the typical timing delays in min:typ:max delay triplets in an uncompiled SDF file. specifies using the compiled SDF file with the typical delays. in your source code and in uncompiled SDF files unless you specify otherwise with the mtm_spec argument to the $sdf_annotate system task. Also, by default, VCS uses the compiled SDF file with typical values. +override_model_delays+override_model_delays[override_model_delays] Usage % simv +typdelays Example Consider the following example: timescale 1ns/1ns module top; reg in; wire out; dut inst(.out(out),.in(in)); initial begin $monitor(""Time:%2t in:%0b out:%0b"",$time,in,out); $sdf_annotate(""gate.sdf"",top); in = 1'b0; #15 in = 1'b1; end endmodule module dut(output out,input in); buf (out,in); specify (in => out) = (1,1); endspecify endmodule (CELL (CELLTYPE ""dut"") (INSTANCE inst) (DELAY (ABSOLUTE (IOPATH in out (2:3:4) (2:3:4)) ) ) ) Output Time: 0 in:0 out:x Time: 3 in:0 out:0 Time:15 in:1 out:0 Time:18 in:1 out:1 -ucli Starts the simulation from the UCLI prompt. Usage % simv [simv_options] -ucli When you execute the above command, VCS takes you to the UCLI command prompt. time 0 as follows: % simv -ucli ucli% At the UCLI prompt, you can execute any UCLI command to debug or run the simulation. You can also specify the list of required UCLI commands in a file, and source it to the below: % simv -ucli ucli% source file.cmds % simv -ucli -do file.cmds % simv -ucli -i file.cmds Example Consider the following example: module top(); initial begin $display(""Step 1""); #1; $display(""Step 2""); #1; $display(""Step 3""); #1; $display(""Step 4""); #1; $display(""Step 5""); #1; $finish(); end endmodule To run the example, use the following commands: vcs -full64 -debug_access top.v simv -ucli -i run.ucli run.ucli: run 3 quit The running of the commands generates the generates the following output: ucli% run 3 Step 1 Step 2 Step 3 3 s ucli% quit The simulation runs for three timesteps and then exits. -ucli -ucli2Proc Launch UCLI in its own process (default:thread). Usage % simv [simv_options] -ucli -ucli2Proc Example Consider the following example: module top(); initial begin $display(""Step 1""); #1; $display(""Step 2""); #1; $display(""Step 3""); #1; $display(""Step 4""); #1; $display(""Step 5""); #1; $finish(); end endmodule To run the example, use the following commands: vcs -full64 -debug_access top.v simv -ucli -ucli2Proc -i run.ucli The running of the commands generates the generates the following output: ucli% run 3 Step 1 Step 2 Step 3 3 s ucli% quit The simulation runs for three timesteps and then exits. -V Verbose mode; displays VCS version and extended summary information. Displays VCS compile and runtime version numbers, and copyright information, at the start of simulation. Usage % simv -V Example module test; initial $display(""Hello""); endmodule vcs test.v simv -V Output VCS Build Date = May 25 2024 00:42:07 Start run at May 25 17:50 2024 Hello V C S   S i m u l a t i o n   R e p o r t Time: 0 CPU Time:      0.460 seconds;       Data structure size:                 0.0Mb Sat May 25 17:50:38 2024 +vcs+finish+time Enables you to specify when VCS either stops or ends the simulation, provided that the time value is less than 2^32. Usage % simv +vcs+finish+time For time values greater than 2^32, you must follow a special procedure that uses two +vcs+finish+<first argument>+<second argument> Example +vcs+finish+1410065408+2 If you want a time value of 10,000,000,000 (10 billion): 1. Divide the large time value by 2^32. In this example: 2. Narrow down this quotient to the nearest whole number. This whole number is the second argument. In this example, you would narrow down to 2. 3. Multiply 2^32 with the second argument (that is, 2), and then subtract the obtained result from the large time value (that is, subtract 2 X 2^32 from the large time value), as shown below: 10,000,000,000-(2*4,294,967,296)=(1,410,065,408) This difference is the first argument. You now have the first and second argument. Therefore, in this example, to specify +vcs+finish+1410065408+2 +vcs+ignorestop Tells VCS to ignore the $stop system tasks in your source code. Usage % simv +vcs+ignorestop Example Consider the following example: module test; initial begin $display(""Hello""); #1; $stop(); #1; $finish(); end endmodule vcs test.v {other_vcs_options] simv +vcs+ignorestop Output Hello $stop ignored at time 1 $finish called from file ""tmp1.v"", line 7. $finish at simulation time                                    2 +vcs+initreg+0|1|random|seed_value Initializes all bits of the Verilog variables, registers defined in sequential UDPs, and memories including multi-dimensional arrays (MDAs) in your design to the specified values The supported data types are: • reg • bit • integer • int • logic The following table describes the initialization options at runtime:"
+vcs+initreg+0,"Initializes all variables, registers and memories to value 0. | +vcs+initreg+0."
+vcs+initreg+1,"Initializes all variables, registers and memories to value 1. | +vcs+initreg+1. Usage % simv +vcs+initreg+config+config_file Example Consider the following example: vcs test.v +vcs+initreg+random simv +vcs+initreg+config+config.txt %cat config.txt module mid 0 tree top.m2.b1 0 0 instance top.m1.b1 1 modtree leaf 1 1 +vcs+loopdetect+number Enables the detection of zero delay loops. When +vcs+loopdetect+number is not specified at compile time, VCS does the following • If +vcs+loopdetect is specified at runtime, VCS checks if a simulation event loops for 2,000,000 times (by default) in the same simulation time tick, and issues a runtime error message. VCS also terminates the simulation. • If +vcs+loopdetect+N is specified at runtime, VCS checks if the simulation event loops for 'N' times and issues a runtime error message. VCS also terminates the simulation. Note: The +vcs+loopdetect and +vcs+loopreport options are mutually exclusive. It is recommended not to use both the options at the same time. Usage % simv +vcs+loopdetect+number Example Consider the following example: vcs test.v +vcs+loopdetect simv +vcs+loopdetect+100000 module dummy(); top t1(); endmodule module top(); reg A,B; initial A=1; always @* A= ~B; always @* B=A; endmodule Output Error-[INFL_SIM] Infinite loop in simulation Detected an infinite loop in the simulation at time 0. +vcs+loopreport+number Reports the zero delay loops. you can override the threshold number at runtime. When +vcs+loopreport+number is specified at compile time, VCS does the following +vcs+loopreport+number • If +vcs+loopreport is specified at runtime, VCS checks if a simulation event loops +vcs+loopreport for 2,000,000 times (by default) in the same simulation time tick, and issues a runtime warning message. VCS also terminates the simulation and generates a report when a zero delay loop is detected. • If +vcs+loopreport+N is specified at runtime, VCS checks if the simulation event loops for 'N' times and issues a runtime warning message. VCS also terminates the simulation. Note: The +vcs+loopdetect and +vcs+loopreport options are mutually exclusive. It is recommended not to use both the options at the same time. Usage % simv +vcs+loopreport+number Example Consider the following example: vcs test.v +vcs+loopreport simv +vcs+loopreport+20000 module dummy(); top t1(); endmodule module top(); reg A,B; initial A=1; always @* A= ~B; always @* B=A; Output VCS Loop Detection: Switching loop detection algorithm ON at time 0 delta-cycles exceeded the threshold-limit. Possible zero delay loop(s). Error-[VCS_LOOP_DETECTED] Infinite loop in simulation Detected an infinite loop in the simulation at time 0. Details written to ""loop-info-46283.log, loop-info-verbose-46283.log"". %cat loop-info-46283.log ========================================================== SIMULATION TIME: 0 ======================Loop no.=1========================= Module             : top Instance (Signals) : dummy.t1 ( A ) File           : /remote/us01home59/nusri/loopreport/test.v 8-9, Loop occurs within the module top %cat loop-info-verbose-46283.log ####################################################### SIMULATION TIME: 0 #################Loop no. 1############################ Constr   : Always Module   : top Instance : dummy.t1 /remote/us01home59/nusri/loopreport/test.v : 8-9. (signal: A) --------------------------------------------------------- Constr   : Always Module   : top Instance : dummy.t1 /remote/us01home59/nusri/loopreport/test.v : 8-9. (signal: A) --------------------------------------------------------- +vcs+nostdout Disables all text output from VCS, including messages and text from $monitor and $display and other system tasks for only the Verilog portion of the design. VCS still writes -l-l[-] Usage % simv +vcs+nostdout Example vcs test.v {other_vcs_options] simv +vcs+nostdout +vcs+stop+time works if the time value you specify is less than 2^32 or 4,294,967,296. Usage % simv +vcs+stop+time For time values greater than 2^32, you must follow a special procedure that uses two +vcs+stop+<first argument>+<second argument> Example simv +vcs+stop+1410065408+2 If you want a time value of 10,000,000,000 (10 billion): 1. Divide the large time value by 2^32. In this example: 2. Narrow down this quotient to the nearest whole number. This whole number is the second argument. In this example, you would narrow down to 2. 3. Multiply 2^32 with the second argument (that is, 2), and then subtract the obtained result from the large time value (that is, subtract 2 X 2^32 from the large time value), as shown below: 10,000,000,000-(2*4,294,967,296)=(1,410,065,408) This difference is the first argument. You now have the first and second argument. Therefore, in this example, to specify +vcs+stop+1410065408+2 -xlrm gd_pulseprop VCS propagates a gate pulse, even when the pulse width is equal to the gate delay. Usage % simv -xlrm gd_pulseprop Example Consider the following Verilog code: module dut(qout,dinA,dinB); output qout; input dinA; input dinB; xor #10 inst(qout,dinA,dinB); endmodule delay, VCS always propagates the pulse as shown below: 0 qout=x, dinA=1 dinB=1 10 qout=0, dinA=0 dinB=1 20 qout=1, dinA=0 dinB=0 30 qout=0, dinA=0 dinB=1 40 qout=1, dinA=0 dinB=0 50 qout=0, dinA=0 dinB=0 -xlrm gd_pulsewarn VCS generates a warning when it detects that the width of a pulse is identical to the gate delay. Usage % simv -xlrm gd_pulsewarn Example Consider the following Verilog code: module dut(qout,dinA,dinB); output qout; input dinA; input dinB; xor #10 inst(qout,dinA,dinB); endmodule delay, VCS generates the following warning message: 0 qout=x, dinA=1 dinB=1 Warning-[PWIWGD] Pulse Width Identical With Gate Delay verilogfile.v, 42 top.mid_inst.dut_inst At time 10, pulse width identical with gate delay ""10"" is detected 10 qout=0, dinA=0 dinB=1 20 qout=1, dinA=0 dinB=0 -xlrm hier_inst_seed Uses instance-specific initialization seeds for random number generators of modules, programs, interfaces, and packages. The default flow uses the same initialization seed across all instances. diagnostics are reported in an ASCII text file named HierInstanceSeed.txt. This file is generated in the current working directory and cannot be renamed during simulation. You The diagnostics report file captures the seed values used for each module instance. Usage % simv -xlrm hier_inst_seed Example Consider the following example: example: module top (); son son1 (); son son2 (); son son3 (); endmodule module son (); initial $display(""%m SEED = %d"", $urandom()); endmodule Output %simv     -xlrm hier_inst_seed top.son1 SEED = 2384297078 top.son2 SEED = 3389395885 top.son3 SEED = 1089914581 4 Partition Compile Options This section describes the following:"
+vcs+initreg+100,"Initializes all variables, registers and memories to random value 0 or 1, with the user-defined seed 100.Note: The seed_value cannot be 1 or 0. Those values have special meanings. Usage % simv +vcs+initreg+0|1|random|seed_value Example Consider the following example: module top; reg a; reg [3:0]b; initial begin $monitor(""Time:%0t a:%b b:%0b"",$time,a,b); #1 a=1; end endmodule vcs test.v +vcs+initreg+ranodm simv +vcs+initreg+0 Output Time:0 a:0 b:0 Time:1 a:1 b:0 +vcs+initreg+config+config_file Specifies a configuration file for initializing Verilog variables, registers defined in sequential UDPs, and memories including multi-dimensional arrays (MDAs) in your design at time zero. In the configuration file, you can define the parts of a design to apply the initialization and the initialization values of the variables. and runtime, the configuration file specified at runtime overrides the configuration file at compile time. compile time is overridden and the entire design is initialized. values as defined in the configuration file. If the +vcs+initreg+0|1|random and +vcs+initreg+config+config_file options are +vcs+initreg+random|+vcs+initreg+config+config_file message is issued. The following table describes the initialization options at runtime:"
+vcs+initreg+seed_value,random initial values as defined in runtime configuration file.
-partcomp,"Enables partition compile. Applies autopartitioning to both modules and SystemVerilog packages. -partcomp=autopart_low Applies autopartitioning to both modules and packages with a low threshold, which results in smaller and more numerous partitions."
-partcomp=autopartdbg,"Creates the vcs_partition_config.file file, which contains the along with any of the other autopartitioning options to create this configuration file."
-fastpartcomp=j<N>,Enables the parallel compilation of partitions.
-simcopy,"When the -simcopy compile-time options are used along with -partcomp_sharedlib, it enables VCS TurboCompile flow (by reusing existing partitions) and also enables relocatable run the simulation in parallel for multiple user environments."
-simcopy_opts=mv,moves the reusable partitions from the directory specified with -partcomp_sharedlib to simv.dadir/partitionlib.
-hsopt=hsimsdfic,"To break the DUT into multiple partitions, support for manual partitions for designs that have SDF interconnect delays across partitions has been added. This allows you to specify explicit partitions to the DUT to achieve better turnaround time."
-partcomp=incr_clean,"partition to save the disk space. -partcomp SystemVerilog packages. Usage %vcs -partcomp -fastpartcomp=j<N> -top topcfg [other options] Example %vcs -partcomp -fastpartcomp=j8 -top topcfg topcfg.v top.v test.v \ add_mult.v [other options] -partcomp=autopart_low Applies autopartitioning to both modules and packages with a low threshold, which results in smaller and more numerous partitions. Usage %vcs -partcomp=autopart_low -fastpartcomp=j<N> -top topcfg [other options] Example %vcs -partcomp=autopart_low -fastpartcomp=j8 -top topcfg topcfg.v top.v test.v \ add_mult.v [other options] -partcomp=autopart_high Applies autopartitioning to both modules and packages with a high threshold, which results in larger and fewer partitions. Usage %vcs -partcomp=autopart_high -fastpartcomp=j<N> -top topcfg [other options] Example %vcs -partcomp=autopart_high -fastpartcomp=j8 -top topcfg topcfg.v top.v test.v \ add_mult.v [other options] -partcomp=autopart_relax -partcomp=autopart_high gives less balanced partitions. It relaxes the partitioning with a high threshold to get maximum gain in turnaround time. Usage %vcs -partcomp=autopart_relax -fastpartcomp=j<N> -top topcfg [other options] Example %vcs -partcomp=autopart_relax -fastpartcomp=j8 -top topcfg topcfg.v top.v test.v \ add_mult.v [other options] -partcomp=autopartdbg Creates the vcs_partition_config.file file, which contains the design partitioning options to create this configuration file. Usage %vcs -partcomp=autopartdbg -fastpartcomp=j<N> -top topcfg [other options] Example %vcs -partcomp=autopartdbg -fastpartcomp=j8 -top topcfg topcfg.v top.v test.v \ add_mult.v [other options] -partcomp=nomodautopart,nopkgautopart Disables autopartitioning of modules and packages. You can use the nomodautopart and nopkgautopart options individually also. Usage %vcs -partcomp=nomodautopart,nopkgautopart -fastpartcomp=j<N> -top topcfg [other options] Example %vcs -partcomp=nomodautopart -fastpartcomp=j8 -top topcfg [other options] %vcs -partcomp=nopkgautopart -fastpartcomp=j8 -top topcfg [other options] -partcomp_dir=<dir_name> Generates partition information in the specified directory. Usage %vcs -partcomp -partcomp_dir=<dir_name> -fastpartcomp=j<N> [other options] Example vcs test -partcomp -partcomp_dir=common_dir -fastpartcomp=j8 [other options] -partcomp_sharedlib=<dir_name> Reuses the existing partition information from the specified partition database and recompiles only the modified design-specific partitions. Usage %vcs -partcomp -partcomp_sharedlib=<dir_name> -fastpartcomp=j<N> [other options] Example vcs test -partcomp -partcomp_sharedlib=../common_dir -fastpartcomp=j8 [other options] -partcomp=modpart_limit:N Limits the module partitions to the specified number. Usage %vcs -partcomp=modpart_limit:N -fastpartcomp=j<N> [other options] Example %vcs -partcomp=modpart_limit:5 -fastpartcomp=j8 [other options] -partcomp=gen_xmr_config=top_module Generates configuration file that contains the XMR information of the design. Usage % vcs <options> -fastpartcomp=j<N> -partcomp=gen_xmr_config=top_module Example % vcs -fastpartcomp=j4 -partcomp=gen_xmr_config=top_module -fastpartcomp=j<N> Enables the parallel compilation of partitions using N cores. Usage vcs <filename1> <filename2> <filename3> -partcomp -fastpartcomp=j<N> [other options] Examples\ vcs top.v test.v add_mult.v -partcomp -fastpartcomp=j4 [other options] This command allows the compilation of a maximum of 4 partitions in parallel on a 4 core (or above) machine. -simcopy When the -simcopy compile-time options are used along with -partcomp_sharedlib, it enables VCS Turbo Compile flow (by reusing existing partitions) and also enables simulation in parallel for multiple user environments. specified with -partcomp_dir) into the simv.daidir/partitionlib directory. In the subsequent partitions, only the partitions shared from the partition library which is specified with -partcomp_sharedlib are copied into the simv.daidir/partitionlib directory in your current working area. Usage % vcs -partcomp -simcopy -fastpartcomp=j<N> Example % vcs -partcomp -simcopy -fastpartcomp=j4 This command moves the partition library, partitionlib directory into the simv.daidir directory and ensures that the complete content is relocatable. Also, enables this directory to be used in the relocatable compilation -simcopy_opts=mv -partcomp_sharedlib to simv.dadir/partitionlib. Usage % vcs -partcomp -fastpartcomp=j -simcopy -simcopy_opts=mv -partcomp_sharedlib=<dir_name> Example % vcs -partcomp -fastpartcomp=j4 -simcopy -simcopy_opts=mv -partcomp_sharedlib=../common_dir -hsopt=hsimsdfic To break the DUT into multiple partitions, support for manual partitions for designs that have SDF interconnect delays across partitions has been added. This allows you to specify explicit partitions to the DUT to achieve better turnaround time. Usage % vcs <filename> -sverilog -fastpartcomp=j<N> +optconfigfile+basic_cfg -partcomp -hsopt=hsimsdfic Example % vcs test.v -sverilog -fastpartcomp=j4 +optconfigfile+basic_cfg -partcomp -hsopt=hsimsdfic -hsopt=uphierarchyic Usage $vcs <filename> -sverilog -full64 -fastpartcomp=j<N> +optconfigfile +test.cfg -partcomp -hsopt=uphierarchyic Example $vcs test.v -sverilog -full64 -fastpartcomp=j4 +optconfigfile+test.cfg -partcomp -hsopt=uphierarchyic -partcomp=incr_clean During incremental elaboration, due to a change in the design, Partition Compile generates a new partition, making the old partition redundant. The Usage %vcs -sverilog -full64 <file_name> -partcomp -partcomp=incr_clean +optconfigfile+<config_file> Example vcs -sverilog -full64 test.sv -partcomp -partcomp=incr_clean +optconfigfile+test.cfg 5 Profiler Options This section describes the following:"
-simprofile,"The unified simulation profiler reports the amount of CPU time and machine memory used by the Verilog, SystemVerilog, and VHDL profile data. | simulation. | This argument tells VCS to collect profile information at runtime noreport                but not write the profileReport.html file or the profileReport directory after simulation. | no-altstack | allow-user-sigaltst ack -simprofile The unified simulation profiler reports the amount of CPU time and machine memory used by the Verilog, SystemVerilog, and VHDL parts of the design. At runtime, enter the data VCS collects during the simulation. Usage Example %> simv -simprofile fastmem You can use the fastmem argument when you are working on a large design and want to perform memory profiling faster in comparison to the default mem argument. -simprofile time The time argument specifies collecting CPU time profile information. Usage %> simv -simprofile time Example %> simv -simprofile time -simprofile mem The mem argument specifies collecting machine memory profile information. Usage %> simv -simprofile mem Example %> simv -simprofile mem -simprofile fastmem Using the fastmem argument, the tool collects the memory profile information in an optimized manner which reduces the time taken in memory profiling. Usage %> simv -simprofile fastmem Example %> simv -simprofile fastmem You can use the fastmem argument when you are working on a large design and want to perform memory profiling faster in comparison to the default mem argument. -simprofile noprof Usage %> simv -simprofile noprof Example %> simv -simprofile noprof -simprofile noreport Tells VCS to collect profile information at runtime but not write the profileReport.html file or the profileReport directory after simulation. Usage %> simv -simprofile noreport Example %> simv -simprofile noreport -simprofile_dir_path By default, VCS creates the profile database and the directory named simprofile_dir that contains all the profile information gathered during simulation, in the directory that contains the simv executable. You can specify a different directory for the profile database Usage % simv -simprofile time|mem -simprofile_dir_path <directory_path> Example % simv -simprofile time -simprofile_dir_path /tmp/SUBDIR1 -simprofile_report By default, VCS writes the profile report named profileReport.html and the corresponding profileReport directory that contains the profile report information. You name for this file and directory. Usage % simv -simprofile time|mem -simprofile_report <file_and_directory_name> Example % simv -simprofile mem -simprofile_report memory_rprt_default_constraints This example creates the following profile report and report directory named memory_rprt_default_constraints.html file and memory_rprt_default_constraints directory respectively. -simprofile no-altstack VCS simulation profiler sets up the signal stack size for sampling to 256 KB. If the simulation runs with any external application that lowers this stack size, specify the Usage % simv -simprofile time|mem -simprofile no-altstack Example % simv -simprofile mem -simprofile no-altstack -simprofile allow-user-sigaltstack VCS simulation profiler sets up the signal stack size for sampling to 256 KB. If the simulation runs with any external application that lowers this stack size, specify the stack. Usage % simv -simprofile time|mem -simprofile allow-user-sigaltstack Example % simv -simprofile time -simprofile allow-user-sigaltstack 6 Diagnostics Options This section describes the following :"
-simprofile=time,testbench for collecting both CPU time and machine memory profile information. Then at runtime specifies collecting CPU time profile information.
-simprofile=mem,"testbench for collecting both CPU time and machine memory profile information. Then at runtime, specifies collecting machine memory profile information. -simprofile The unified simulation profiler reports the amount of CPU time and machine memory used by the Verilog, SystemVerilog, SystemC, and VHDL parts of the design. Compile your Usage %> vcs <file_name> -simprofile <=optional_argument> Examples %> vcs source.v -simprofile %> vcs source.v -simprofile=time %> vcs source.v -simprofile=mem -simprofile=time CPU time and machine memory profile information. Then at runtime specifies collecting CPU time profile information. collect the profile time information that you have specified at compile time. If at runtime you want VCS to collect the profile memory information, you can specify the Usage %> vcs -simprofile=time Examples %> vcs -simprofile=time to collect the profile memory information: %> vcs source.v -simprofile=time %> simv -simprofile mem -simprofile=mem CPU time and machine memory profile information. Then at runtime, specifies collecting machine memory profile information. collect the profile memory information that you have specified at compile time. If at runtime you want VCS to collect the profile time information, you can specify the time Usage %> vcs -simprofile=mem Examples %> vcs -simprofile=mem VCS to collect the profile time information: %> vcs source.v -simprofile=mem %> simv -simprofile time This section describes the following :"
-simprofile time,This argument specifies collecting CPU time profile information.
-simprofile mem,"This argument specifies collecting machine memory profile information. -simprofile fastmem Using this argument, the tool collects the memory profile information in an optimized manner which reduces the time taken in memory profiling."
-simprofile noprof,This argument tells VCS not to collect profiling information at runtime.
-simprofile_report,directory.
-diag libconfig,Enables the libconfig diagnostic messages at compile-time.
-diag timescale,Enables the timescale diagnostic messages at compile-time.
-diag libusage,Generates the information on unused libraries at VCS stage.
-diag pkgusage,Allows you to obtain statistics on package utilization. -Xkeyopt=sparseDiag Prints all the memories above the default threshold of 512 MB and mention sparse inferred/non-sparse.
-event_order_diag,"Enables event order diagnostics. -diag libconfig Enables the libconfig diagnostic messages at compile-time. Usage % vcs <design_file> -diag libconfig Example % vcs test.v -diag libconfig -diag timescale Enables the timescale diagnostic messages at compile-time. Usage % vcs <design_file> -diag timescale Example % vcs test.v -diag timescale -timescale=1ns/1ns -diag libusage Generates the information on unused libraries at VCS stage. Usage % vcs <design_file> -diag libusage Example % vcs test.v -diag libusage -diag pkgusage Allows you to obtain statistics on package utilization. Usage % vcs <design_file> -diag pkgusage Example % vcs test.v -diag pkgusage -Xkeyopt=sparseDiag Prints all the memories above the default threshold of 512 MB and mention sparse inferred/non-sparse. For the memories which are not inferred as sparse, it prints the offending construct which inhibits the memory from being inferred as sparse. Usage % vcs <design_file> -Xkeyopt=sparseDiag Example % vcs -sverilog test.v -Xkeyopt=sparseDiag -Xkeyopt=sparseDiag+print Prints information about memory above threshold, whether they are inferred sparse or not. Default threshold value is 512MB. Usage % vcs <design_file> -Xkeyopt=sparseDiag+print Example % vcs -sverilog test.v -Xkeyopt=sparseDiag+print -Xkeyopt=sparseDiag+printDetails Prints information about memory above threshold, whether they are inferred sparse or not. For the memories which are not inferred as sparse, it prints the offending construct which inhibits the memory from being inferred as sparse. The default threshold value is 512MB. Usage % vcs <design_file> -Xkeyopt=sparseDiag+printDetails Example % vcs -sverilog test.v -Xkeyopt=sparseDiag+printDetails -Xkeyopt=sparseDiag+elabThres+<int> Specifies the threshold above which all memories are considered under sparseDiag. The size must be specified in MB. Usage % vcs <design_file> -Xkeyopt=sparseDiag+elabThres+<int> Example % vcs -sverilog test.v -Xkeyopt=sparseDiag+elabThres+300 -Xkeyopt=sparseDiag+force Enables memories above a specified threshold to be sparse. The default threshold value is 512MB. Usage % vcs <design_file> -Xkeyopt=sparseDiag+force Example % vcs -sverilog test.v -Xkeyopt=sparseDiag+force -Xkeyopt=sparseDiag+noDynUnsparse Stops dynamic unsparsing for memories at runtime. Usage % vcs <design_file> -Xkeyopt=sparseDiag+noDynUnsparse Example % vcs -sverilog test.v -Xkeyopt=sparseDiag+noDynUnsparse -Xkeyopt=sparseDiag+logFile+<FileName> Prints all sparse memory diagnostics in specified file name. Usage % vcs <design_file> -Xkeyopt=sparseDiag+logFile+<FileName> Example % vcs -sverilog test.v -Xkeyopt=sparseDiag+logFile+dev -Xkeyopt=sparseDiag+noDesignNames Does not print module/node names used in a design. Usage % vcs <design_file> -Xkeyopt=sparseDiag+noDesignNames Example % vcs -sverilog test.v -Xkeyopt=sparseDiag+noDesignNames -Xkeyopt=sparseDisable Disables sparse inferencing. It disables the auto inferencing and unsparse pragma specified by you and config file based sparse memories. Usage % vcs <design_file> -Xkeyopt=sparseDisable Example % vcs -sverilog test.v -Xkeyopt=sparseDisable -Xkeyopt=sparseDisable+autoInfer Disables auto inferencing of sparse memories. The memories that are marked as sparse using either pragma or config file is considered for sparsing. Usage % vcs <design_file> -Xkeyopt=sparseDisable+autoInfer Example % vcs -sverilog test.v -Xkeyopt=sparseDisable+autoInfer -event_order_diag Enables event order diagnostics. Usage % vcs <design_file> -event_order_diag Example % vcs -sverilog test.v -event_order_diag This section describes the following :"
-diag vpi,Enables VPI diagnostic messages.
-diag vhpi,Enables VHPI diagnostic messages.
-sparse+stats,Reports sparse memory stats at the end of simulation.
-distsim,Compiles all the SoCs which are to be run in distributed fashion using Distributed Simulation setup
-distsim=client_id,Specifies a unique ID for simv.
-distsim=config_file,"Specifies configuration file. -distsim All the SoCs which are to be run in distributed fashion using Distributed Simulation setup Usage % vcs -distsim <SoC1 related options> % vcs -distsim <SoC2 related options> Example % vcs -distsim <design X> % vcs -distsim <design Y> -distsim=client_id Each Client Simv is identified with a unique integer ID passed with a runtime argument Usage % vcs -distsim=client_id:<id> Examples % vcs -distsim=client_id:0 % vcs -distsim=client_id:1 -distsim=config_file Usage To define the communication among the Client Simvs, you must provide a runtime % vcs -distsim=config_file:<file_path> Example % vcs -distsim=config_file:top.connectivity.txt This section describes the following: | Specifies configuration file."
-distsim=dbdir:<dbdir,Specifies the file path of the KDB database directory. path>
-distsim=diag:data,"At runtime, it enables dumping of a file with all the RTL/Testbench value exchanges"
-distsim=diag:dumpvars,Dumps the VCD file per Client in the current simulation directory.
-distsim=diag:off,Disables default diags.
-distsim=dumpreplay,Dumps the replay db in the current simulation directory.
-distsim=finish:first,Specifies simulation exit for all clients when any one client exits/finishes.
-distsim=finish:freeze,Freezes RTL signals to their last forced values.
-distsim=ip:<ip address>,Specifies the IPv4 address or the hostname of the server.
-distsim=launch_server,Launches the Server Process.
-distsim=num_sockets,Specifies the total number of clients in the setup.
-distsim=port:<TCP port,Passes the required port in the command line to the Primary number>                        Simv.
-distsim=replaybatch,Reads the replay dbs in batches.
-distsim=replay,Starts the Replay mode
-distsim=replay_file,Specifies the file path of the replay db.
-distsim=replay_force,Specifies the file path of the Force file.
-distsim=restore,Starts the Restore feature.
-distsim=save_file,Specifies prefix for the save image file name in the Save Restore mode.
-distsim=server_info,Specifies the path of the Server Info File.
-distsim=struct,Enables the Packed Structure Support feature.
-distsim=timeout,"Specifies the time after which the client processes timeout and exit. -distsim=client_id Each Client Simv is identified with a unique integer ID passed with a runtime argument Usage % simv -distsim=client_id:<id> -distsim=num_sockets:<total_Clients>,config_file:<file_path>,server_info:server.txt Example % simv -distsim=launch_server -distsim=client_id:0,num_sockets:2,config_file: ../mapping,server_info:../server.txt -distsim=config_file It specifies configuration file which holds connectivity and other information. Usage To define the communication among the Client Simvs, you must provide a runtime % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,server_info:server. txt -distsim=config_file:<file_path> Example % simv -distsim=launch_server -distsim=client_id:0,num_sockets:2 -distsim=config_file:top.connectivity .txt -distsim=dbdir:<dbdir path> only while using Configuration File Checker Utility. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=dbdir:<dbdir path> Example $VCS_HOME/bin/simv.distsimchecker -distsim=config_file:mapping -distsim=dbdir:simv0.daidir -distsim=num_sockets:3 -distsim=diag:data value exchanges. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=diag:data Example % simv -distsim=client_id:0,num_sockets:2,config_file:../mapping,server_info: ../server.txt -distsim=diag:data -distsim=diag:dumpvars Using the VCD Dump per Client feature, you can dump the load and driver RTL connection signals of the Distributed Simulation Configuration File in the VCD format. You can load RTL connection signals into Verdi to view the waveform and can debug these files using the nCompare and vcdiff features. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=diag:dumpvars It dumps the VCD file per Client in the current simulation directory. Example % simv -distsim=client_id:0,num_sockets:2,config_file:../mapping,server_info: ../server.txt -distsim=diag:dumpvars -distsim=diag:off Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=diag:off Example % simv -distsim=client_id:0,num_sockets:2,config_file:../mapping,server_info: ../server.txt -distsim=diag:off -distsim=dumpreplay for dumping the replay db for any Client in standalone mode in future. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=dumpreplay Example % simv -distsim=client_id:0,num_sockets:2,config_file:../mapping,server_info: ../server.txt -distsim=dumpreplay -distsim=finish:first a client finishes/exits, the rest of the clients exit their simulation at the next sync point instead of continuing till their end of simulation/exit. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=finish:first Example % simv -distsim=client_id:0,num_sockets:2,config_file:../mapping,server_info: ../server.txt -distsim=finish:first -distsim=finish:freeze finish time behavior in the Distsim setup when a client finishes early. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=finish:freeze Example vcs test.v -sverilog -full64 -distsim -distsim=config_file:mapping.txt -o simv vcs test.v -sverilog -full64 -distsim -distsim=config_file:mapping.txt -o simvf ./simvf -distsim=client_id:0,num_sockets:2,config_file:mapping.txt,server_info:s erver.txt -distsim=launch_server -l sim0.log -distsim=finish:freeze ./simv -distsim=client_id:1,num_sockets:2,config_file:mapping.txt,server_info:s erver.txt -l sim1.log & -distsim=help Usage % simv -distsim=help Example % simv -distsim=help -distsim=ip:<ip address> or the IP address, use the following unix command: hostname -i. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=ip:<IPv4 address> Example Launching the server using -distsim=launch_server mkdir S0; cd S0 vcs ../w0.v -sverilog -full64 -distsim -distsim=client_id:0 -distsim=config_file:../mapping.txt -o simv0 -Mdir=csrc0 |& tee vcs.log.distsim.0 & ; cd .. mkdir S1; cd S1 vcs ../w1.v -sverilog -full64 -distsim -distsim=client_id:1 -distsim=config_file:../mapping.txt -o simv1 -Mdir=csrc1 |& tee vcs.log.distsim.1 & cd .. wait cd S0 ./simv0 -distsim=client_id:0,num_sockets:2,config_file:../mapping.txt -distsim=port:8080 -distsim=ip:10.192.194.52 -distsim=launch_server -l sim0.log > client.log.0 & cd .. cd S1 ./simv1 -distsim=client_id:1,num_sockets:2,config_file:../mapping.txt -distsim=port:8080 -distsim=ip:127.0.0.1 -l sim1.log > client.log.1 & cd .. -distsim=launch_server You can use the launch_server runtime argument to identify which Client Simv would be launching the Server Process as primary simv. It is used to designate one of the simvs to launch the server process internally. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=launch_server Example Assume number of sockets, num_sockets = 4. That is, there are 4 Client Simvs to be run, say simva, simvb, simvc, and simvd. If you perform simva -distsim=launch_server, then simva becomes primary. Total number of process running would be 5 (4 simv and 1 Server Process). -distsim=log_dir:<dir_path> Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=log_dir:<dir_path> Example % simv -distsim=launch_server -distsim=client_id:0,num_sockets:2,config_file:../mapping,server_info: ../server.txt -distsim=log_dir:mydir/mylogs/ -distsim=multiple_same_channel_req is used when you are expecting to receive the TB Data in the parallel Verilog threads simultaneously. By default, the Support for Multiple TB Data Recv Requests feature is disabled. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=multiple_same_channel_req Example % simv -distsim=client_id:0,num_sockets:2,config_file:../mapping.txt,server_inf o:../server.txt -distsim=multiple_same_channel_req -distsim=num_sockets The simulation can only proceed when all the clients are connected as they are mutually Usage % simv -distsim=client_id:<id>,config_file:<file_path>,server_info:<file_path> -distsim=num_sockets:<total_Clients> Example % simv -distsim=launch_server -distsim=client_id:0,config_file:../mapping,server_info:../server.txt -d istsim=num_sockets:2 -distsim=port:<TCP port number> All the ports in a network might not be open to establish a TCP/IP connection due to network security reasons. The User Defined TCP Port feature passes the required port in the command line to the Primary Simv. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=port:<TCP port number> Example ./simv0 -distsim=client_id:0,num_sockets:2,config_file:../mapping.txt -distsim=port:8080 -distsim=replaybatch memory by avoiding loading the entire replay file at one go. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=replaybatch:<SIZE_OF_BATCH> Example % simv -distsim=launch_server -distsim=client_id:0,num_sockets:2,config_file:../mapping,server_info: ../server.txt -distsim=replaybatch:50 -distsim=replay In the Replay Mode, all the RTL drive signals (LHS in the configuration file of RTL connection, see section RTL Connection) are loaded using the replay db that is dumped in the Replay mode. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=replay Example % simv -distsim=client_id:0,num_sockets:2,config_file:../mapping,server_info: ../server.txt -distsim=replay -distsim=replay_file pass replay db name. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=replay -distsim=replay_file:<file path of replay db> Example %simv -distsim=launch_server -distsim=client_id:0,num_sockets:2,config_file:../mapping,server_info: ../server.txt -distsim=replay -distsim=replay_file:./worker_c1_replay.dat -distsim=replay_force When an RTL signal is driven through a distsim configuration file or when the testbench channel is present in the Force configuration file, the value for the specified duration from the Force configuration file is forced instead of the value from the replay db or default simulation. mode by forcing connection signals using force configuration file. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=replay_force:<file path of force file> Example % simv -distsim=launch_server -distsim=client_id:0,num_sockets:2,config_file:../mapping,server_info: ../server.txt -distsim=replay -distsim=replay_file:./worker_c1_replay.dat -distsim=replay_force:force.dat -distsim=restore to enable restore. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=restore Example The sample run script for two client IDs (0 and 1) is as follows: #!/bin/csh -fx mkdir R0 mkdir R1 cd R0 ../simv0 -distsim=launch_server -distsim=client_id:0,num_sockets:2,config_file:../mapping,server_info: ../server.txt -l sim.log0 -ucli -i ../restore0.tcl -distsim=restore > client.log0 & cd .. cd R1 ../simv1 -distsim=client_id:1,num_sockets:2,config_file:../mapping,server_info: ../server.txt -l sim.log1 -ucli -i ../restore1.tcl -distsim=restore > client.log1 & cd .. wait The following are the Tcl files for client0 and client1: restore0.tcl restore ../S0/save3 echo ""Time after restore : $now"" run restore1.tcl restore ../S1/save_snps_dist_c1_60.SAVE echo ""Time after restore : $now"" run For client0 and client1, the save image gets dumped at time 60 with the save3 and save_snps_dist_c1_60 file names, respectively. The simulation gets restored from time 60 for both the clients. -distsim=save_file name. It is a runtime switch that specifies <user_save_file_prefix>. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=save_file:<user_save_file_prefix> Example The sample run script for two client IDs (0 and 1) is as follows: #!/bin/csh -fx rm -rf simv* csrc* S* vcs w0.v -sverilog -full64 -o simv0 -Mdir=csrc0 -distsim -debug_access+all | & tee vcs.log0 & vcs w1.v -sverilog -full64 -o simv1 -Mdir=csrc1 -distsim -debug_access+all | & tee vcs.log1 & wait mkdir S0 mkdir S1 cd S0 ../simv0 -distsim=launch_server -distsim=client_id:0,num_sockets:2,config_file:../mapping,server_info: ../server.txt -l sim.log0 -ucli -i ../save0.tcl > client.log0 & cd .. cd S1 ../simv1 -distsim=client_id:1,num_sockets:2,config_file:../mapping,server_info: ../server.txt -l sim.log1 -ucli -i ../save1.tcl -distsim=save_file:save_snps > client.log1 & cd .. wait To enable save in the -distsim mode, use the regular ucli save as highlighted in the The following are the Tcl files for client0 and client1: save0.tcl run 20 save save1 run 20 save save2 run 20 save save3 run save1.tcl run 20 save save1 run 20 save save2 run For client0, the save image gets dumped at time 20, 40, and 60 with the save1, save2, and save3 file names, respectively. For client1, the save image gets dumped at time 20, 40, and 60 with the save1, save2, and save_snps_dist_c1_60 file names, respectively. -distsim=server_info written by server and read by all the clients. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th> -distsim=server_info:<file_path> Example % simv -distsim=launch_server -distsim=client_id:0,num_sockets:2,config_file:../mapping -distsim=serve r_info:text1.txt -distsim=struct the connectivity signals of the packed structure datatypes. Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=struct Example #!/bin/csh -fx rm -rf simv* csrc* S* vcs w0.v -sverilog -full64 -o simv0 -Mdir=csrc0 -distsim -distsim=config_file:mapping.txt -distsim=client_id:0 | & tee vcs.log0 vcs w1.v -sverilog -full64 -o simv1 -Mdir=csrc1 -distsim -distsim=config_file:mapping.txt -distsim=client_id:1 | & tee vcs.log1 mkdir S0 mkdir S1 cd S0 ../simv0 -distsim=client_id:0,num_sockets:2,config_file:../mapping.txt,server_inf o:../server.txt -l ../sim.log0 -distsim=struct -distsim=launch_server > ../client.log0 & cd .. cd S1 ../simv1 -distsim=client_id:1,num_sockets:2, config_file:../mapping.txt,server_info:../server.txt -l ../sim.log1 > ../client.log1 & cd .. -distsim=timeout Usage % simv -distsim=client_id:<id>,num_sockets:<total_Clients>,config_file:<file_pa th>,server_info:<file_path> -distsim=timeout:<time in minutes> The default timeout is 60 minutes. Example % simv -distsim=launch_server -distsim=client_id:0,num_sockets:2,config_file:../mapping,server_info: ../server.txt -distsim=timeout:5 8 Performance Options This section describes the following :"
-hsopt=elabpart,connected networks.
-hsopt=j<N>,by compiling the partitions in parallel using multiple cores on a machine.
-scanopt,DFT simulations.
-Xkeyopt=mvu,improvements and optimizations related to the UVM operations.
-Xkeyopt=rtopt,"improvements. -design_stats VCS generates design statistics covering various construct usages (such as number of modules, number of instances, number of signals and so on) and the design size. The information helps you to verify or view the design changes done over a period of time and Usage -design_stats=<design|module|hier|filename> [:(top_module_name)| (log_filename)] Where, specified with <top_module_name>. name is specified by log_filename. If the filename is not specified, VCS dumps the design statistics in the vcs_design_stats.log file by default. Example % vcs -design_stats=hier:sub0,filename:my.log test.v VCS generates the statistics for the part of hierarchy of the design starting from module sub0 in the my.log file. In other words, VCS generates statistics only for sub0 and sub1 modules. -hsopt=elabpart The strong connectivity in GLS design generates a very large elaboration module. If the size (nodes or gates) of the elaboration module exceeds 32-bit, it results in capacity issues used to address the capacity issues of VCS elaboration by stopping global optimizations and by using partitioning in vcselab stage. Partitioning reduces the peak size of the elaboration module and balances the size of the elaboration modules. Thus, it helps in reducing the compile performance overhead. Usage % vcs -hsopt=elabpart Example % vcs -hsopt=elabpart -hsopt=gates timing simulations with SDF). You may see some compile-time degradation when you use this switch. Usage % vcs -hsopt=gates Example % vcs -hsopt=gates -hsopt=j<N> in parallel using multiple cores on a machine. By default, VCS automatically decides on the number of cores to be used for parallel compilation. You can also specify the number of cores that VCS uses for parallel compilation using the Usage % vcs -hsopt=j<N> where, N is the number of cores. Example % vcs -hsopt=j10 -j<num_of_processes> You can improve the compile-time performance by specifying the number of parallel processes VCS can launch for the native code generation phase of the compilation/ elaboration. Usage % vcs -j<num_of_processes> [options] top_entity/module/config Example The following command line forks off two parallel processes to generate a binary executable: % vcs -j2 top +rad enabled for SystemVerilog part of the design. Usage % vcs +rad Example % vcs +rad -reportstats Usage %vcs -reportstats Example Compilation Performance Summary =============================== vcs started at : Sat Nov 12 11:02:38 2011 Elapsed time : 4 sec CPU Time : 3.0 sec Virtual memory size : 361.7 MB Resident set size : 141.7 MB Shared memory size : 79.7 MB Private memory size : 62.1 MB Major page faults : 0 =============================== -scanopt Scan Simulation Optimizer (scanopt) yields large speed-ups when used with Serial Scan DFT simulations. The optimizations are done based on the scan cells that are identified in the design. This optimization is applicable only on the Serial Scan DFT designs, using scan flops built with the MUX-FLOP combination. You can use the scanopt switch to modify the shortest clock period to identify scan cells. The default value is 5ns. Usage % vcs -scanopt=<clock_period> Example % vcs -scanopt=100ns -Xkeyopt=mvu optimizations related to the UVM operations. Usage % vcs -Xkeyopt=mvu Example % vcs -Xkeyopt=mvu -Xkeyopt=rtopt improvements. Usage % vcs -Xkeyopt=rtopt Example % vcs -Xkeyopt=rtopt This section describes the following:"
-reportstats,-reportstats Usage %simv -reportstats Example Simulation Performance Summary ============================== Simulation started at : Sat Nov 12 11:02:43 2011 Elapsed Time : 1 sec CPU Time : 0.1 sec Virtual memory size : 152.2 MB Resident set size : 106.5 MB Shared memory size : 21.2 MB Private memory size : 85.3 MB Major page faults : 0 ============================== 9 X-Propagation Options This section describes the following :
-xprop,design. The default tmerge merge mode is used at runtime. This upcoming releases.
-xprop=tmerge,"Use the tmerge merge mode in the entire design. The merge result yields X when all output values of logic 0 and logic 1 control signal are different, similar to a ternary operator. This mode is closer to actual hardware behavior and is more commonly used."
-xprop=xmerge,"Use the xmerge merge mode in the entire design. Merge result always yields X if there is any active driver. In case no active driver is present for the signal, the previous value is retained. This mode is more pessimistic than a standard gate-level simulation."
-xprop=xprop_config_file,Specify a configuration file. You can define the scope of the Xprop instrumentation and select the merge mode in the configuration file.
-xprop=flowctrl,"By default, Xprop does not instrument for loop containing next/continue, exit/break and return statements. The entire parent statement chain is also disabled for Xprop instrumentation. You Xprop instrumentation on such constructs. Some runtime overhead is expected when instrumenting such blocks."
-xprop=mmsopt,the runtime performance by trading off the ability to change merge mode at runtime
-xprop=disableCellDefine,modules that are defined under `celldefine. Note that providing -xprop=disableCellDefine on command line overrides any applicable directive in the config file.
-xprop=xindex=<select_mode>,"selection mode. The mode can be 'dimensional;, 'resolution', or 'random'."
-xprop=nestLimit=<limit>,"Specify the nesting limit for the case and if statements. Here, <limit> is any integral value. If you specify 0 or any negative value, Xprop is disabled completely. By default, the nesting limit for case and if statements is set to 128. -xprop the upcoming releases. Usage % vcs -xprop … Examples vcs -xprop -xprop=tmerge Use the tmerge merge mode in the entire design. The merge result yields X when all output values of logic 0 and logic 1 control signal are different, similar to a ternary operator. This mode is closer to actual hardware behavior and is more commonly used. Note: instead use -xprop= to specify merge mode and hierarchy along with other directives. Usage % vcs -xprop=tmerge [other_compile_options] \user_source_files Examples vcs -xprop=tmerge top.v -xprop=xmerge Use the xmerge merge mode in the entire design. Merge r result always yields X if there is any active driver. In case no active driver is present for the signal, the previous value is retained. This mode is more pessimistic than a standard gate-level simulation. Note: instead use -xprop= to specify merge mode and hierarchy along with other directives. Usage % vcs -xprop=xmerge [other_compile_options] \user_source_files Examples vcs -xprop=xmerge -sverilog top.v -xprop=xprop_config_file Specify a configuration file. You can define the scope of the Xprop instrumentation and select the merge mode in the configuration file. Usage % vcs -xprop=xprop_config_file [other_compile_options]\user_source_files Example % vcs -xprop=xprop_config_file -sverilog top.v -xprop=flowctrl By default, Xprop does not instrument for loop containing next/continue, exit/break and return statements. The entire parent statement chain is also disabled for Xprop Xprop instrumentation on such constructs. Some runtime overhead is expected when instrumenting such blocks. Usage % vcs -xprop=flowctrl [other_vcs_options] Example % vcs -xprop=flowctrl -sverilog test1.v -xprop=test1.cfg -xprop=mmsopt by trading off the ability to change merge mode at runtime Usage % vcs -xprop=mmsopt [other_vcs_options] Example % vcs -xprop=mmsopt [other_vcs_options] -xprop=disableCellDefine under `celldefine. Note that providing -xprop=disableCellDefine on command line overrides any applicable directive in the config file. Usage % vcs -xprop=disableCellDefine [other_vcs_options] Example % vcs -xprop=disableCellDefine [other_vcs_options] -xprop=xindex=<select_mode> can be 'dimensional, 'resolution', or 'random'. For more information on xindex and index Usage % vcs -xprop=xindex=<select_mode> [other_vcs_options] Example % vcs -xprop=xindex=dimensional [other_vcs_options] -xprop=nestLimit=<limit> Specify the nesting limit for the case and if statements. Here, <limit> is any integral value. If you specify 0 or any negative value, Xprop is disabled completely. By default, the nesting limit for case and if statements is set to 128. Note: Simulation behavior is undefined for multiple specifications of the -xprop options, tmerge, xmerge and xprop_config_file. In the following command, the Usage % vcs -xprop=nestLimit=<limit> [other_vcs_options] Example % vcs -xprop=nestLimit=128 [other_vcs_options] This section describes the following :"
-xprop=banner,"Xprop merging state during the simulation. The message gets printed at time 0, and whenever there is a change in the merge mode."
-cm,Generates coverage metrics. You can include more than one argument using a plus (+) as a delimiter between arguments.
-cm line,Specifies line coverage.
-cm cond,Specifies condition coverage.
-cm tgl,Specifies toggle coverage.
-cm fsm,Specifies FSM coverage.
-cm branch,Specifies branch coverage. | Compiles the design for VHDL branch coverage. | Simulates the design for VHDL branch coverage.
-cm assert,Specifies the assertion coverage. | Specifies assertion coverage.
-cm_dir,Enables you to specify an alternative name or location for saving the default simv.vdb directory.
-cm_line contassign,"Enables line coverage for continuous assignments. By default, line coverage does not include Verilog continuous assignments. | Specifies enabling line coverage for Verilog continuous assignments."
-cm_line svtb,Enables line coverage collection for tasks and functions in classes and program blocks.
-cm_name,Enables you to specify an alternative test name instead of the default name. The default test name is test.
-cm_line svtb+svtb_include_lib,"Monitors testbench lines for class tasks and functions in all SystemVerilog packages including OVM, UVM, and VMM."
-cm_report svpackages,Monitors code coverage for SystemVerilog packages.
-cm_fsmopt vhdladveng,Automatically extracts FSMs from VHDL generate blocks.
-cm_fsmresetfilter,Ignores the transitions that can only happen on reset.
-cm_fsmopt full,Extracts FSMs even when a subset of possible transitions could not be found.
-cm_fsm_limit maxwidth=N,Specifies the maximum FSM width.
-cm_fsmopt ignoreOpenAssigns,"Limits the transitions in the FSM model only to those that are identified as controlled by the current value, as opposed to creating transitions due to other assignments such as initialization and resets."
-diag fsm+times,Provides diagnostics to see the time spent in analyzing each module for FSMs. Reports the time spent for every module’s FSM analysis if the time is over a certain level.
-cm_branch values,Reports whether the value seen when a particular ternary branch was used is zero or non-zero.
-cm_branch ignoreMissingDefault,Detects fully-defined case statements (including default statements in them) and skips.
-cm_cond tf,Monitors branch coverage for functions and tasks.
-covg_enable_sce,Enables the support for the set_covergroup_expression syntax. This syntax allows you to specify an array of values that define the bins.
-preserve_path,Retain paths (absolute or relative) of RTL source files as their original type.
-cm_tgl fullintf,Generates toggle coverage reports for all signals of an interface located within the port boundary of a module or instance.
-cm_noconst,"Allows you to automatically find unreachable coverage targets using constant propagation analysis and remove them from coverage monitoring. | Enables constant analysis in combinational code, identifies objects for line, condition, and toggle coverage that cannot be hit because of those constant values, and removes them from coverage monitoring."
-cm_seqnoconst,"VCS performs the following: Analyze Assignments in Sequential Code. Analyze continuous assignments for constant values even if they have delays. Perform constant analysis to remove unreachable coverage targets from the computation of the score and the reports. | Enables a more sophisticated constant analysis compared to -cm_noconst. This includes analysis of non-blocking assignments and continuous assignments with delays, as well as handling multiple assignments to the same bits of a signal."
-cm_constfile,VCS treats the following as constants: Signals specified in <constfile> Constants extracted from a continuous assignment supply0 or supply1 | Specifies signal/variables expressions with constant values. Code coverage treats each listed signal as if it has the specified constant value.
-diag noconst,"Allows you to dump the constant analysis information enabled by the -cm_noconst, -cm_seqnoconst, or -cm_constfile options into a file called constfile.txt | When -cm_noconst or -cm_seqnoconst is enabled, constfile.txt file. -cm Generates coverage metrics. You can include more than one argument using a plus (+) as a delimiter between arguments. Usage % vcs -cm <cov_metrics_name> <design file> Example % vcs -cm line+tgl+branch source.v -cm line Specifies line coverage. Usage % vcs <design file> -cm line <design file> Example % vcs -cm line source.v -cm cond Specifies condition coverage. Usage % vcs <design file> -cm cond <design file> Example % vcs -cm cond source.v -cm tgl Specifies toggle coverage. Usage % vcs <design file> -cm tgl <design file> Example % vcs -cm tgl source.v -cm fsm Specifies FSM coverage. Usage % vcs <design file> -cm fsm <design file> Example % vcs -cm fsm source.v -cm branch Specifies branch coverage. Usage % vcs -cm branch <design file> Example % vcs -cm branch source.v -cm assert Specifies assertion coverage. Usage % vcs -cm assert <design file> Example % vcs -cm assert source.v -cm_dir Enables you to specify an alternative name or location for saving the default simv.vdb directory. Usage % vcs -cm_dir <comp_dir_path> Example % vcs soc_top -cm_dir t1_comp -cm_line contassign Enables line coverage for continuous assignments. By default, line coverage does not include Verilog continuous assignments. Usage % vcs <design_files> -cm line -cm_line contassign Example % vcs file.v -cm line -cm_line contassign -cm_line svtb Enables line coverage collection for tasks and functions in classes and program blocks. Usage % vcs <design_files> -cm line -cm_line svtb Example % vcs file.v -cm line -cm_line svtb -cm_name Enables you to specify an alternative test name instead of the default name. The default test name is test. Usage % vcs <design_files> -cm line -cm_name <testname> Example % vcs source.v -cm line -cm_name testm -cm_line svtb+svtb_include_lib Monitors testbench lines for class tasks and functions in all SystemVerilog packages including OVM, UVM, and VMM. Usage % vcs -cm line -cm_line svtb+svtb_include_lib <design_file> Example % vcs -cm line -cm_line svtb+svtb_include_lib test.v -cm_report svpackages Monitors code coverage for SystemVerilog packages. Usage % vcs -cm line -cm_report svpackages <design_file> Example % vcs -cm line -cm_report svpackages test.v -cm_fsmresetfilter Ignores the transitions that can only happen on reset. Usage % vcs -cm fsm -cm_fsmresetfilter <filename> Example % vcs -cm fsm -cm_fsmresetfilter config.txt -cm_fsm_limit maxwidth=N Specifies the maximum FSM width. Usage % vcs -cm fsm -cm_fsm_limit maxwidth=N -diag fsm <design_file> Example % vcs -cm fsm -cm_fsm_limit maxwidth=N -diag fsm test.v -cm_fsmopt full Extracts FSMs even when a subset of possible transitions could not be found. Usage % vcs -cm fsm -cm_fsmopt full <design_file> Example % vcs -cm fsm -cm_fsmopt full test.v -cm_fsmopt vhdladveng Automatically extracts FSMs from VHDL generate blocks. Usage % vcs -cm fsm -cm_fsmopt vhdladveng <design_file> Example % vcs -cm fsm -cm_fsmopt vhdladveng test.v -cm_fsmopt ignoreOpenAssigns Limits the transitions in the FSM model only to those that are identified as controlled by the current value, as opposed to creating transitions due to other assignments such as initialization and resets. Usage % vcs -cm fsm -cm_fsmopt ignoreOpenAssigns <design_file> Example % vcs -cm fsm -cm_fsmopt ignoreOpenAssigns test.v -diag fsm+times Provides diagnostics to see the time spent in analyzing each module for FSMs. Reports the time spent for every module’s FSM analysis if the time is over a certain level. Usage % vcs -cm fsm -diag fsm+times <design_file> Example % vcs -cm fsm -diag fsm+times test.v -cm branch Compiles the design for VHDL branch coverage. Usage % vcs [vcs_options] -cm branch <design_file> Example % vcs -cm branch test.v -cm_branch values Reports whether the value seen when a particular ternary branch was used is zero or non- zero. Usage % vcs [vcs_options] -cm branch -cm_branch values <design_file> Example % vcs -cm branch -cm_branch values test.v -cm_branch ignoreMissingDefault Detects fully-defined case statements (including default statements in them) and skips. Usage % vcs -cm branch -cm_branch ignoreMissingDefault <design_file> Example % vcs -cm branch -cm_branch ignoreMissingDefault test.v -cm_cond tf Monitors branch coverage for functions and tasks. Usage % vcs -cm cond -cm_cond tf <design_file> Example % vcs -cm cond -cm_cond tf test.v -covg_enable_sce Enables the support for the set_covergroup_expression syntax. This syntax allows you to specify an array of values that define the bins. Usage % vcs -covg_enable_sce <design_file> Example % vcs -covg_enable_sce test.v -preserve_path Retain paths (absolute or relative) of RTL source files as their original type. Usage % vcs -sverilog <design_file> <compile_options> -preserve_path Example % vcs -sverilog ../test.v -cm tgl -preserve_path -cm_tgl fullintf Generates toggle coverage reports for all signals of an interface located within the port boundary of a module or instance. Usage % vcs <design_file> -cm_tgl fullintf Example % vcs test.v -cm_tgl fullintf -cm_noconst Allows you to automatically find unreachable coverage targets using constant propagation analysis and remove them from coverage monitoring. Usage % vcs <design_file> <compile_options> -cm_noconst Example % vcs test.v -cm tgl -cm_noconst -cm_seqnoconst VCS performs the following: Analyze Assignments in Sequential Code. Analyze continuous assignments for constant values even if they have delays. Perform constant analysis to remove unreachable coverage targets from the computation of the score and the reports. Usage % vcs <design_file> <compile_options> -cm_seqnoconst Example % vcs test.v -cm branch -cm_noconst -cm_constfile VCS treats the following as constants: Signals specified in <constfile> Constants extracted from a continuous assignment supply0 or supply1 Usage % vcs <design_file> <compile_options> -cm_constfile <constfile> Example % vcs test.v -cm_noconst -cm_constfile constfile -P pli.tab -cm cond -diag noconst Allows you to dump the constant analysis information enabled by the -cm_noconst, -cm_seqnoconst, or -cm_constfile options into a file called constfile.txt. Usage <other_compile_options> -diag noconst Example % vcs test.v -cm_constfile constfile -diag noconst -cm_assert_hier Limits assertion coverage to the module instances specified in the file. Usage % vcs <design_file> -cm assert -cm_assert_hier <filename> Example % vcs test.v -cm assert -cm_assert_hier file.txt -cm_exclude_macrofile Excludes the Verilog macros from coverage. <filename> contains the macro names to be excluded. Usage % vcs <design_file> <other_compile_options> -cm <coverage_options> -cm_exclude_macrofile <filename> Example % vcs source.v -sverilog -cm line -cm_exclude_macrofile macros_excl.txt -cm_fsmcfg Specifies the FSMs that VCS extracts from a module definition. Usage % vcs <design_file> <other_compile_options> -cm fsm -cm_fsmcfg <filename> Example % vcs source.v -sverilog -cm fsm -cm_fsmcg file.txt -cm_fsmopt allowTmp Allows FSM extraction when there is indirect assignment to the variable that holds the current state. Usage % vcs <design_file> <other_compile_options> -cm fsm -cm_fsmopt allowTmp Example % vcs source.v -sverilog -cm fsm -cm_fsmopt allowTmp -cm_fsmopt allowZeroChecks By default, VCS does not extract an expression as a one-hot FSM if that expression is compared for equality to 0 in the code. The logic is that as one-hot FSMs cannot be 0 legally, that sort of comparison indicates that it was not intended to be a one-hot FSM. This Usage % vcs <design_file> <other_compile_options> -cm fsm -cm_fsmopt allowZeroChecks Example % vcs source.v -sverilog -cm fsm -cm_fsmopt allowZeroChecks -cm_fsmopt includeCalcFsms Extracts calculated FSMs in which arithmetic expressions are assigned to FSMs. Usage % vcs <design_file> <other_compile_options> -cm fsm -cm_fsmopt includeCalcFsms Example % vcs source.v -sverilog -cm fsm -cm_fsmopt includeCalcFsms -cm_fsmopt report2StateFsms By default, VCS does not extract two state FSMs. This keyword tells VCS to extract them. Usage % vcs <design_file> <other_compile_options> -cm fsm -cm_fsmopt report2StateFsms Example % vcs source.v -sverilog -cm fsm -cm_fsmopt report2StateFsms -cm_fsmopt reportvalues Specifies reporting the value transitions of the reg that holds the current state of a One Hot or Hot Bit FSM where there are parameters for the bit numbers of the signals that hold the current and next state. Usage % vcs <design_file> <other_compile_options> -cm fsm -cm_fsmopt reportvalues Example % vcs source.v -sverilog -cm fsm -cm_fsmopt i reportvalues -cm_fsmopt reportWait Enables VCS to monitor transitions when the signal holding the current state is assigned the same state value. Usage % vcs <design_file> <other_compile_options> -cm fsm -cm_fsmopt reportWait Example % vcs source.v -sverilog -cm fsm -cm_fsmopt reportWait -cm_fsmopt reportXassign Enables the extraction of FSMs in which a state contains the X (unknown) value. Usage % vcs <design_file> <other_compile_options> -cm fsm -cm_fsmopt reportXassign Example % vcs source.v -sverilog -cm fsm -cm_fsmopt reportXassign -cm_fsmopt upto64 Directs VCS to ignore any signals greater than 64-bits wide for FSM analysis. Usage % vcs <design_file> <other_compile_options> -cm fsm -cm_fsmopt upto64 Example % vcs source.v -sverilog -cm fsm -cm_fsmopt upto64 -cm_fsmopt sequence Directs VCS to compile for and monitor sequence coverage. Usage % vcs <design_file> <other_compile_options> -cm fsm -cm_fsmopt sequence Example % vcs source.v -sverilog -cm fsm -cm_fsmopt sequence -cm_glitch nolinecontassign Disables glitch suppression on contassign. Usage % vcs <design_file> <other_compile_options> -cm_glitch nolinecontassign+0 Example % vcs source.v -sverilog -cm_glitch nolinecontassign+0 -cm_glitch exceptfns Enables you to exclude functions from glitch filtering. Usage % vcs <design_file> <other_compile_options> -cm_glitch positive_integer +exceptfns Example % vcs source.v -sverilog -cm_glitch 1+exceptfns -cm_hier a configuration file that lists the module definitions, instances and sub-hierarchies, and source files that you want VCS to either exclude from coverage or exclusively compile for coverage. Usage % vcs <design_file> <cov_compile_options> <other_compile_options> -cm_hier filename Example % vcs source.v -sverilog -cm tgl -cm_hier hier_file -cm_ignore_pragma Tells VCS to ignore pragmas for coverage metrics. When this flag is given, code inside coverage off/on pragma sections will be monitored for coverage. Usage % vcs <design_file> <other_compile_options> -cm_ignore_pragma Example % vcs source.v -sverilog -cm_ignore_pragma -cm_libs yv|celldefine Specifies compiling for coverage source files in Verilog libraries when you include the yv argument. Specifies compiling for coverage module definitions that are under the ‘celldefine compiler directive when you include the celldefine argument. You can specify both arguments together using the plus (+) character. Usage % vcs <design_file> <other_compile_options> -cm_libs yv|celldefine Example % vcs source.v -sverilog -cm_libs yv -cm_line contassign Specifies enabling line coverage for Verilog continuous assignments. Usage % vcs <design_file> <other_compile_options> -cm line -cm_line contassign Example % vcs source.v -sverilog -cm line -cm_line contassign -cm_report noinitial metrics. Usage % vcs <design_file> <other_compile_options> <cov_compile_options> -cm_report noinitial Example % vcs -sverilog -cm line -cm_report noinitial test.v -cm_tgl mda Enables toggle coverage for Verilog-2001 multi-dimensional arrays (MDAs) and SystemVerilog unpacked MDAs. Not required for SystemVerilog packed MDAs. Usage % vcs <design_file> <other_compile_options> -cm tgl -cm_tgl mda Example % vcs -sverilog -cm tgl -cm_tgl mda test.v -cm_tgl modportarr Enables monitoring toggle coverage for modport when specified along with the -cm_tgl signal members of the modport. Usage % vcs <design_file> <other_compile_options> -cm tgl -cm_tgl fullintf +modportarr Example % vcs -sverilog -cm tgl -cm_tgl fullintf+modportarr test.v -cm_tgl signalsort Enables you to sort the signals of toggle coverage in alphabetical order. Usage % vcs <design_file> <other_compile_options> -cm tgl -cm_tgl signalsort Example % vcs -sverilog -cm tgl -cm_tgl signalsort test.v -cm_tgl portsonly Instructs VCS to compile and monitor only the ports in your design for toggle coverage, so that the coverage reports that URG writes contain information only about the ports. These reports do not contain information about either the variables and nets that are not ports in your Verilog modules or the variables and signals declared in your VHDL architectures. Usage % vcs <design_file> <other_compile_options> -cm tgl -cm_tgl portsonly Example % vcs -sverilog -cm tgl -cm_tgl portsonly test.v -cm_tgl unencrypted_signals Monitors toggle coverage for ports of partially-encrypted modules. Usage % vcs <design_file> <other_compile_options> -cm tgl -cm_tgl unencrypted_signals Example % vcs -sverilog -cm tgl -cm_tgl unencrypted_signals test.v -cm_tgl_unpacked_limit <value> Sets a limit on the size of an array signal that is considered for toggle coverage. Usage % vcs <design_file> <other_compile_options> -cm tgl -cm_tgl_unpacked_limit <value> Example % vcs -sverilog test.v -cm tgl -cm_tgl_unpacked_limit 10 -cm_driverlessnoconst Directs VCS to automatically detect and exclude driverless signals. Usage % vcs <design_file> <other_compile_options> <cov_compile_options> -cm_seqnoconst -cm_driverlessnoconst Example % vcs test.v -cm line+cond+tgl -cm_seqnoconst -cm_driverlessnoconst -cm_cond Modifies condition coverage as specified by the arguments. Supported arguments are:basic, std, full, allops, event, for, tf, obs You can specify more than one argument. You do this by using the plus (+) character between arguments. For example: -cm_cond basic+allops Usage % vcs <design_file> <other_compile_options> <cov_compile_options> -cm_cond <arguments> Example % vcs test.v -cm line+cond+tgl -cm_cond full -cm_cond full Specifies the following: logical and non-logical conditions — the subexpressions of all operators, not just logical AND && and logical OR ||, are conditions for condition coverage. Multiple conditions — condition coverage reports show vectors containing multiple condition values. Each vector contains a value for each subexpression of the larger expression. Full vectors — the reports show all possible vectors of multiple condition values, not just the sensitized multiple condition value vectors. Usage % vcs vc_file -cm cond -cm_cond full Where verilog/design.vc is an example from the $VCS_HOME/doc/examples directory. Example % vcs verilog/design.vc -cm cond -cm_cond full -cm_cond event Signals in event controls in the sensitivity list position are conditions. Usage % vcs <design_file> <other_compile_options> -cm cond -cm_cond event Example % vcs source.v -cm cond -cm_cond event -cm_cond basic Specifies the following: Logical conditions No multiple conditions — subexpression values are reported on separate lines. Usage % vcs <design_file> <other_compile_options> -cm cond -cm_cond basic Example % vcs source.v -cm cond -cm_cond basic -cm_cond allops Specifies that the subexpressions of all operators (not just logical AND && and logical OR ||) in conditional expressions are conditions for condition coverage. Usage % vcs <design_file> <other_compile_options> -cm cond -cm_cond allops Example % vcs source.v -cm cond -cm_cond allops -cm_cond caseeq Monitors expressions, such as ''a===b'' and ''a!==b'' for condition coverage. Usage % vcs <design_file> <other_compile_options> -cm cond -cm_cond caseeq Example % vcs source.v -cm cond -cm_cond caseeq -cm_cond funcops Monitors the condition expression where the operand is a function/task call. Usage % vcs <design_file> <other_compile_options> -cm cond -cm_cond funcops Example % vcs source.v -cm cond -cm_cond funcops -cm_cond arith Monitors expressions for condition coverage even if it is part of a full expression which has arithmetic operators. Usage % vcs <design_file> <other_compile_options> -cm cond -cm_cond arith Example % vcs source.v -cm cond -cm_cond arith -cm_cond obs Enables observability based condition coverage. Usage % vcs <design_file> <other_compile_options> -cm cond -cm_cond obs Example % vcs source.v -cm cond -cm_cond obs -cm_cond allvectors Specifies all possible sets of logical conditions only. Usage % vcs <design_file> <other_compile_options> -cm cond -cm_cond allvectors Example % vcs source.v -cm cond -cm_cond allvectors -cm_cond std Enables sensitized condition coverage. Usage % vcs <design_file> <other_compile_options> -cm cond -cm_cond std Example % vcs source.v -cm cond -cm_cond std -cm_cond allops+redops Reports the subexpression bits of an operand that reflect the semantics of a reduction operator. Usage % vcs <design_file> <other_compile_options> -cm cond -cm_cond allops +redops Example % vcs source.v -cm cond -cm_cond allops+redops -power=coverage Enables auto-creation of covergroups for low power objects based on the power intent. For more information, see the VCS NLP User Guide. Usage % vcs <design_file> <other_compile_options> -upf <filename.upf> -power=coverage Example % vcs -sverilog -upf file.upf test.v -power=coverage -power=dump_hvp information to the coverage database that enables viewing of low power coverage in information, see the VCS NLP User Guide. Usage % vcs <design_file> <other_compile_options> -upf <filename.upf> -power=coverage -power=dump_hvp Example % vcs -sverilog -upf file.upf test.v -power=coverage -power=dump_hvp -cm_constfile Specifies signal/variable expressions with constant values. Code coverage treats each listed signal as if it has the specified constant value. For example, a bit specified as having the value 0 is treated as false for if conditions and is listed as unreachable for toggle coverage. Usage % vcs <design_file> -cm_constfile <filename> Example % vcs test.v -cm_constfile const_file -cm_constfile_cont_on_error Downgrades fatal errors encountered during the processing of a constant file provided with Usage % vcs <design_file> -cm_constfile <filename> -cm_constfile_cont_on_error Example % vcs test.v -cm_constfile const_file -cm_constfile_cont_on_error -cm_noconst Enables constant analysis in combinational code. Identifies objects for line, condition, and toggle coverage that cannot be hit because of those constant values and removes them from coverage monitoring. Usage % vcs <design_file> -cm line+cond+tgl -cm_noconst Example % vcs test.v -cm line+cond+tgl -cm_noconst -cm_seqnoconst Enables a more sophisticated constant analysis compared to -cm_noconst. This includes analysis of non-blocking assignments and continuous assignments with delays, and handling multiple assignments to the same bits of a signal. Usage % vcs <design_file> -cm line+cond+tgl -cm_seqnoconst Example % vcs test.v -cm line+cond+tgl -cm_seqnoconst -diag noconst enables the creation of a constfile.txt file. This file contains, for each detected constant expression, diagnostics listing the location of its declaration and the locations of all definitions of that expression. Usage % vcs <design_file> -cm line+cond+tgl -cm_seqnoconst -diag noconst Example % vcs test.v -cm line+cond+tgl -cm_seqnoconst -diag noconst This section describes the following:"
-cm_assert_hier,Limits assertion coverage to the module instances specified in <filename>.
-cm_exclude_macrofile,Excludes the Verilog macros from coverage. <filename> contains the macro names to be excluded.
-cm_fsmcfg,Specifies the FSMs that VCS extracts from a module definition.
-cm_fsmopt allowTmp,Allows FSM extraction when there is indirect assignment to the variable that holds the current state.
-cm_fsmopt allowZeroChecks,"By default, VCS does not extract an expression as a one-hot FSM if that expression is compared for equality to 0 in the code. The logic is that as one-hot FSMs cannot be 0 legally, that sort of comparison indicates allows such FSMs to be extracted as one-hot FSMs."
-cm_fsmopt includeCalcFsms,Extracts calculated FSMs in which arithmetic expressions are assigned to FSMs.
-cm_fsmopt report2StateFsms,"By default, VCS does not extract two state FSMs. This keyword tells VCS to extract them."
-cm_fsmopt reportvalues,Specifies reporting the value transitions of the reg that holds the current state of a One Hot or Hot Bit FSM where there are parameters for the bit numbers of the signals that hold the current and next state.
-cm_fsmopt reportWait,Enables VCS to monitor transitions when the signal holding the current state is assigned the same state value.
-cm_fsmopt reportXassign,Enables the extraction of FSMs in which a state contains the X (unknown) value.
-cm_fsmopt upto64,Directs VCS to ignore any signals greater than 64-bits wide for FSM analysis.
-cm_fsmopt sequence,Instructs VCS to compile for and monitor sequence coverage.
-cm_glitch nolinecontassign,Disables glitch suppression on contassign.
-cm_glitch exceptfns,Enables you to exclude functions from glitch filtering.
-cm_hier,"When compiling for line, condition, toggle, branch, or file that lists the module definitions, instances and sub-hierarchies, and source files that you want VCS to either exclude from coverage or exclusively compile for coverage."
-cm_ignore_pragma,"Tells VCS to ignore pragmas for coverage metrics. When this flag is given, code inside coverage off/on pragma sections will be monitored for coverage."
-cm_libs yv|celldefine,Specifies compiling for coverage source files in Verilog libraries when you include the yv argument. Specifies compiling for coverage module definitions that are under the ‘celldefine compiler directive when you include the celldefine argument. You can specify both arguments together using the plus (+) character.
-cm_report noinitial,"for line, condition, and branch metrics."
-cm_tgl mda,Enables toggle coverage for Verilog-2001 multi-dimensional arrays (MDAs) and SystemVerilog unpacked MDAs. Not required for SystemVerilog packed MDAs.
-cm_tgl modportarr,"Enables monitoring toggle coverage for modport when modport in an array, VCS reports toggle coverage for each of the signal members of the modport."
-cm_tgl signalsort,Enables you to sort the signals of toggle coverage in alphabetical order.
-cm_tgl portsonly,"Instructs VCS to compile and monitor only the ports in your design for toggle coverage, so that the coverage reports that URG writes contain information only about the ports. These reports do not contain information about either the variables and nets that are not ports in your Verilog modules or the variables and signals declared in your VHDL architectures."
-cm_tgl unencrypted_signals,Monitors toggle coverage for ports of partially-encrypted modules.
-cm_tgl_unpacked_limit <value>,Sets a limit on the size of an array signal that is considered for toggle coverage.
-cm_driverlessnoconst,Directs VCS to automatically detect and exclude driverless signals.
-cm_cond,Modifies condition coverage as specified by the argument.
-cm_cond full,"Specifies the following: logical and non-logical conditions — the subexpressions of all operators, not just logical AND && and logical OR ||, are conditions for condition coverage. Multiple conditions — condition coverage reports show vectors containing multiple condition values. Each vector contains a value for each subexpression of the larger expression. Full vectors — the reports show all possible vectors of multiple condition values, not just the sensitized multiple condition value vectors."
-cm_cond event,Signals in event controls in the sensitivity list position are conditions.
-cm_cond basic,Specifies the following: Logical conditions No multiple conditions — subexpression values are reported on separate lines
-cm_cond allops,Specifies that the subexpressions of all operators in conditional expressions are conditions for condition coverage.
-cm_cond caseeq,Monitors expressions for condition coverage.
-cm_cond funcops,Monitors the condition expression where the operand is a function/task call.
-cm_cond arith,Monitors expressions for condition coverage even if it is part of a full expression which has arithmetic operators.
-cm_cond obs,Enables observability based condition coverage.
-cm_cond allvectors,Specifies all possible sets of logical conditions only.
-cm_cond std,Enables sensitized condition coverage.
-cm_cond allops+redops,Reports the subexpression bits of an operand that reflect the semantics of a reduction operator.
-power=coverage,"Enables auto-creation of covergroups for low power objects based on the power intent. For more information, see the VCS NLP User Guide. | Creates covergroups for low power objects based on the power intent (UPF)."
-power=dump_hvp,When specified along with the -power=coverage compile database that enables viewing of low power coverage in URG. Low power coverage view in URG is enabled with VCS NLP User Guide. | Allows you to dump the coverage database to be used with the
-cm_constfile_cont_on_error,"Downgrades fatal errors encountered during the processing of a constant file, provided with the an error and stop compilation when non-existent signal names are provided."
-cm <cov_metrics_name>,Generates coverage metrics. You can include more than one argument using a plus (+) as a delimiter between arguments.
-cm_stats all,Saves test run metrics for a simulation run to a lightweight VDB directory even when coverage is not enabled. This VDB directory contains only the test run metrics without any coverage information.
-cm_stats none,Disables the reporting of the test run metrics.
-cm_test,Allows you to specify an unambiguous name for a test
-cm_glitch period,Specifies a glitch period during which VCS does not monitor for coverage caused by value changes. The period is an interval of simulation time specified with a non-negative integer.
-cm_start/-cm_stop N,"Specifies starting/stopping of code coverage collection, where N is the time you specify to start/stop the coverage collection."
-covg_cont_on_error,"Simulation stops if it hits an illegal functional coverage bin. To advance the simulation bypassing this error, use the"
-covg_disable_cg,Allows disabling all functional coverage items (covergroups).
-covg_dump_range,Enables dumping of bins definition to database.
-covg_no_guard_in_shape,"The guard conditions specified on illegal/ignore bins do not impact the shape of the covergroup. The bins are unconditionally retained irrespective of the value of the guard expressions. -cm <cov_metrics_name> Generates coverage metrics. You can include more than one argument using a plus (+) as a delimiter between arguments. Usage % simv -cm <cov_metrics_name> Example % simv -cm line+tgl+branch -cm line Specifies line coverage. Usage % simv -cm line Example % simv -cm line -cm cond Specifies condition coverage. Usage % simv -cm cond Example % simv -cm cond -cm tgl Specifies toggle coverage. Usage % simv -cm tgl Example % simv -cm tgl -cm fsm Specifies FSM coverage. Usage % simv -cm fsm Example % simv -cm fsm -cm branch Specifies branch coverage. Usage % simv -cm branch Example % simv -cm branch -cm assert Specifies assertion coverage. Usage % simv -cm assert Example % simv -cm assert -cm_dir Enables you to specify an alternative name or location for saving the default simv.vdb directory. Usage % simv -cm_dir <sim_dir_path> Example % simv -cm line -cm_dir RUN/simv.cm -cm_name Enables you to specify an alternative test name instead of the default name. The default test name is test. Usage % simv -cm_name <testname> Example % simv -cm line -cm_name test1 -cm branch Simulates the design for VHDL branch coverage. Usage % simv [simv_options] -cm branch Example % simv -cm branch -cm_stats all Saves test run metrics for a simulation run to a lightweight VDB directory even when coverage is not enabled. This VDB directory contains only the test run metrics without any coverage information. Usage % simv -cm_stats all Example % simv -covg_disable_cg -cm_stats all -cm_stats none Disables the reporting of the test run metrics. Usage % simv -cm_stats none Example % simv -cm_stats none -cm_test Allows you to specify an unambiguous name for a test. Usage % simv -cm_stats all -cm_test <dir_name> Example % simv -cm_stats all -cm_test /rand/usbp/test7 -cg_coverage_control=value Enables or disables the coverage data collection for all the coverage groups in your NTB-OV or SystemVerilog testbench. The valid values are 0 and 1. A value of 0 disables coverage collection and a value of 1 enables coverage collection. Usage % simv -cg_coverage_control=value Example % simv -cg_coverage_control=1 -cm_glitch period Specifies a glitch period during which VCS does not monitor for coverage caused by value changes. The period is an interval of simulation time specified with a non-negative integer. Usage % simv -cm_glitch period Example % simv -cm_glitch 10 -cm_log filename Usage Example % simv -cm fsm -cm_log run.log -cm_start/-cm_stop N Specifies starting or stopping of code coverage collection, where N is the time you specify to start or stop the coverage collection. The time unit that you specify with the argument N takes the time unit of the current simulation, by default. Usage % simv <covg_options> -cm_log logfile -cm_start -cm_stop N Example % simv -cm line+cond+tgl -cm_start 10 -cm_stop 20 -covg_cont_on_error Simulation stops if it hits an illegal functional coverage bin. To advance the simulation Usage % simv -covg_cont_on_error Example % simv -covg_cont_on_error -covg_disable_cg Allows disabling all functional coverage items (covergroups). Usage % simv -covg_disable_cg Example % simv -covg_disable_cg -covg_dump_range Enables dumping of bins definition to database. Usage % simv -covg_dump_range Example % simv -covg_dump_range -covg_no_guard_in_shape The guard conditions specified on illegal/ignore bins do not impact the shape of the covergroup. The bins are unconditionally retained irrespective of the value of the guard expressions. Usage % simv -covg_no_guard_in_shape Example % simv -covg_no_guard_in_shape 11 SystemVerilog Options This section describes the following:"
-sv,the IEEE Standard for SystemVerilog (also referred as LRM) in a simulation.
-ntb_opts uvm,You can load UVM 1. or you can explicitly specify the
-ntb_opts uvm-ieee,You can load UVM-ieee library using the -ntb_opts uvm-ieee
-ntb_opts uvm-ieee-2020,You can load UVM-ieee-2020 library using the -ntb_opts
-ntb_opts re_nba_sched,VCS supports intra assignment delay with non-blocking assignment statements in program block with the -ntb_opts 9.4.5 of the IEEE Standard SystemVerilog Std. 1800-2012..
-dpi_lrm_task,VCS now provides the support for disable statement to terminate the activity of a task or a named block that is currently executing a DPI call.. An import DPI routine is in the disabled state when a disable statement targets either the import DPI routine or a parent of the calling chain to the import DPI routine for disabling.
-sv_interconnect,You enable generic interconnect nets with the
-nested_randseq,VCS supports randsequence inside randsequence with the
-ntb_opts,"-ntb_opts no_cb_edge_override no_cb_edge_override            avoid overriding the clocking event at input, output, and inout."
-xlrm uniq_prior_final,"To force unique and priority to evaluate compliance only on the stable and final value of the selection input at the end of a simulation , VCS now provides a -xlrm uniq_prior_final"
-xlrm atox_context_width,"As per IEEE Std 1800-2012 SystemVerilog LRM, the width of the return value of the atohex method should be 32-bit. VCS incorrectly returns context-specific width (width as per LHS) for the atohex method. The behavior of the atohex method is made LRM compliant. You can use the -xlrm atox_context_width"
-xlrm uniq_prior_observed,the runtime warning message to appear in the observed region of the current time step in compliance with the IEEE SystemVerilog LRM Std 1800™-2012 Section Section 12.4.2.1
-xlrm sv_mda_shuffle,VCS supports the usage of shuffle method for multidimensional arrays through the -xlrm sv_mda_shuffle compile-time
-xlrm sv_string_slice,VCS supports string functions while accessing slice of string in -xlrm sv_string_slice
-xlrm uac_inout_highconn,"VCS supports unpacked array concatenation in the highconn of the inout ports of module, interface, program. This feature is supported for the following net types: • Nets like wire, wreal, supply0, supply1, voltage_r, wand, wor and Tri. • User-defined net types that are legal to be connected in the highconn of the module."
-xlrm sv_mda_find_index,VCS supports index locator methods for MDAs by using the -xlrm sv_mda_find_index methods are supported with the MDA's: • find_index() • find_first_index() • find_last_index()
-xlrm ap_for_scalar,"VCS supports assignment patterns for assignments to single-bit scalar nets or variables such as reg, logic, bit, and so on using"
-xlrm relax_cb_dir,VCS supports reading the value of any clocking variable whose clock direction is output.
-xlrm vsa_default_ap,VCS supports default assignment pattern on dynamic
-ignore,"initializer_driver_checks      the initialization of the variable as a procedural driver. It is recommended to verify that you intend to have multiple drivers for this signal before suppressing the error. -sverilog VCS enables compiling Verilog or SystemVerilog code. Usage vcs -sverilog <filename> [other_compile_options] Examples vcs -sverilog test.sv [other_compile_options] -sv SystemVerilog (also referred as LRM) in a simulation. set to be used in a compilation. This default LRM version applies to source code that is not encapsulated by the SystemVerilog ‘begin_keywords and ‘end_keywords compiler directives, This version is the language version used by the VCS and VCS compiler and the keyword Usage vcs -sv=SystemVerilog_LRM_Version <filename> Examples vcs -sv=SystemVerilog_LRM_Version test.sv -ntb_opts uvm VCS enables compiling Verilog or SystemVerilog code. Usage vcs -sverilog -ntb_opts uvm [other_compile_options] \user_source_files_using_UVM Examples vcs -sverilog -ntb_opts uvm test.sv -ntb_opts uvm-1.1 Usage vcs -sverilog -ntb_opts uvm-1.1 [other_compile_options] \user_source_files_using_UVM Examples vcs -sverilog -ntb_opts uvm-1.1 test.sv -ntb_opts uvm-1.2 Usage vcs -sverilog -ntb_opts uvm-1.2 [other_compile_options] \user_source_files_using_UVM Examples vcs -sverilog -ntb_opts uvm-1.2 test.sv -ntb_opts uvm-ieee Usage vcs -sverilog -ntb_opts uvm-ieee [other_compile_options] \user_source_files_using_UVM Examples vcs -sverilog -ntb_opts uvm-ieee test.sv -ntb_opts uvm-ieee-2020 You can load UVM-ieee-2020 library using the -ntb_opts uvm-ieee-2020 compile-time Usage vcs -sverilog -ntb_opts uvm-ieee-2020 [other_compile_options] \user_source_files_using_UVM Examples vcs -sverilog -ntb_opts uvm-ieee-2020 test.sv -ntb_opts re_nba_sched VCS supports intra assignment delay with non-blocking assignment statements in program 9.4.5 of the IEEE Standard SystemVerilog Std. 1800-2012. Usage vcs -sverilog -ntb_opts re_nba_sched [other_compile_options] \user_source_files_using_UVM Examples vcs -sverilog -ntb_opts re_nba_sched test.sv -dpi_lrm_task VCS now provides the support for disable statement to terminate the activity of a task or a named block that is currently executing a DPI call.. An import DPI routine is in the disabled state when a disable statement targets either the import DPI routine or a parent of the calling chain to the import DPI routine for disabling. Usage vcs -sverilog <filename> -dpi_lrm_task Examples vcs -sverilog test.sv -dpi_lrm_task -sv_interconnect Usage vcs -sverilog <filename> -sv_interconnect Examples vcs -sverilog test.sv -sv_interconnect -nested_randseq VCS supports randsequence inside randsequence with the -nested_randseq compile Usage vcs -sverilog <filename> -nested_randseq Examples vcs -sverilog test.sv -nested_randseq -ntb_opts no_cb_edge_override By default, VCS overrides the clocking event with the skew when the skew is specified as posedge/negedge. However, you can use the -ntb_opts no_cb_edge_override no_cb_edge_override -ntb_opts • Input: Value is sampled at the specified clocking skew delay before the clocking event and the update happens at the clocking event. • Output: The output is updated at the specified clocking skew delay after the clocking event. Usage vcs -sverilog -ntb_opts no_cb_edge_override [other_compile_options] \user_source_files_using_UVM Examples vcs -sverilog -ntb_opts no_cb_edge_override test.sv -xlrm uniq_prior_final To force unique and priority to evaluate compliance only on the stable and final value of the selection input at the end of a simulation , VCS provides a -xlrm uniq_prior_final Usage vcs -sverilog <filename> -xlrm uniq_prior_final Examples vcs -sverilog test.sv -xlrm uniq_prior_final -xlrm atox_context_width As per IEEE Std 1800-2012 SystemVerilog LRM, the width of the return value of the atohex method should be 32-bit. VCS incorrectly returns context-specific width (width as per LHS) for the atohex method. The behavior of the atohex method is made LRM back to the old behavior. Usage -sverilog <filename> -xlrm atox_context_width Examples vcs -sverilog test.sv -xlrm atox_context_width -xlrm uniq_prior_observed message to appear in the observed region of the current time step in compliance with the IEEE SystemVerilog LRM Std 1800™-2012 Section 12.4.2.1 Usage vcs -sverilog <filename> -xlrm uniq_prior_observed Examples vcs -sverilog test.sv -xlrm uniq_prior_observed -xlrm sv_mda_shuffle Array ordering methods reorder the elements of any unpacked array. These can be fixed or dynamically sized arrays except for associative arrays. Among the ordering methods, the shuffle method randomizes the order of the elements in the array. When the shuffle method is called through a multidimensional array element, the method randomizes the order of the elements of the target array, if this array is not an associative array. If the array calling shuffle method is another multidimensional array, then shuffle method only randomizes the element order of the leftmost dimension. VCS does not re-order the elements of other sub-dimensions. VCS supports the usage of shuffle method for multidimensional arrays through the -xlrm Usage vcs -sverilog <filename> -xlrm sv_mda_shuffle Examples vcs -sverilog test.sv -xlrm sv_mda_shuffle -xlrm sv_string_slice VCS supports string functions while accessing slice of string in read operation using -xlrm string: sv_string_slice -xlrm Usage vcs -sverilog -xlrm sv_string_slice <filename> Examples vcs -sverilog -xlrm sv_string_slice test.sv -xlrm floating_pnt_constraint VCS supports randomization of real, realtime, and shortreal variables in a constraint expression. This helps in generating random stimulus to your design in mixed-signal simulation. Usage vcs -sverilog <filename> -xlrm floating_pnt_constraint Examples vcs -sverilog test.sv -xlrm floating_pnt_constraint -xlrm uac_inout_highconn VCS supports unpacked array concatenation in the highconn of the inout ports of module, interface, program. This feature is supported for the following net types: • Nets like wire, wreal, supply0, supply1, voltage_r, wand, wor and Tri. • User-defined net types that are legal to be connected in the highconn of the module. Usage vcs -sverilog <filename> -xlrm uac_inout_highconn <other_options> Examples vcs -sverilog test.sv -xlrm uac_inout_highconn -xlrm sv_mda_find_index VCS supports index locator methods for MDAs by using the -xlrm sv_mda_find_index sv_mda_find_index -xlrm • find_index() • find_first_index() • find_last_index() These methods return a queue with the indices of all items that satisfy the with clause expression. For MDA, the indices that are returned belong to the slowest varying dimension of MDA. Usage vcs -sverilog -xlrm sv_mda_find_index <filename> Examples vcs -sverilog -xlrm sv_mda_find_index test.sv -xlrm ap_for_scalar VCS supports assignment patterns for assignments to single-bit scalar nets or variables Usage vcs -sverilog <filename> -xlrm ap_for_scalar -R Examples vcs -sverilog test.sv -xlrm ap_for_scalar -R -xlrm relax_cb_dir VCS supports reading the value of any clocking variable whose clock direction is output. Usage vcs -sverilog <filename> -xlrm relax_cb_dir Examples vcs -sverilog test.sv -xlrm relax_cb_dir -xlrm vsa_default_ap VCS supports default assignment pattern on dynamic array/queue under the -xlrm The assignment pattern on RHS with the default clause does not resize the dynamic array/ queue on LHS. It maps/assigns the default value to the existing elements of the dynamic array/queue Usage vcs -sverilog <file_name> -xlrm vsa_default_ap Examples vcs -sverilog test.sv -xlrm vsa_default_ap -ignore initializer_driver_checks Multiple drivers can cause potential glitches in the simulation runs. The -ignore procedural driver. It is recommended to verify that you intend to have multiple drivers for this signal before suppressing the error. Usage vcs -sverilog <file_name> -ignore initializer_driver_checks Examples vcs -sverilog test.v -ignore initializer_driver_checks This section describes the following: | Suppresses warning messages depending on which keyword keyword_argument      argument is specified."
-sv_lib |-sv_root,Loads the shared objects at runtime. |-sv_liblist
-load,"Loads the libraries dynamically at runtime, specify the libraries | Loads a PLI library dynamically at runtime. libraryloading PLI dynamically runtime at library_path_name"
-ucli=init,"You can tell VCS to enable UCLI debugging when initialization begins for static SystemVerilog tasks and functions in module argument. This debugging capability enables you also to set breakpoints during initialization. -sv_lib |-sv_root |-sv_liblist Loads the shared objects at runtime. Usage simv -sv_lib|-sv_root|-sv_liblist <filename> Examples simv -sv_liblist bootstrap_file simv -sv_rootpath_relative_or_absolute_to_shared_object \ -sv_lib test simv -sv_lib test -load Loads the libraries dynamically at runtime, specify the libraries with the -load runtime Usage simv -load <library_filename> Examples simv -load ./pli1.so -load ./pli2.so -ucli=init You can tell VCS to enable UCLI debugging when initialization begins for static SystemVerilog tasks and functions in module definitions with the -ucli=init runtime breakpoints during initialization. begins after initialization and you cannot debug inside static initialization routines during initialization Loads the libraries dynamically at runtime, specify the libraries with the -load runtime Usage simv -load <library_filename> Examples simv -load ./pli1.so -load ./pli2.so 12 Constraints Options"
+ntb_solver_debug_filter,"If the solver trace is to be enabled for multiple randomize calls, this numbers (optionally) in a comma-separated list."
+ntb_solver_debug=trace,Enables solver trace reporting. Allows you to get more insight to how VCS solves a randomize call.
+ntb_solver_debug=serial,Displays the randomize serial numbers during simulation.
+ntb_solver_debug=extract,Enables test case extraction for the specified randomize calls.
+ntb_solver_debug=profile,Enables constraint profiling for the simulation at runtime.
+ntb_solver_debug=verbose,Provides more detailed information in the solver output.
+ntb_solver_replay=save,Saves the stimulus of a simulation.
+ntb_solver_replay=restore,Restores the stimulus of a simulation for the same design.
+ntb_solver_replay_path=<path>,Allows you to specify the file path to save and read the stimulus.
+ntb_func_eval_in_solver=1,backtracking search to find function argument values that are consistent with the rest of the constraint problem.
+ntb_enable_solver_diagnostics,"Allows the solver to provide additional information about where the [=1|2|5|6]                            solver may be spending more time solving. +ntb_solver_debug_filter specify the list of random serial and partition numbers (optionally) in a comma-separated list. For example, consider the following randomize() calls and their partitions: Serial number 2, all partitions of this second randomize() call Serial number 5, just the third partition of this fifth randomize() call Serial number 10, all partitions of this tenth randomize() call Serial number 15, just the 30th partition of this 15th randomize() call Usage % simv +ntb_solver_debug=trace +ntb_solver_debug_filter=n1,n2.. Example % simv +ntb_solver_debug=trace +ntb_solver_debug_filter=2,5.3,10,15.30 +ntb_solver_debug=trace Enables solver trace reporting. Allows you to get more insight to how VCS solves a randomize call. Usage % simv +ntb_solver_debug=trace +ntb_solver_debug_filter=n1,n2.. Example % simv +ntb_solver_debug=trace +ntb_solver_debug_filter=3 +ntb_solver_debug=serial Displays the randomize serial numbers during simulation. Usage % simv +ntb_solver_debug=serial +ntb_solver_debug_filter=n1,n2.. Example % simv +ntb_solver_debug=serial +ntb_solver_debug_filter=3 +ntb_solver_debug=extract Enables test case extraction for the specified randomize calls. This creates standalone test cases for you to compile and run outside the original design. Usage % simv +ntb_solver_debug=extract +ntb_solver_debug_filter=n1,n2.. Example % simv +ntb_solver_debug=extract +ntb_solver_debug_filter=2 +ntb_solver_debug=profile Enables constraint profiling for the simulation at runtime. The profile report provides important information to you, such as which randomize calls should be targeted for improving constraint performance to bring down the total simulation runtime or memory. Usage % simv +ntb_solver_debug=profile Example % simv +ntb_solver_debug=profile +ntb_solver_debug=verbose Provides more detailed information in the solver output. This information includes the file name and the line number for all the individual constraint conditions inside the constraint block from the solver output. Usage % simv +ntb_solver_debug=verbose Example % simv +ntb_solver_debug=verbose +ntb_solver_replay=save Saves the stimulus of a simulation. Usage % simv +ntb_solver_replay=save Example % simv +ntb_solver_replay=save +ntb_solver_replay=restore Restores the stimulus of a simulation for the same design. Usage % simv +ntb_solver_replay=restore Example % simv +ntb_solver_replay=restore +ntb_solver_replay_path=<path> +ntb_solver_replay=save and the +ntb_solver_replay=restore options save and restore the stimulus to or from ./simv.replay respectively. Usage % simv +ntb_solver_replay=[save|restore] [+ntb_solver_replay_path=<path>] Example % simv +ntb_solver_replay=save +ntb_solver_replay_path=./file +ntb_func_eval_in_solver=1 function argument values that are consistent with the rest of the constraint problem. Thus, the solver finds a solution if it exists and avoids the constraint inconsistency failures. Usage % simv +ntb_func_eval_in_solver=1 <other_runtime_options> Example % simv +ntb_func_eval_in_solver=1 +ntb_enable_solver_diagnostics [=1|2|5|6] Allows the solver to provide additional information about where the solver may be spending more time solving. The valid argument values are as follows: 1             Helps you to understand the variables that cause most of the slowdown or the timeout behavior 2             Helps you to understand the operators or constraint in the given problem definition that may result in a slowdown or timeout 5             Displays the top five variables that cause maximum slowdowns. 6             Displays the top ten variables with high fanout. Usage % simv +ntb_enable_solver_diagnostics [=1|2|5|6] <other_runtime_options> Example % simv +ntb_enable_solver_diagnostics=1 13 ICO Options This section describes the following:"
+ntb_solver_bias_mode=<0|1|2+>,0: Disables bias mode 1: Enables record mode only 2+: Enables both record and bias modes
+ntb_solver_bias_rand_limit=N,Uses bias for randomization when count <=N. There is no randomization limit if N <= 0.
+ntb_solver_bias_scope_file=<file>,Specifies a file with scope variables for record/bias.
+ntb_solver_bias_store_record=<path>,Specifies the cdb database to be stored. If this simv.cst/stimuliDb/record.
+ntb_solver_bias_load_record=<path>,"If used in shared mode, path specifies the cdb database to be stored as a backup is not specified, the database is stored in simv.cst/stimuliDb/load_record."
+ntb_solver_bias_shared_record=<shared_record>,Specifies the cdb shared database stored/updated by all concurrent simv runs. sharing is disabled.
+ntb_solver_bias_diag=<0|1|2|3>,Enables solver bias diagnostics. 0: Disables diagnostics 1|2|3: Enables diagnostics with increasing levels of information
+ntb_solver_bias_mode_auto=<auto_bias_mode>,Enables auto bias feature. auto_bias_mode: 0 to 10 (default: 0). 0: Disable auto bias 1 to 4: Conservative auto biasing 5 to 9: Balanced auto biasing 10: Aggressive auto biasing
+ntb_solver_bias_auto_intra_enable=<0|1>,Enables auto bias for intra simv. Default value is 0. 0: Disable auto bias for intra simv 1: Enables auto bias for intra simv +ntb_solver_bias_test_type=<uvm|ovm|vmm|cm_test|cm_n You can specify the test type to ame>                                                 override the default order by using +ntb_solver_bias_test_type to one of the cm_name | cm_test | ovm | uvm| vmm strings.
+ntb_solver_bias_test_name=<templateTestName>_<Id>,Tracks the test name in the crg reports. Id should be random seed (specified using +ntb_random_seed) if added in the test name.
+ntb_solver_bias_test_name_filter=<regex>,Specifies filters based on regular expressions to include/exclude part of test names.
+ntb_solver_bias_zip=<level>,Allows you to reduce the size of a cdb with lossless compression technique. Compression level (level): 0 to 9 (default: 0). 0: No compression 1: Fastest compression 2 to 8: Fastest to best compression 9: Best compression
+ntb_solver_class_info=<0|1>,"Enables base class merging for a given user-defined level, wherein all the coverage and distribution information of the class instance variables and the bins that are below the parent class by a given level are merged. To enable base class merging, you must enable the collection of class hierarchy information by specifying +ntb_solver_bias_class_info=1"
+ntb_solver_bias_prognosis=<0|1>,You can use the runtime prognosis feature to select a TB where ICO could be most effective in improving coverage. The prognosis feature +ntb_solver_bias_prognosis=1.
+ntb_solver_bias_replay=<0|1|2>,"simulation needed during the debugging of from the given load_record and not from the the shared record (if provided) at the end of the run. For more information, refer to Replaying Incomplete Tests Using the Original Load CDB and With Shared CDB Update."
+ntb_solver_bias_enum_bin=<0|1>,You can use the +ntb_solver_bias_enum_bin=1 each enum value.
+ntb_solver_bias_incr_mode=<0|1|2>,ICO supports incremental (non-accumulating) recording of each run in the cdb using the 0: No incremental recording 1: Enables incremental recording 2: Enables incremental recording and biased merging
+ntb_solver_bias_auto_dist_to_inside_enable=<0|1|2>,0: Disables dist to inside conversion during auto bias and always honors dist constraints. 1: Enables automatic conversion from dist to inside during auto bias for a fraction of tests. 2: Enables automatic conversion from dist to inside for a fraction of tests during autobias selectively for only those dist constraints where weights are constants or constant expressions.
+ntb_solver_bias_scope_var_type=<0|1>,ICO allows you to control the type of variables to record using the +ntb_solver_bias_scope_var_type runtime 0: Record and bias all variables 1: Record and bias variables that are biasable
+ntb_solver_bias_rca=<0|1|2|3|4>,"Enable the Root Cause Analysis (RCA) feature. 0: Disables RCA feature. 1: Enables RCA of the uncoverable or illegal bins generated during runtime. 2: Enables RCA of the uncovered bins. 3: Enables RCA of the uncovered bins due to soft constraints 4: Enable 1, 2, and 3 for user-defined bins also (superset of 3)"
+ntb_solver_rca_cpu_time_limit=<nsec>,Increases the CPU time allocated for RCA.
+ntb_solver_bias_rca_internal=<0|1>,Enable the Root Cause Analysis (RCA) feature. You can use the to view the values blocked by the internal constraints in the RCA view. This feature allows you to identify why certain values are blocked.
+ntb_solver_bias_rca_config=<0|1>,The +ntb_solver_bias_rca_config=1 runtime RCA options. It improves RCA usability. You
+ntb_solver_bias_rca_incr=<0|1>,attributes of each RCA problem. 0: No tracking of incremental RCA effort (default). 1: Enables tracking of incremental RCA effort.
+ntb_solver_bias_rca_focus=nt+to,Focus on the not tried nt and timed out to RCA problems. nt: Target not-tried RCA unsolved problems. to: Target timed-out RCA unsolved problems.
+ntb_solver_bias_rca_cpu_limit=total:min:max,"Controls the CPU time in seconds. total: Total CPU time (in sec) for solving the RCA problem. min: Minimum CPU time (in sec) allocated for solving an RCA problem. When a problem is attempted for the first time, this time is allocated. Default min time is 60 sec. max: Maximum CPU time (in sec) allocated for solving an RCA problem. Default max time is twice the min value."
+ntb_solver_bias_mode_auto_config=<0|1|2>,Enables auto configuration with enhanced set. 0: Disables auto configuration 1: Enables auto configuration 2: Enables auto configuration with enhanced set (recommended)
+ntb_solver_bias_auto_solve_before_ignore=<0|1>,the user-defined solve before constraint for some fraction of test runs automatically to improve the coverage and overall diversity. 0: Honors solver before always. 1: Relax solve before for a fraction of tests in autobias mode.
+ntb_solver_bias_load_record_opt_enable=<0|1|2>,Creates optimized load record load_record_opt file when set to 1. 1: Creates optimized load record load_record_opt file when set to 1. Default is 0. 2: Enables 1 and enables overwriting the load record with the optimized load record in shared mode.
+ntb_solver_bias_load_record_opt=<load_record_opt>,Specifies the location of the optimized load record.
+ntb_solver_bias_scopeX_file=<scopeXFile>,Excludes variables specified in the scopeXFile from recording and biasing. +ntb_solver_bias_enable_opt=<comma_separated_optVal> Enables the corresponding optVal value.
+ntb_solver_bias_disable_opt=<comma_separated_optV,Disables the corresponding optVal value. al>
+ntb_solver_bias_enable_opt=25,Enable illegal determination of part-select variable values.
+ntb_solver_bias_enable_opt=103,Enables prognosis-aware autobias mode selection.
+ntb_solver_bias_enable_opt=20,Enables a new constraint density metric for prognosis analysis.
+ntb_solver_bias_enable_opt=105,"Enables conditional bug finding, that is, automatically switches to bug finding mode when all coverage monitors are disabled."
+ntb_solver_bias_enable_opt=106,"Enables bug finding, that is, force bug finding mode irrespective of whether coverage monitors are disabled or not."
+ntb_solver_bias_enable_opt=201,Enables the corresponding autobias setting when used with the +ntb_solver_bias_mode_auto_config=<1|2>
+ntb_solver_bias_clean=<cleanupLevel>,Reduces the disk footprint by removing the local records from the run directory. Cleanup level cleanupLevel: 0 to 3 (default: 0). 0: No cleanup. 1: Remove local store coverage database. 2: Remove local store and local load coverage databases. 3: Enables 2 and removes local store cdb failed to be merged.
"+ntb_solver_bias_enable_opt=16,17,18",16: Enables coverage tracking of additional singleton bins from 32 to 1023 (for unsigned) and -512 to 511 (for signed). 17: Enables diversification of the bins using greedy approach. 18: Enables diversification of the bins using Reinforcement
+ntb_solver_bias_enable_opt=19,"Enables coverage tracking of additional singleton bins for values in the range [-2^31, 2^31-1] which appear in the interval ranges specified in the constraints. +ntb_solver_bias_interval_size_limit=<interval_size_ Allows you to limit the size of intervals for limit>                                               +ntb_solver_bias_enable_opt=19."
+ntb_solver_bias_debug_info=<0|1|2>,"0: No debug information is reported 1: Prints the following trace information in the simulation log file: Randomize serial, location, and vcs time. 2: Prints the following trace information in the simulation log file: Randomize serial, location, vcs time, stimulus Variable name and values."
+ntb_solver_bias_debug_filter=L:H,Prints the trace information bounded between randomize serial numbers L (low) and H (high) values. Logging occurs between randomize serials L and H.
+ntb_solver_bias_focus_file=<focusFile>,Restricts biasing of variables to those specified in the focusFile.
+ntb_solver_bias_focusX_file=<focusXFile>,Excludes variables from biasing to those specified in the focusXFile.
"+ntb_solver_bias_focus_filter=L:H,L1:H1,L2:H2","Restricts biasing for the randomization with serial in the intervals L:H,L1:H1,L2:H2."
+ntb_solver_bias_shared_update=<0|1>,Allows you to update the shared CDB conditionally based on the simulation result. 0: Shared CDB is not updated at the end of the simulation. 1: Shared CDB is updated at the end of the simulation (default behavior).
+ntb_solver_bias_inst_merge=<0|1>,Allows you to enable or disable the merging of class instances in repeat randomization. 0: Disables the merging of class instances in repeat randomization. 1: Enables the merging of class instances in repeat randomization (default behavior)
+ntb_solver_bias_enable_opt=108,Focus biasing on improving coverage.
+ntb_solver_bias_sbin_file=<sbin_file>,Allows you to specify the user-defined sample bin information in <sbin_file>.
+ntb_solver_bias_sbin_load_merge=add+reuse+modify,Allows you to specify how to merge user-defined sample bins of load record and sbin (new) during the current run (default is add+reuse).
+ntb_solver_bias_sbin_store_merge=add+reuse+modify,Allows you to specify how to merge user-defined sample bins of the shared and current runs during distributed merge to the shared record.
+ntb_solver_bias_debug_record=<debug_dir>,Specify the debug directory where the debug state and RCA information is stored.
+ntb_solver_bias_debug_regex=<failure_message>,Specify the failure message to scan from the simulation log file.
+ntb_solver_bias_debug_replay=<iteration_number>,Specify the iteration number to replay the debug replay. This can be a number between 0 and max iteration.
+ntb_solver_bias_debug_abort_divergence=<0|1>,0: Do not exit a diverging run (default) 1: Exit a diverging run
+ntb_solver_bias_soft_ignore=<0|1|2>,0: Honors all soft constraints 1: Ignores all soft constraints irrespective of whether biasing is ON or OFF 2: Ignores all soft constraints only when biasing is ON
+ntb_solver_bias_soft_ignore_file=<ignoreFile>,Restricts ignoring soft constraints to the variables specified in the ignore file.
+ntb_solver_bias_soft_ignoreX_file=<ignoreXFile>,Exclude ignoring soft constraints of the variables specified in the ignoreX file.
+ntb_solver_bias_soft_ignore_dump=<0|1>,0: Do not dump the soft constraints (default) 1: Dump the soft constraints in a file (<store_record>/record.cdb.softdrop)
+ntb_solver_bias_mode_isr=<0|1|2|3|4>,The Intelligent Simulation Replayer (ISR) helps to replay a simulation in a best-effort case considering design/testbench changes.
+ntb_solver_bias_isr_record=<isr_record>,"Specifies the ISR record where the simulation run information is stored and restored from. +ntb_solver_bias_mode=<0|1|2+> 0: Disables bias mode 1: Enables record mode only 2+: Enables both record and bias modes Usage % simv +ntb_solver_bias_mode=<0|1|2+> Example % simv +ntb_solver_bias_mode = 1289 (= 9 + 256 + 1024) Enable both record and bias modes. The variable values are biased with varying weights across randomization in both intra- and inter runs (9). Enable bias variables (+256) Enables alternate biasing/no biasing (+1024) +ntb_solver_bias_rand_limit=N Uses bias for randomization when count <=N. There is no randomization limit if N <= 0. Usage % simv +ntb_solver_bias_rand_limit=N Example % simv +ntb_solver_bias_rand_limit=8 +ntb_solver_bias_scope_file=<file> Specifies a file with scope variables for record/bias. Usage % simv +ntb_solver_bias_scope_file=<file> Example % simv +ntb_solver_bias_scope_file=scope.txt +ntb_solver_bias_store_record=<path> stored in simv.cst/stimuliDb/record. Usage % simv +ntb_solver_bias_store_record=<path> Example % simv +ntb_solver_bias_store_record=./record +ntb_solver_bias_load_record=<path> If used in shared mode, path specifies the cdb database to be stored as a backup load stimuliDb/load_record. Usage % simv +ntb_solver_bias_load_record=<path> Example % simv +ntb_solver_bias_load_record=./record +ntb_solver_bias_shared_record=<shared_record> Specifies the cdb shared database stored/updated by all concurrent simv runs. If this Usage % simv +ntb_solver_bias_shared_record=<Shared_record> Example % simv +ntb_solver_bias_shared_record=./record +ntb_solver_bias_diag=<0|1|2|3> Enables solver bias diagnostics. 0: Disables diagnostics 1|2|3: Enables diagnostics with increasing levels of information Usage % simv +ntb_solver_bias_diag=<0|1|2|3> Example % simv +ntb_solver_bias_store_record=1 +ntb_solver_bias_mode_auto=<auto_bias_mode> Enables auto bias feature. auto_bias_mode: 0 to 10 (default: 0). 0: Disable auto bias 1 to 4: Conservative auto biasing 5 to 9: Balanced auto biasing 10: Aggressive auto biasing Usage % simv +ntb_solver_bias_mode_auto=<auto_bias_mode> Example % simv +ntb_solver_bias_mode_auto=5 +ntb_solver_bias_auto_intra_enable=<0|1> Enables auto bias for intra simv. Default value is 0. 0: Disable auto bias for intra simv 1: Enables auto bias for intra simv Usage % simv +ntb_solver_bias_auto_intra_enable=<0|1> Example % simv +ntb_solver_bias_shared_record=1 +ntb_solver_bias_test_type=<uvm|ovm|vmm|cm_test|cm_name> You can specify the test type to override the default order by using +ntb_solver_bias_test_type to one of the cm_name | cm_test | ovm | uvm| vmm strings. Usage % simv +ntb_solver_bias_test_type=<uvm|ovm|vmm|cm_test|cm_name> Example % simv +ntb_solver_bias_test_type=uvm +ntb_solver_bias_test_name=<templateTestName>_<Id> Tracks the test name in the crg reports. Id should be random seed (specified using +ntb_random_seed) if added in the test name. Preference is given to the test names in the following default order specified in the command line: +ntb_solver_bias_test_name +UVM_TESTNAME +OVM_TESTNAME +vmm_test -cm_test -cm_name Usage % simv +ntb_solver_bias_test_name=<templateTestName>_<Id> Example % simv +ntb_solver_bias_test_name=test_4 +ntb_solver_bias_test_name_filter=<regex> Specifies filters based on regular expressions to include/exclude part of test names. Usage % simv +ntb_solver_bias_test_name_filter=<regex> Example % simv +ntb_solver_bias_test_name_filter=""[[:alpha:]]+"" +ntb_solver_bias_zip=<level> Allows you to reduce the size of a cdb with lossless compression technique. Compression level (level): 0 to 9 (default: 0). 0: No compression 1: Fastest compression 2 to 8: Fastest to best compression 9: Best compression Compression level greater than 0 compresses local store record (specified with +ntb_solver_bias_store_record), local load record (specified with +ntb_solver_bias_load_record), and shared record (specified with +ntb_solver_bias_shared_record). Usage % simv +ntb_solver_bias_zip=<comp_level> Example % simv +ntb_solver_bias_zip=1 +ntb_solver_class_info=<0|1> Enables base class merging for a given user-defined level, wherein all the coverage and distribution information of the class instance variables and the bins that are below the parent class by a given level are merged. To enable base class merging, you must enable the collection of class hierarchy information by specifying +ntb_solver_bias_class_info=1. Usage % simv +ntb_solver_class_info=<0|1> Example % simv +ntb_solver_bias_store_record=./record +ntb_solver_bias_class_info=1 +ntb_solver_bias_mode=16649 +ntb_enable_fast_solver=0 +ntb_solver_mode=2 +ntb_solver_bias_diag=2 +ntb_solver_bias_prognosis=<0|1> You can use the runtime prognosis feature to select a TB where ICO could be most effective in improving coverage. The prognosis feature is enabled using the following Usage % simv +ntb_solver_bias_prognosis=<0|1> Example % simv +ntb_enable_fast_solver=0 +ntb_solver_bias_prognosis=1 +ntb_solver_bias_store_record=./record +ntb_solver_bias_replay=<0|1|2> run. For more information, refer to Replaying Incomplete Tests Using the Original Load CDB and With Shared CDB Update. Usage % simv +ntb_solver_bias_replay=<0|1|2> Example % simv +ntb_solver_bias_replay=1 +ntb_solver_bias_enum_bin=<0|1> bins for each enum value. Usage % simv +ntb_solver_bias_enum_bin=<0|1> Example % simv +ntb_solver_bias_enum_bin=1 +ntb_solver_bias_incr_mode=<0|1|2> ICO supports incremental (non-accumulating) recording of each run in the cdb using the 0: No incremental recording 1: Enables incremental recording 2: Enables incremental recording and biased merging Usage % simv +ntb_solver_bias_incr_mode=<0|1|2> Example % simv +ntb_solver_bias_incr_mode=1 +ntb_solver_bias_auto_dist_to_inside_enable=<0|1|2> 0: Disables dist to inside conversion during auto bias and always honors dist constraints. 1: Enables automatic conversion from dist to inside during auto bias for a fraction of tests. 2: Enables automatic conversion from dist to inside for a fraction of tests during autobias selectively for only those dist constraints where weights are constants or constant expressions. Usage % simv +ntb_solver_bias_auto_dist_to_inside_enable=<0|1|2> Example % simv +ntb_solver_bias_auto_dist_to_inside_enable=1 +ntb_solver_bias_scope_var_type=<0|1> ICO allows you to control the type of variables to record using the 0: Record and bias all variables 1: Record and bias variables that are biasable Usage % simv +ntb_solver_bias_scope_var_type=<0|1> Example % simv +ntb_solver_bias_scope_var_type=1 +ntb_solver_bias_rca=<0|1|2|3|4> Enable the Root Cause Analysis (RCA) feature. 0: Disables RCA feature. 1: Enables RCA of the uncoverable or illegal bins generated during runtime. 2: Enables RCA of the uncovered bins. 3: Enables RCA of the uncovered bins due to soft constraints 4: Enable 1, 2, and 3 for user-defined bins also (superset of 3) Usage % simv +ntb_solver_bias_rca=<0|1|2|3|4> Example % simv +ntb_solver_bias_rca=2 +ntb_solver_rca_cpu_time_limit=<nsec> Increases the CPU time allocated for RCA. Usage % simv +ntb_solver_rca_cpu_time_limit=<nsec> Example % simv +ntb_solver_rca_cpu_time_limit=10 +ntb_solver_bias_rca_internal=<0|1> Enable the Root Cause Analysis (RCA) feature. blocked by the internal constraints in the RCA view. This feature allows you to identify why certain values are blocked. 0: No internal constraints (default). 1: Allows internal constraints in RCA if there are no user constraints. Usage % simv +ntb_solver_bias_mode_auto_config=2;//recommended +ntb_solver_bias_shared_record=<sharedDb> +ntb_solver_bias_rca_config=<0|1> Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_store_record=./sbinA_record +ntb_solver_bias_sbin_file=sbinA.txt +ntb_solver_bias_rca_config=1 +ntb_solver_bias_rca_config=<0|1> 0: No effect 1: Automatically enables the following RCA options: Usage % simv +ntb_solver_bias_mode_auto_config=2;//recommended +ntb_solver_bias_shared_record=<sharedDb> +ntb_solver_bias_rca_config=<0|1> Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_store_record=./sbinA_record +ntb_solver_bias_sbin_file=sbinA.txt +ntb_solver_bias_rca_config=1 +ntb_solver_bias_rca_incr=<0|1> 0: No tracking of incremental RCA effort (default). 1: Enables tracking of incremental RCA effort. Usage % simv +ntb_solver_bias_mode_auto_config=2 //recommended +ntb_solver_bias_clean=0 //recommended +ntb_solver_bias_shared_record=<sharedDb> +ntb_solver_bias_rca=<0|1|2|3> +ntb_solver_bias_rca_incr=<0|1> Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_clean=0 +ntb_solver_bias_shared_record=./binA_record +ntb_solver_bias_rca_config=1 +ntb_solver_bias_rca_focus=nt+to Focus on the not tried nt and timed out to RCA problems. nt: Target not-tried RCA unsolved problems. to: Target timed-out RCA unsolved problems. Usage % simv +ntb_solver_bias_mode_auto_config=2 //recommended +ntb_solver_bias_clean=0 //recommended +ntb_solver_bias_shared_record=<sharedDb> +ntb_solver_bias_rca=<0|1|2|3> +ntb_solver_bias_rca_focus=<nt|to|nt+to> Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_clean=0 +ntb_solver_bias_shared_record=./binA_record +ntb_solver_bias_rca_focus=nt +ntb_solver_bias_rca_cpu_limit=total:min:max Controls the CPU time in seconds. total: Total CPU time (in sec) for solving the RCA problem. min: Minimum CPU time (in sec) allocated for solving an RCA problem. When a problem is attempted for the first time, this time is allocated. Default min time is 60 sec. max: Maximum CPU time (in sec) allocated for solving an RCA problem. Default max time is twice the min value. Usage % simv +ntb_solver_bias_mode_auto_config=2 //recommended +ntb_solver_bias_clean=0 //recommended +ntb_solver_bias_shared_record=<sharedDb> +ntb_solver_bias_rca=<0|1|2|3> +ntb_solver_bias_rca_cpu_limit=total:min:max Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_clean=0 +ntb_solver_bias_shared_record=./binA_record +ntb_solver_bias_rca_cpu_limit=total +ntb_solver_bias_mode_auto_config=<0|1|2> Enables auto configuration with enhanced set. 0: Disables auto configuration 1: Enables auto configuration 2: Enables auto configuration with enhanced set (recommended) Usage % simv +ntb_solver_bias_mode_auto_config=<0|1|2> +ntb_solver_bias_wdir=<work_dir> +ntb_solver_bias_replay=<0|1> Example % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_debug_info=2 +ntb_solver_bias_replay=1 +ntb_solver_bias_auto_solve_before_ignore=<0|1> some fraction of test runs automatically to improve the coverage and overall diversity. 0: Honors solver before always. 1: Relax solve before for a fraction of tests in autobias mode. Usage % simv +ntb_solver_bias_mode_auto=<autoBias> +ntb_solver_bias_auto_solve_before_ignore=<0|1> ... + Example % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_shared_cdb=./ shared +ntb_solver_bias_enable_opt=16,17,19,20,103 +ntb_solver_bias_auto_solve_before_ignore=1 +ntb_solver_bias_load_record_opt_enable=<0|1|2> Creates optimized load record load_record_opt file when set to 1. 1: Creates optimized load record load_record_opt file when set to 1. Default is 0. 2: Enables 1 and enables overwriting the load record with the optimized load record in shared mode. Usage % simv +ntb_solver_bias_mode_auto_config=<0|1|2> +ntb_solver_bias_test_name=<tname> +ntb_random_seed=<seed> +ntb_solver_bias_wdir=<work_dir> +ntb_solver_bias_clean=<0|1|2> +ntb_solver_bias_load_record_opt_enable=<0|1|2> Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_wdir=wdir +ntb_solver_bias_shared_record=shared +ntb_solver_bias_test_name=test +ntb_random_seed=100 +ntb_solver_bias_load_record_opt_enable=2 +ntb_solver_bias_load_record_opt=<load_record_opt> Specifies the location of the optimized load record. Usage % simv +ntb_solver_bias_mode_auto_config=<0|1|2> +ntb_solver_bias_test_name=<tname> +ntb_random_seed=<seed> +ntb_solver_bias_wdir=<work_dir> +ntb_solver_bias_clean=<0|1|2> +ntb_solver_bias_load_record_opt=<load_record_opt> Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_wdir=wdir +ntb_solver_bias_shared_record=shared +ntb_solver_bias_test_name=test +ntb_random_seed=100 +ntb_solver_bias_load_record_opt=./load_record_opt +ntb_solver_bias_scopeX_file=<scopeXFile> Excludes variables specified in the scopeXFile from recording and biasing. Usage % simv +ntb_solver_bias_scope_file=<scopeFile> +ntb_solver_bias_scopeX_file=<scopeXFile> Example % simv +ntb_solver_bias_scope_file=scopeFile +ntb_solver_bias_scopeX_file=scopeXFile +ntb_solver_bias_enable_opt=<comma_separated_optVal> Enables the corresponding optVal value. Usage % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_enable_opt=<comma_separated_optVal> Example % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_enable_opt=20,103 +ntb_solver_bias_disable_opt=<comma_separated_optVal> Disables the corresponding optVal value. Usage % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_disable_opt=<comma_separated_optVal> Example % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_disable_opt=9,10 +ntb_solver_bias_enable_opt=25 Enable illegal determination of part-select variable values. Usage % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_enable_opt=25 Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_enable_opt=108,25 +ntb_solver_bias_enable_opt=103 Enables prognosis-aware autobias mode selection. Usage % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_enable_opt=103 Example % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_enable_opt=103 +ntb_solver_bias_enable_opt=20 Enables a new constraint density metric for prognosis analysis. Usage % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_enable_opt=20 Example % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_enable_opt=20 +ntb_solver_bias_enable_opt=105 Enables conditional bug finding, that is, automatically switches to bug finding mode when all coverage monitors are disabled. Usage % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_auto_dist_to_inside_enable=2 +ntb_solver_bias_enable_opt=105 Example % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_auto_dist_to_inside_enable=2 +ntb_solver_bias_enable_opt=105 +ntb_solver_bias_enable_opt=106 Enables bug finding, that is, force bug finding mode irrespective of whether coverage monitors are disabled or not. Usage % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_auto_dist_to_inside_enable=2 +ntb_solver_bias_enable_opt=106 Example % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_auto_dist_to_inside_enable=2 +ntb_solver_bias_enable_opt=106 +ntb_solver_bias_enable_opt=201 Usage % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_enable_opt=201 Example % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_enable_opt=201 +ntb_solver_bias_clean=<cleanupLevel> Reduces the disk footprint by removing the local records from the run directory. Cleanup level cleanupLevel: 0 to 3 (default: 0). 0: No cleanup. 1: Remove local store coverage database. 2: Remove local store and local load coverage databases. 3: Enables 2 and removes local store cdb failed to be merged. Usage % simv +ntb_solver_bias_clean=<cleanupLevel> +ntb_solver_bias_store_record=<recordStore> +ntb_solver_bias_load_record=<recordLoad> +ntb_solver_bias_shared_record=<recordShared> … Example % simv +ntb_solver_bias_clean=2 +ntb_solver_bias_store_record=./ store_record +ntb_solver_bias_load_record=./load_record +ntb_solver_bias_shared_record=./shared +ntb_solver_bias_enable_opt=16,17,18 16: Enables coverage tracking of additional singleton bins from 32 to 1023 (for unsigned) and -512 to 511 (for signed). 17: Enables diversification of the bins using greedy approach. 18: Enables diversification of the bins using Reinforcement Usage % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_enable_opt=16,17,18 Example % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_mode_auto=2 +ntb_solver_bias_enable_opt=16,17 +ntb_solver_bias_shared_record=./share +ntb_solver_bias_enable_opt=19 Enables coverage tracking of additional singleton bins for values in the range [-2^31, 2^31-1] which appear in the interval ranges specified in the constraints. Usage % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_enable_opt=19 Example % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_enable_opt=19 +ntb_solver_bias_interval_size_limit=<interval_size_limit> Allows you to limit the size of intervals for +ntb_solver_bias_enable_opt=19. Usage % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_enable_opt=19 +ntb_solver_bias_interval_size_limit=<interval_size_limit> Example % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_enable_opt=19 +ntb_solver_bias_interval_size_limit=8192 +ntb_solver_bias_debug_info=<0|1|2> 0: No debug information is reported 1: Prints the following trace information in the simulation log file: Randomize serial, location, and vcs time. 2: Prints the following trace information in the simulation log file: Randomize serial, location, vcs time, stimulus Variable name and values. Usage % simv +ntb_solver_bias_debug_info=<0|1|2> +ntb_solver_bias_debug_filter=L:H Example % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_debug_info=2 +ntb_solver_bias_debug_filter=3:5 +ntb_solver_bias_debug_filter=L:H Prints the trace information bounded between randomize serial numbers L (low) and H (high) values. Logging occurs between randomize serials L and H. Usage % simv +ntb_solver_bias_debug_info=<0|1|2> +ntb_solver_bias_debug_filter=L:H Example % simv +ntb_solver_bias_mode_auto_config=1 +ntb_solver_bias_debug_info=2 +ntb_solver_bias_debug_filter=3:5 +ntb_solver_bias_focus_file=<focusFile> Restricts biasing of variables to those specified in the focusFile. Usage % simv +ntb_solver_bias_scope_file=<scopeFile> +ntb_solver_bias_focus_file=<focusFile> Example % simv +ntb_solver_bias_focus_file=F +ntb_solver_bias_scope_file=S +ntb_solver_bias_focusX_file=<focusXFile> Excludes variables from biasing to those specified in the focusXFile. Usage % simv +ntb_solver_bias_scope_file=<scopeFile> +ntb_solver_bias_scopeX_file=<scopeXFile> +ntb_solver_bias_focusX_file=<focusXFile> Example % simv +ntb_solver_bias_focusX_file=FX +ntb_solver_bias_scope_file=S +ntb_solver_bias_scopeX_file=SX +ntb_solver_bias_focus_filter=L:H,L1:H1,L2:H2 Restricts biasing for the randomization with serial in the intervals L:H,L1:H1,L2:H2. Usage % simv +ntb_solver_bias_scope_file=<scopeFile> +ntb_solver_bias_scopeX_file=<scopeXFile> +ntb_solver_bias_focus_file=<focusFile> +ntb_solver_bias_focusX_file=<focusXFile> +ntb_solver_bias_focus_filter=L:H[,L1:H1,L2:H2] Example % simv +ntb_solver_bias_focusX_file=FX +ntb_solver_bias_scope_file=S +ntb_solver_bias_scopeX_file=SX +ntb_solver_bias_focus_filter=3:5,7:9 +ntb_solver_bias_shared_update=<0|1> Allows you to update the shared CDB conditionally based on the simulation result. 0: Shared CDB is not updated at the end of the simulation. 1: Shared CDB is updated at the end of the simulation (default behavior). Usage % simv +ntb_solver_bias_mode_auto_config=2 ; recommended +ntb_solver_bias_clean=0 ; recommended +ntb_solver_bias_shared_record=<sharedDb> +ntb_solver_bias_shared_update=<0|1> Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_shared_record=./shared +ntb_solver_bias_shared_update=0 +ntb_solver_bias_inst_merge=<0|1> Allows you to enable or disable the merging of class instances in repeat randomization. 0: Disables the merging of class instances in repeat randomization. 1: Enables the merging of class instances in repeat randomization (default behavior). Usage % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_shared_record=<sharedDb> +ntb_solver_bias_inst_merge=<0| 1> Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_shared_record=./shared +ntb_solver_bias_inst_merge=0 +ntb_solver_bias_enable_opt=108 Focus biasing on improving coverage. Usage % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_enable_opt=108 Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_enable_opt=108 +ntb_solver_bias_sbin_file=<sbin_file> Allows you to specify the user-defined sample bin information in <sbin_file>. Usage % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_shared_record=<sharedDb> +ntb_solver_bias_sbin_file=<sbin_file> Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_shared_record=./shared +ntb_solver_bias_sbin_file=sbin.txt +ntb_solver_bias_sbin_load_merge=add+reuse+modify Allows you to specify how to merge user-defined sample bins of load record and sbin (new) during the current run (default is add+reuse). Usage % simv +ntb_solver_bias_sbin_file=<sbin_file> +ntb_solver_bias_sbin_load_merge=add+reuse+modify Example %% simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_shared_record=./shared +ntb_solver_bias_sbin_file=sbin.txt +ntb_solver_bias_sbin_load_merge=add +reuse+modify +ntb_solver_bias_sbin_store_merge=add+reuse+modify Allows you to specify how to merge user-defined sample bins of the shared and current runs during distributed merge to the shared record. Usage % simv +ntb_solver_bias_sbin_file=<sbin_file> +ntb_solver_bias_sbin_store_merge=add+reuse+modify Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_shared_record=./shared +ntb_solver_bias_sbin_file=sbin.txt +ntb_solver_bias_sbin_store_merge=add+reuse+modify +ntb_solver_bias_debug_record=<debug_dir> Specify the debug directory where the debug state and RCA information is stored. Usage % simv <run_opt> <ico_run_opt> +ntb_solver_bias_replay=1 +ntb_solver_bias_debug_record=<debug_dir> Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_replay=1 +ntb_solver_bias_debug_record=dir +ntb_solver_bias_debug_replay=1 +ntb_solver_bias_debug_regex=<failure_message> Specify the failure message to scan from the simulation log file. Usage % simv <run_opt> <ico_run_opt> +ntb_solver_bias_replay=1 +ntb_solver_bias_debug_record=<debug_dir> +ntb_solver_bias_debug_regex=<failure_message> Example %simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_replay=1 +ntb_solver_bias_debug_record=dir +ntb_solver_bias_debug_regex=message +ntb_solver_bias_debug_replay=<iteration_number> Specify the iteration number to replay the debug replay. This can be a number between 0 and max iteration. Usage % simv <run_opt> <ico_run_opt> +ntb_solver_bias_replay=1 +ntb_solver_bias_debug_record=<debug_dir> +ntb_solver_bias_debug_regex=<failure_message> +ntb_solver_bias_debug_replay=<iteration_number> Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_replay=1 +ntb_solver_bias_debug_record=dir +ntb_solver_bias_debug_replay=1 +ntb_solver_bias_debug_abort_divergence=<0|1> 0: Do not exit a diverging run (default) 1: Exit a diverging run Usage % simv <run_opt> <ico_run_opt> +ntb_solver_bias_replay=1 +ntb_solver_bias_debug_record=<debug_dir> +ntb_solver_bias_debug_regex=<failure_message> +ntb_solver_bias_debug_replay=<iteration_number> +ntb_solver_bias_debug_abort_divergence=<0|1> Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_replay=1 +ntb_solver_bias_debug_record=dir +ntb_solver_bias_debug_replay=1 +ntb_solver_bias_debug_abort_divergence=1 +ntb_solver_bias_soft_ignore=<0|1|2> 0: Honors all soft constraints 1: Ignores all soft constraints irrespective of whether biasing is ON or OFF 2: Ignores all soft constraints only when biasing is ON Usage % simv +ntb_solver_bias_soft_ignore=<0|1|2> +ntb_solver_bias_soft_ignore_file=<ignoreFile> +ntb_solver_bias_soft_ignoreX_file=<ignoreXFile> +ntb_solver_bias_soft_ignore_dump=<0|1> +ntb_solver_bias_focus_filter=l:h[,l1:h1,l2:h2] +ntb_solver_bias_rca_config=<0|1> Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_soft_ignore=1 +ntb_solver_bias_soft_ignore_file=<ignore.txt> +ntb_solver_bias_soft_ignore_file=<ignoreFile> Restricts ignoring soft constraints to the variables specified in the ignore file. Usage % simv +ntb_solver_bias_soft_ignore=<0|1|2> +ntb_solver_bias_soft_ignore_file=<ignoreFile> +ntb_solver_bias_soft_ignoreX_file=<ignoreXFile> +ntb_solver_bias_soft_ignore_dump=<0|1> +ntb_solver_bias_focus_filter=l:h[,l1:h1,l2:h2] +ntb_solver_bias_rca_config=<0|1> Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_soft_ignore=1 +ntb_solver_bias_soft_ignore_file=<ignore.txt> +ntb_solver_bias_soft_ignoreX_file=<ignoreXFile> Exclude ignoring soft constraints of the variables specified in the ignoreX file. Usage % simv +ntb_solver_bias_soft_ignore=<0|1|2> +ntb_solver_bias_soft_ignore_file=<ignoreFile> +ntb_solver_bias_soft_ignoreX_file=<ignoreXFile> +ntb_solver_bias_soft_ignore_dump=<0|1> +ntb_solver_bias_focus_filter=l:h[,l1:h1,l2:h2] +ntb_solver_bias_rca_config=<0|1> Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_soft_ignore=1 +ntb_solver_bias_soft_ignoreX_file=<ignore.txt> +ntb_solver_bias_soft_ignore_dump=<0|1> 0: Do not dump the soft constraints (default) 1: Dump the soft constraints in a file (<store_record>/record.cdb.softdrop) Usage % simv +ntb_solver_bias_soft_ignore=<0|1|2> +ntb_solver_bias_soft_ignore_file=<ignoreFile> +ntb_solver_bias_soft_ignoreX_file=<ignoreXFile> +ntb_solver_bias_soft_ignore_dump=<0|1> +ntb_solver_bias_focus_filter=l:h[,l1:h1,l2:h2] +ntb_solver_bias_rca_config=<0|1> Example % simv +ntb_solver_bias_mode_auto_config=2 +ntb_solver_bias_soft_ignore=1 +ntb_solver_bias_soft_ignoreX_file=<ignore.txt> +ntb_solver_bias_soft_ignore_dump=1 +ntb_solver_bias_store_record=./record +ntb_solver_bias_mode_isr=<0|1|2|3|4> The Intelligent Simulation Replayer (ISR) helps to replay a simulation in a best-effort case considering design/testbench changes. The resimulation allows you to match the generated stimulus values modulo TB changes. Usage Table 1       ISR Options 0               Default 1               Enables the ISR save feature. 2               Enables the ISR restore feature. 3               Enables the ISR restore feature with save. 4               Enables the ISR restore feature using cache to speed up the subsequent replays. %simv <run_opt> +ntb_solver_bias_mode_isr=<0|1|2|3|4> +ntb_solver_bias_isr_record=<isr_record> +ntb_solver_bias_debug_info=2 +ntb_solver_diff=trace +ntb_solver_debug_dir=<debug_dir> Example % simv1 +ntb_solver_bias_mode_isr=1 +ntb_solver_bias_isr_record=isr_record -l simv.log +ntb_solver_bias_isr_record=<isr_record> Specifies the ISR record where the simulation run information is stored and restored from. It consists of the following files: Table 2       ISR Record Files saved.rdb                        Saves the simulation information (binary file) with +ntb_solver_bias_mode_isr=1. restored.rdb                     Saves the simulation information after restoring from saved.rdb (binary file) with +ntb_solver_bias_mode_isr=3. This file is required with +ntb_solver_bias_mode_isr=4. Table 2       ISR Record Files (Continued) report.txt                    Reports the confidence score of matching values with +ntb_solver_bias_mode_isr=2|3. replayed.map                  Maps the serial numbers of replayed to original with +ntb_solver_bias_mode_isr=3. Usage %simv <run_opt> +ntb_solver_bias_mode_isr=<0|1|2|3|4> +ntb_solver_bias_isr_record=<isr_record> +ntb_solver_bias_debug_info=2 +ntb_solver_diff=trace +ntb_solver_debug_dir=<debug_dir> Example % simv2 +ntb_solver_bias_mode_isr=4 +ntb_solver_bias_isr_record=isr_record -l simv_isr_cache.log 14 Integration Options This section describes the following:"
-vera,Allows you to use Vera with VCS. -vera Allows you to use Vera with VCS. Usage % vcs [compile_options] -vera verilog_filelist filename.v Example % vcs test.v -vera This section describes the following : +vera_load=file.vro Allows you to simulate the .vro file created during compilation. +vera_load=file.vro Allows you to simulate the .vro file created during compilation. Usage % simv [simv_options] +vera_load=file.vro Example % simv +vera_load=dv.vro 15 SystemVerilog Assertions Options This section describes the following:
-assert hier,VCS recommends to use -assert enable_hier in place of -assert enable_diag. The following runtime assertion options can be enabled at runtime if -assert enable_hier is passed because it does not have any performance overhead. -assert hier -assert maxfail=N -assert finish_maxfail=N
-assert,"VCS supports automatic variables in the sampled system auto_var_in_sampled           function calls like $sampled, $past, $rose, $fell, and $changed in procedural context. | enable_diag success -assert | Terminate the simulation if the total number of failures from all global_finish_maxfail=N        SVAs reaches N. | VCS calls the $error task if an assert statement fails and else error_default_action_bl        clause is not specified. ock"
-assert vacuous,reporting of vacuous successes and failures.
-assert hier=<filename>,Enables or disables assertions during runtime. You can use the of assertions in the specified file. | Enables or disables the assertions during runtime.
-Xova,It is used to compile both the case pragmas and assertions. assertions.
-assert failonly,Fail-only is an assertion evaluation mode by which VCS provides an optional optimization controlled by the -assert mode for concurrent assertions.
-assert allow_antec_x,VCS enables the feature to treat x as TRUE while evaluating the antecedent of assertions using the -assert
-assert svvunit,VCS supports using SystemVerilog and SystemVerilog Assertions inside a Property Specification Language (PSL) verification unit (vunit).
-assert disable_flush,"To flush off all these assertion re-trigger feature, you can use | VCS flushes off all the assertions that are re-triggered."
-assert svaext,enable the IEEE Std. 1800-2012 compliant SVA features.
-assert checker,"To enable the checker endchecker construct, you must use"
-assert typed_formal,"When datatype of actual expression and formal expression is not same, VCS adds the support for all the integral datatype (such as int, integer, packed struct, packed vector) except enumeration type and anonymous packed struct, using the"
-assert no_seqdebug,"VCS stops the sequence debugging even with +vpi using following options: • -assert vpiSeqFail • -assert vpiSeqBeginTime -assert enable_diag • -assert success • -assert summary • -assert maxcover=N • -assert maxsuccess=N Usage vcs -sverilog <filename> -assert enable_diag Examples vcs -sverilog test.sv -assert enable_diag -assert enable_hier hier=file.txt[-] hier=file.txtassert -assert assertions on or off. Usage vcs -sverilog -assert enable_hier <filename> [other_compile_options] Examples vcs -sverilog -assert enable_hier test.sv -assert hier VCS recommends to use -assert enable_hier in place of -assert enable_diag. The following runtime assertion options can be enabled at runtime if -assert enable_hier is passed because it does not have any performance overhead. -assert hier -assert maxfail=N -assert finish_maxfail=N Usage vcs -sverilog -assert hier <filename> [other_compile_options] Examples vcs -sverilog -assert hier test.sv -assert dumpoff Disables dumping of SVA information in the VPD file during simulation. Usage vcs -sverilog -assert dumpoff <filename> [other_compile_options] Examples vcs -sverilog -assert dumpoff test.sv -assert auto_var_in_sampled VCS supports automatic variables in the sampled system function calls like $sampled, $past, $rose, $fell, and $changed in procedural context. Usage vcs -sverilog -assert auto_var_in_sampled [other_compile_options] <filename> Examples vcs -sverilog -assert auto_var_in_sampled test.sv -assert vacuous and failures. Usage vcs -sverilog -assert vacuous <filename> [other_compile_options] Examples vcs -sverilog -assert vacuous test.sv -assert disable disable only the SVAs specified in a file, use the -assert hier=<filename> compile-time Usage vcs -sverilog -assert disable <filename> [other_compile_options] Examples vcs -sverilog -assert disable test.sv -assert hier=<filename> Enables or disables assertions during runtime. You can use the -assert Usage vcs -sverilog -assert hier=<filename> <filename> [other_compile_options] Examples vcs -sverilog -assert hier=test.txt test.sv -assert disable_cover for coverage, and write an assertion coverage database during simulation. Usage vcs -sverilog -assert disable_cover <filename> [other_compile_options] Examples vcs -sverilog -assert disable_cover test.sv -assert disable_assert Disables the property checks (assert and assume directives) and retains assertion coverage (cover directives). Usage vcs -sverilog -assert disable_assert <filename> [other_compile_options] Examples vcs -sverilog -assert disable_assert test.sv -assert funchier Enables the new function naming convention. Usage vcs -sverilog -assert funchier+svaext <filename> Examples vcs -sverilog -assert funchier+svaext test.sv –ova_enable_case Enable compilation of OVA case pragmas. Enables the compilation of OVA case pragmas pragmas are ignored. -Xova –ova_inline compile both the case pragmas and assertions. Usage vcs -sverilog -ova_enable_case <filename> [other_compile_options] Examples vcs -sverilog -ova_enable_case test.sv -Xova the case pragmas and assertions. Usage vcs -sverilog -Xova <filename> [other_compile_options] Examples vcs -sverilog -Xova test.sv –ova_inline both the case pragmas and assertions. Usage vcs -sverilog -ova_inline <filename> [other_compile_options] Examples vcs -sverilog -ova_inline test.sv -assert offending_values the values of all variables used in the assertion failure messages. Usage vcs -sverilog -assert offending_values <filename> [other_compile_options] Examples vcs -sverilog -assert offending_values test.sv -assert failonly Fail-only is an assertion evaluation mode by which VCS provides an optional optimization mode for concurrent assertions. Usage vcs -sverilog -assert failonly <filename> [other_compile_options] Examples vcs -sverilog -assert failonly test.sv -assert allow_antec_x VCS enables the feature to treat x as TRUE while evaluating the antecedent of assertions Usage vcs <filename> -sverilog -assert allow_antec_x Examples vcs test.sv -sverilog -assert allow_antec_x -assert svvunit VCS supports using SystemVerilog and SystemVerilog Assertions inside a Property Specification Language (PSL) verification unit (vunit). Usage vcs -assert svvunit <filename> <design_filename> \ <vunit_filename> Examples vcs -assert svvunit test.sv design.v -assert success+enable_diag VCS allows you to concatenate the compile-time and runtime assertion options on the compile command-line using the + separator. VCS identifies and appropriately passes these options to compile and runtime, wherever applicable. Concatenating all options simplifies the use model. enable_diag -assert success Usage vcs -sverilog -assert success+enable_diag -R <filename> compile time. Examples vcs -sverilog -assert success+enable_diag -R test.sv -assert disable_flush To flush off all these assertion re-trigger feature, you can use the -assert Usage vcs -sverilog -assert disable_flush <filename> Examples vcs -sverilog -assert disable_flush test.sv -assert svaext compliant SVA features. Usage vcs -sverilog -assert svaext <filename> Examples vcs -sverilog -assert svaext test.sv -assert checker at compile time. Usage vcs -sverilog -assert checker <filename> Examples vcs -sverilog -assert checker test.sv -assert typed_formal When datatype of actual expression and formal expression is not same, VCS adds the support for all the integral datatype (such as int, integer, packed struct, packed vector) except enumeration type and anonymous packed struct, using the -assert Usage vcs -sverilog <filename> -assert typed_formal Examples vcs -sverilog test.sv -assert typed_formal -assert no_seqdebug VCS stops the sequence debugging even with +vpi using the -assert no_seqdebug • -assert vpiSeqFail • -assert vpiSeqBeginTime Usage vcs -sverilog <filename> -assert no_seqdebug +vpi Examples vcs -sverilog test.sv -assert no_seqdebug +vpi This section describes the following:"
-assert finish_maxfail=N,Terminates the simulation if the number of failures for any assertion reaches N.
-assert success,"By default, VCS reports only failures. However, you can use matches, and successes on cover statements in addition to failures."
-assert summary,VCS allows you to view the assertion success count with
-assert maxsuccess=N,Limits the maximum number of successes reported.
-assert maxcover=N,"To stop collecting coverage for multiple times and to stop the simulation if the assertions fail, you can use the -assert"
-assert report=<filename>,Generates a report file.
-assert enable_wildcard,Enable assertion control using wildcard characters.
-assert dumpsuccess,Enables dumping of the SystemVerilog assertion success messages to the VPD file. –assert                        Disables the default messages during runtime. no_default_msg[=SVA|OVA|P SL]
-assert quiet,Disables the display of messages when assertions fail.
-assert quiet1,Disables messages and prints the summary at the end. The -assert quiet and -assert quiet1 options are applicable to SVA only. termination of simulation: –ova_enable_case_maxfail       Includes OVA case violations in computation of global failure
-assert skip_success_cb,You can disable the success and attempts callbacks on assertions using the -assert skip_success_cb runtime skip_success_cb generating only the failure callbacks.
-suspend_boundscheck,suppressing the run-time out of bound access messages using
-assert errmsg,message along with the assertion failure message.
-assert novpi,"Disables all vpi based callback access for assertions and debug overhead, when the design is compiled with higher debug capabilities."
-assert dbgopt,"Enables the assertion optimization in the presence of higher for runtime performance. All the optimizations that are not part of the full debug flow are enabled under this switch. When this when the design is compiled with -debug_access+f or CLI level greater than 2 or -debug_access+all. You can enable success dumping by giving the switch -assert dumpsuccess at runtime, which can potentially degrade runtime performance."
-assert dbgopt=N,"Creates groups of N assertions with non-temporal expressions under the same clock, thereby localizing the evaluation of such assertions due to changes in a smaller set of signals."
-assert disable=<value>,"Disables the concurrent, immediate, and deferred assertions in a particular design. The options for <value> can be concurrent, deferred, and immediate."
-assert noDefSuccRpt,"Improves the performance of deferred assertions during capabilities are used, VCS tracks both successes and failures, therefore results in reduced runtime performance. When this switch is used, VCS tracks only failures of deferred assertions and drops the successes. This improves the performance because successes happen more frequently. This -debug_access switch."
-assert nocovdb,The -assert nocovdb switch can be used to disable the recording of assertion results in the coverage database.
-assert nopostproc,"display of the SystemVerilog assert and cover statement summary at the end of simulation. -assert finish_maxfail=N Terminates the simulation if the number of failures for any assertion reaches N. Usage simv -assert finish_maxfail=N Examples simv -assert finish_maxfail=5 -assert global_finish_maxfail=N Terminate the simulation if the total number of failures from all SVAs reaches N. Usage simv -assert global_finish_maxfail=N Examples simv -assert global_finish_maxfail=5 -assert success to enable reporting of successful matches, and successes on cover statements in addition to failures. Usage vcs -sverilog <filename> -assert enable_diag simv -assert success Examples vcs -sverilog test.v -assert enable_diag simv -assert success -assert summary Usage vcs -sverilog <filename> -assert enable_diag simv -assert summary Examples vcs -sverilog test.v -assert enable_diag simv -assert summary -assert maxsuccess=N successes to N. Usage simv -assert maxsuccess=N Examples simv -assert maxsuccess=5 -assert maxcover=N To stop collecting coverage for multiple times and to stop the simulation if the assertions collection of coverage information for cover statements after the cover statements are covered N number of times. N must be a positive integer, it cannot be 0. Additionally, you number of failures for any assertion reaches N. Usage simv -assert maxcover=N Examples simv -assert maxcover=5 -assert hier=<filename> assertions in the specified file. Usage simv -assert hier=<filename> Examples simv -assert hier=test.txt -assert report=<filename> specified name. Usage simv -assert report=<filename> Examples simv -assert report=test.txt -assert enable_wildcard control through wildcard characters. For example, $assertoff(0,""Top.AL.*.A1""). Usage simv -assert enable_wildcard Examples simv -assert enable_wildcard -assert dumpsuccess Enables dumping of the SystemVerilog assertion success messages to the VPD file Usage simv -assert dumpsuccess Examples simv -assert dumpsuccess –assert no_default_msg[=SVA|OVA|PSL] messages for SVA assertions that contain a fail action block, and OVA and PSL assertions that contain user messages. The -assert no_default_msg=OVA and -assert no_default_msg=PSL options affect both OVA and PSL assertions, but not SVA. Usage simv -assert no_default_msg[=SVA|OVA|PSL] Examples simv -assert no_default_msg=SVA simv -assert no_default_msg=OVA simv -assert no_default_msg=PSL -assert quiet assertions fail. Usage simv -assert quiet Examples simv -assert quiet -assert quiet1 Disables messages and prints the summary at the end. The -assert quiet and -assert quiet1 options are applicable to SVA only. Usage simv -assert quiet1 Examples simv -assert quiet1 –assert no_fatal_action fail action blocks from adding up to the global failure count, for the -assert Usage simv -assert global_finish_maxfail=N -assert no_fatal_action Examples simv -assert global_finish_maxfail=1 -assert no_fatal_action –ova_enable_case_maxfail Includes OVA case violations in computation of global failure count for the -assert Usage simv -assert global_finish_maxfail=N -ova_enable_case_maxfail Examples simv -assert global_finish_maxfail=1 -ova_enable_case_maxfail -assert disable_flush VCS flushes off all the assertions that are re-triggered. Usage simv -assert disable_flush Examples simv -assert disable_flush -assert error_default_action_block VCS calls the $error task if an assert statement fails and else clause is not specified. This feature is supported for immediate, deferred, and concurrent assertions. Usage simv -assert error_default_action_block Examples simv -assert error_default_action_block -assert skip_success_cb You can disable the success and attempts callbacks on assertions using the -assert skip_success_cb generating only the failure callbacks. Usage vcs -sverilog -debug_access <filename1.tab, filename2.c, filename.v> Where, filename1.tab and filename2.c files are applicable only for VPI callbacks. simv -assert skip_success_cb Examples vcs -sverilog -debug_access test.sv simv -assert skip_success_cb -suspend_boundscheck Usage vcs -sverilog <filename> -boundscheck -debug_acc simv -suspend_boundscheck Examples vcs -sverilog test.sv -boundscheck -debug_acc simv -suspend_boundscheck -assert errmsg assertion failure message. Usage simv -assert errmsg Examples simv -assert errmsg -assert keyword_argument -assert finish_maxfail options are enabled only when the -assert enable_diag The -assert keyword_argument is used to enable or disable SystemVerilog assertions at runtime. It can be used to specify various options such as enabling assertions in functions, enabling assertions in hierarchies, and enabling or disabling specific assertions based on wildcard matching. The -assert keyword_argument can also be used to enable or disable assertions in specific module instances or hierarchies. Usage simv -assert keyword_argument Examples simv -assert keyword_argument -assert novpi Disables all vpi based callback access for assertions and dumping of assertion. This assertion debug overhead, when the design is compiled with higher debug capabilities. Usage simv -assert novpi Examples simv -assert novpi -assert dbgopt Enables the assertion optimization in the presence of higher debug caps. This compile optimal code for runtime performance. All the optimizations that are not part of the performance when the design is compiled with -debug_access+f or CLI level greater than 2 or -debug_access+all. You can enable success dumping by giving the switch -assert dumpsuccess at runtime, which can potentially degrade runtime performance. Usage simv -assert dbgopt Examples simv -assert dbgopt -assert dbgopt=N Creates groups of N assertions with non-temporal expressions under the same clock, thereby localizing the evaluation of such assertions due to changes in a smaller set of signals. Usage simv -assert dbgopt=N Examples simv -assert dbgopt=2 -assert disable=<value> Disables the concurrent, immediate, and deferred assertions in a particular design. The options for <value> can be concurrent, deferred, and immediate. Usage simv -assert disable=<value> Examples simv -assert disable=2 -assert noDefSuccRpt Improves the performance of deferred assertions during runtime. When the and failures, therefore, results in reduced runtime performance. When this switch is used, VCS tracks only failures of deferred assertions and drops the successes. This improves when the design is compiled without the -debug_access switch. Usage simv -assert noDefSuccRpt Examples simv -assert noDefSuccRpt -assert nocovdb The -assert nocovdb switch can be used to disable the recording of assertion results in the coverage database. This feature allows you to control which assertions are active and VCS records in the coverage database without having to recompile your design. To use this feature, you must have compiled your design with the -assert to control assertions. For example, you can use the +tree module_instance_name entry to enable assertions in the specified module instance and all module instances hierarchically under the instance, or use the -tree module_instance_name entry to disable the assertions in the specified module instance and all module instances hierarchically under the instance. Similarly, you can use other entries to enable or disable specific assertions or modules. Usage simv -assert nocovdb Examples simv -assert nocovdb -assert nopostproc assert and cover statement summary at the end of simulation. Usage simv -assert nopostproc Examples simv -assert nopostproc 16 SystemC Options This section describes the following:"
-sysc=ams,the SystemC designs.
-sysc=incr,"When only the SystemC source code has been modified, the"
-sysc=show_sc_main,(default)               modules on top and Verilog or VHDL instantiated within SystemC.
-sysc=nodep,files. This can speed up the overall compile time.
-sysc=dep (default),"To explicitly enable the dependency check for SystemC source files call of VCS. -sysc Usage %vcs -sysc … Example %vcs -sysc … -sysc=adjust_timeres If the time resolution of SystemC and HDL differs, VCS can also automatically determine the finer time resolution and set it as the simulator’s time scale. To enable this feature, you Usage %vcs -sysc=adjust_timeres Example %vcs -sysc ... -sysc=adjust_timeres ... -sysc=ams executing the VCS elaboration. design with SystemC and AMS. Usage %vcs -sysc=ams Example %vcs -sysc -sysc=ams -sysc -ad=sp.init -sysc=incr used to invoke a partial build. All SystemC source files that are previously compiled with syscan are checked and automatically compiled again if necessary. Finally, the simulation simv is linked again. Usage % vcs -sysc=incr [-full64] [-Mdir=mydir] Example % vcs -sysc=incr -sysc=show_sc_main Usage % vcs -sysc=show_sc_main … Example Following is the sample report: % Printing Inst 'sc_main.SC_TOP.SC_INST_1.VLOG_INST_A' of Verilog module VLOG_BOT -sysc=noshow_sc_main use SystemC on Top internally Usage %vcs -sysc=noshow_sc_main … Example %vcs -sysc=noshow_sc_main … -sysc=nodep By default, VCS does a dependency check for SystemC source files. Even if no source file needs to be recompiled, the check itself takes some time. You can speed up the overall the SystemC source files. This can speed up the overall compile time. Usage % vcs -Mlib=… -sysc=nodep:AA -sysc=dep:BB Example % vcs -sysc=nodep .. -sysc=dep enabled for all the libraries during elaboration and incremental compilation. Usage %vcs -sysc=dep ... Example % vcs -sysc=dep ... This section describes the following:"
-sysc=stacksize,stack size.
-sysc=stackguardsize,stack guard size of all SystemC threads.
-systemcrun,"By default, all command-line arguments are provided to sc_main(), and the VCS simulator kernel. All arguments following -systemcrun are passed to sc_main(). -sysc=stacksize Use the -sysc=stacksize:<value> runtime switch to set the stack size. This is the same switch used to set the stack size for SC_THREADS. Usage % simv -sysc=stacksize:<value> Example simv -sysc=stacksize:1024k -sysc=stackguardsize Usage %simv -sysc=stackguardsize:<value> Example simv -sysc=stackguardsize:100k -sysc=force_vcs_log_on_error The -sysc=force_vcs_log_on_error switch is used to capture messages sent to the SC_REPORT_ERROR. The log file comprises of all the SystemC and DPI messages. Usage % simv -sysc=force_vcs_log_on_error Example % simv -sysc=force_vcs_log_on_error -l simv.log -sysc=enable_multiple_dki_driver_check an error message. The following error message is issued during simulation. Error: (E115) sc_signal<T> cannot have more than one driver:         ... Usage % simv -sysc=enable_multiple_dki_driver_check Example % simv -sysc=enable_multiple_dki_driver_check -sysc=disable_multiple_dki_driver_check E115. Usage % simv -sysc=disable_multiple_dki_driver_check Example % simv -sysc=disable_multiple_dki_driver_check -systemcrun By default, all command-line arguments are provided to sc_main(), and the VCS simulator kernel. All arguments following -systemcrun are passed to sc_main(). Usage % simv -systemcrun Example simv -ucli a b -verilogrun c d -systemcrun e f g 17 Dynamic Test Loading Options This section describes the following:"
-enable_dynamic_tb,Enables Dynamic Test Loading (DTL) flow.
-dynamic_tb,Enables dynamic test compile for DTL. -enable_dynamic_tb Enables dynamic test loading flow. Usage vcs -partcomp DUT <dut_name> -dir=<dir_name> -enable_dynamic_tb Examples vcs -partcomp DUT base_test_pkg -dir=IP_BASE_TEST -enable_dynamic_tb -dynamic_tb Enables dynamic test compile for DTL. Usage % vcs -partcomp test1_pkg -dir= <dir_name> -sharedlib=IP_BASE_TEST -dynamic_tb Examples % vcs -partcomp test1_pkg -dir= IP_TEST1 -sharedlib=IP_BASE_TEST -dynamic_tb This section describes the following:
+dtl_add_pkg,Specifies the name of the test to be loaded dynamically at runtime. +dtl_add_pkg Specifies the name of the test to be loaded dynamically at runtime. Usage % simv +UVM_TEST_NAME=<uvm_test_name> -ucli -i <ucli_cmd_file> +dtl_add_pkg=<test_name> Example % simv +UVM_TEST_NAME=test1 -ucli -i restore.cmds +dtl_add_pkg=IP_TEST1:test1_pkg 18 Mixed Language Design Options • Analysis Options Analysis Options This section describes the following: • Analysis Options for vhdlan • Analysis Options for vlogan Analysis Options for vhdlan This section describes the following analysis options for vhdlan:
-assert psl_in_block,the usage of PSL assertions inside VHDL block statements in vunit.
-f optionsfile,Specifies an optionsfile that expands the vhdlan command-line options.
-full64,Enables compilation in 64-bit mode. | Enables compilation and simulation in 64-bit mode. | Enables simulation in 64-bit mode.
-functional_vital,Specifies generating code for functional VITAL simulation mode.
-help,Prints usage information for vhdlan | Displays usage information for vlogan.
-init_std_logic,"Initializes all uninitialized VHDL signals, ports and variables of the data type STD_LOGIC/STD_ULOGIC (scalar/vector) with a given 9-value. Analysis Options"
-list,"Creates a list filelist file (.lis) containing the VHDL source code of the analyzed files, the names of the analyzed design units, and warning or error messages produced during analysis."
-no_functional_vital,Specifies generating code for full-timing VITAL simulation mode.
-output outfile,Redirects standard output from VCS analysis (that usually goes to the screen) to the file you specify as outfile.
-psl,"If you inline the PSL code, you must compile/analyze it with the | You can include PSL in your design either by inlining the PSL using the //psl or /*psl */ pragmas in Verilog and SystemVerilog, and --psl pragma in VHDL."
-smart_order,identify the file order dependencies internally and then do file-by-file analysis of all VHDL files passed to it.
-sv_opts,"Specifies Verilog options like timescale, +define+macro to “vlog_opts_to_SVAs”            SVAs inlined in your VHDL code."
-sva,Enables SVAs inlined in your VHDL code.
-version,Prints the version number of vhdlan and exits without running analysis.
"-vhdl87, -vhdl93","2008, VHDL 2019, VHDL-87 and VHDL-93 protected type."
-work library,"Maps a design library name to the logical library name WORK, which receives the output of vhdlan. | Specifies creating the VERILOG directory and writing intermediate files in the physical directory associated with this logical library."
+define+macro,Defines a text macro. uted                delays in specify blocks to zero delays.
-fauto,Gives simulation the same semantics as synthesis.
-file filename,Specifies a file that contains a list of path names to source files and required analysis options.
+incdir+directory,Specifies the directories that contain the files you specified with the ‘include compiler directive.
-incr_vlogan,no changes in the following: • source files analyzed by that same command in previous parsing iteration. • imported SV packages referenced at source files analyzed by that command. • command line user options (+define+) or vlogan command options. • shell environments.
-liblist,should search for resolving package references found while analyzing.
-libmap filename,Specifies a library mapping file.
+lint=[no]ID|no,Enables messages that tell you when your Verilog code contains ne|all                 something that is bad style but is often used in designs.
-location,Displays the location of the vlogan installation.
+nowarnTFMPC,Suppresses the “Too few module port connections” warning messages during Verilog Compilation.
-ntb,Enables the use of the OpenVera testbench language constructs.
-ntb_incdir,Specifies the include directory path for OpenVera files. directory_path
-ova_file filename,required if the file name ends with .ova.
-sv_pragma,Analyzes SystemVerilog Assertions that follow the sv_pragma keyword in a single line or multi-line comment.
+systemverilogext+,Specifies a file name extension for SystemVerilog source files. ext Analysis Options
-V[t],Enables warning messages and displays the time used by each command.
-v library_file,Specifies a Verilog library file to search for module definitions. +verilog1995ext+ext Specifies a file name extension for Verilog 1995 files. +verilog2001ext+ext Specifies a file name extension for Verilog 2001 source files.
+warn=[no]ID|no,Uses warning message IDs to enable or disable display of warning ne|all                 messages.
-y,"Specifies a Verilog library directory to search for module definitions. library_directory +define+macro the 'ifdef compiler directive. Usage % vlogan +define+macro <Verilog_source_filename> where, <Verilog_source_filename> specifies the name of the Verilog source file. Example % vlogan +define+macro a.v +delay_mode_distributed to zero delays. Uses only the delay specifications on all gates, switches, and continuous assignments. Analysis Options Usage % vlogan +delay_mode_distributed <Verilog_source_filename> Example % vlogan +delay_mode_distributed a.v +delay_mode_unit zero delays. Overrides all the delay specifications on all gates, switches, and continuous assignments to the shortest time precision argument of all the 'timescale compiler directives in the source code. The default time unit and time precision argument of the 'timescale compiler directive is 1s. Usage % vlogan +delay_mode_unit <Verilog_source_filename> Example % vlogan +delay_mode_unit a.v +delay_mode_zero and module paths. Usage % vlogan ++delay_mode_zero <Verilog_source_filename> Example % vlogan ++delay_mode_zero a.v -extinclude its extension. Usage % vlogan -extinclude <Verilog_source_filename> Analysis Options Example If source file a.v contains the following: `include ""b.sv"" module a(); reg ar; endmodule and if source file b.sv contains the following: module b(); logic ar; endmodule vlogan compiles b.sv for SystemVerilog with the following command line: % vlogan a.v +systemverilogext+.sv -extinclude -f analysis options. You can use Verilog comment characters such as // and /* */ to comment out entries in the file. Usage % vlogan -f <Verilog_source_filename> Example % vlogan -f file1.v -fauto Changes the lifetime of all functions that do not specify an explicit lifetime to automatic. Using -fauto is a best practice because it gives simulation the same semantics as synthesis. Usage % vlogan -fauto <Verilog_source_filename> Example % vlogan -fauto file1.v Analysis Options -file filename analysis options. time options that begin with a minus(-) character. Usage % vlogan -file filename <Verilog_source_filename> Example % vlogan -file filename file1.v -full64 Usage % vlogan -full64 <Verilog_source_filename> Example % vlogan -full64 file1.v -help Usage % vlogan -help <Verilog_source_filename> Example % vlogan -help file1.v Analysis Options -ignore keyword_argument specified. The keyword arguments are as follows: unique_checks Suppresses warning messages about unique if and unique case statements. priority_checks Suppresses warning messages about priority if and priority case statements. all Suppresses warning messages about unique if, unique case, priority if and priority case statements. For more details about the keyword arguments, refer to the The vlogan Utility section in Usage % vlogan -ignore <keyword_argument> <Verilog_source_filename> Example % vlogan -ignore priority_checks file1.v +incdir+directory compiler directive. You can specify more that one directory, separating each path name with the “+” character. Usage % vlogan +incdir+directory Example % vlogan +incdir+directory Analysis Options -incr_vlogan following: • source files analyzed by that same command in previous parsing iteration. • imported SV packages referenced at source files analyzed by that command. • command line user options (+define+) or vlogan command options. • shell environments. Note: If a change is detected, the vlogan command runs from scratch. Usage % vlogan -incr_vlogan Example % vlogan -incr_vlogan You can configure incremental vlogan to ignore certain changes in shell environments using the following commands: % vlogan -incr_vlogan -vts_ignore_env=Env1, Env2,... -l filename Usage % vlogan -l <Verilog_source_filename> Example % vlogan -l file1.v -liblist It specifies the library search order for resolving imported package definitions. The package references found while analyzing. Analysis Options When using multiple vlogan commands with same -work logical library, run the commands sequentially, and if one command uses -liblist, then ensure that all the remaining vlogan commands are using the same -liblist argument list. Refer the Example 2. Usage % vlogan -liblist <Verilog_source_filename> Example 1 % vlogan -liblist file1.v Example 2 %vlogan a.v -work shared_lib -liblist shared_lib+ovm_lib+common_lib %vlogan b.v -work shared_lib -liblist shared_lib+ovm_lib+common_lib %vlogan c.v -work shared_lib -liblist shared_lib+ovm_lib+common_lib +libext+extension+ extensions in a library directory. You can specify more than one extension, separating the extensions with the plus (+) character. For example, +libext+.v+.V+ specifies searching for files with either the .v or .V extension in a library. The order in which you add file name library with these file name extensions. Usage % vlogan +libext+extension+ <Verilog_source_filename> Example % vlogan +libext+extension+ a.v -libmap filename Usage % vlogan -libmap filename <Verilog_source_filename> Analysis Options Example % vlogan -libmap filename file1.v +liborder through the remainder of the library where vlogan finds the instance, then searching the subsequent library on the vlogan command line before searching in the first library in the command line. Usage % vlogan +liborder Example % vlogan +liborder +librescan module instances beginning with the first library in the vlogan command line. Usage % vlogan +librescan Example % vlogan +librescan +lint=[no]ID|none|all that is bad style but is often used in designs. Usage % vlogan +lint=[no]ID|none|all Example % vlogan +lint=[no]ID|none|all Analysis Options -location Usage % vlogan -location <Verilog_source_filename> Example % vlogan -location file1.v -nc Usage % vlogan -nc <Verilog_source_filename> Example % vlogan -nc file1.v -noinherit_timescale compilation unit of any source file that does not have an explicit 'timescale directive. Usage % vlogan -noinherit_timescale <Verilog_source_filename> Example % vlogan -noinherit_timescale=""10ps/1ps"" c.v a.v c.v +nowarnTFMPC during Verilog Compilation. Usage % vlogan +nowarnTFMPC Analysis Options Example % vlogan +nowarnTFMPC -ntb the OpenVera Language Reference Manual: Native Testbench. Usage % vlogan -ntb <Verilog_source_filename> Example % vlogan -ntb file1.v -ntb_define macro multiple macro names using the plus (+) character. Usage % vlogan -ntb_define macro <Verilog_source_filename> Example % vlogan -ntb_define macro file1.v -ntb_filext .ext extensions using the plus (+) character. Usage % vlogan -ntb_filext .ext <Verilog_source_filename> Example % vlogan -ntb_filext .ext file1.v Analysis Options -ntb_incdir directory_path include directories using the plus (+) character. Usage % vlogan -ntb_incdir directory_path <Verilog_source_filename> Example % vlogan -ntb_incdir directory_path file1.v -ova_file filename Usage % vlogan -ova_file <Verilog_source_filename> Example % vlogan -ova_file test.v -override_timescale=time_unit/time_precision directives in the source code and, like -timescale, provides a timescale for all module definitions that do not have a 'timescale compiler directive. Usage % vlogan -override_timescale=time_unit/time_precision <Verilog_source_filename> Example % vlogan -override_timescale=1ns/1ns file1.v file2.v file3.v -p1800_macro_expansion result that is accurate especially for SystemVerilog macros. Analysis Options Usage % vlogan [vlogan_options] test.sv -sverilog -p1800_macro_expansion Example Consider the following test case, test.sv: module top; logic [3:0] addr0_for_bank0='d10; `define VAR(ANUM,BNUM) addr``ANUM``_for_bank``BNUM `define NAME(STR) $display(`""`\`""STR`\`"" is %d\n`"",STR); `define ARG addr0_for_bank0 initial begin `NAME(`VAR(0,0)); `NAME(`ARG) end endmodule following output: ""`VAR(0,0)"" is 10 ""addr0_for_bank0"" is 10 following output: ""addr0_for_bank0"" is 10 ""addr0_for_bank0"" is 10 -psl You can include PSL in your design either by inlining the PSL using the //psl or /*psl */ pragmas in Verilog and SystemVerilog, and --psl pragma in VHDL, or by specifying the PSL in an external file using a verification unit (vunit). Usage usage: % vlogan -psl [vlogan_options] <verilog_file> Example The following examples show how to inline PSL in Verilog using the //psl and /*psl */ pragmas: In Verilog Analysis Options module mod; .... // psl a1: assert always {r1; r2; r3} @(posedge clk); /* psl A2: assert always {a;b} @(posedge clk); ... */ endmodule To simulate the PSL code that is inlined in a mixed design (test.v and dut.vhd), execute the following commands: % vlogan -psl test.v % vhdlan -psl dut.vhd % vcs -psl top % simv -q Usage % vlogan -q <Verilog_source_filename> Example % vlogan -q file1.v -sv_pragma SystemVerilog Assertions code that follow the sv_pragma keyword in a single line or multi- line comment. Usage % vlogan -sv_pragma <Verilog_source_filename> Example % vlogan -sv_pragma file1.v -sverilog Analysis Options Usage % vlogan -sverilog <Verilog_source_filename> Example % vlogan -sverilog file.v +systemverilogext+ext SystemVerilog LRM (IEEE Std 1800-2012) rules for all the source files on the vcs command line and not only the files with the specified extension. If you use a different file Usage % vlogan +systemverilogext+ext <Verilog_source_filename> Example % vlogan +systemverilogext+ext file.v -timescale=time_unit/time_precision 'timescale compiler directive and precede the source files that do. Usage % vlogan -timescale=time_unit/time_precision <Verilog_source_filename> Example % vlogan -timescale=1ns/1ns file1.v file2.v file3.v -u Usage % vlogan -u <Verilog_source_filename> Analysis Options Example % vlogan -u a.v -V[t] Usage % vlogan -V[t] <Verilog_source_filename> Example % vlogan -V[t] a.v -v library_file Usage % vlogan -v <library_file> <Verilog_source_filename> Example % vlogan -v library_file a.v +verilog1995ext+ext you to write Verilog 1995 code that would be invalid in Verilog 2001 or SystemVerilog code, such as using Verilog 2001 or SystemVerilog keywords, like localparam and logic, as names. Usage % vlogan +verilog1995ext+ext <Verilog_source_filename> Example % vlogan +verilog1995ext+ext file.v Analysis Options +verilog2001ext+ext Usage % vlogan +verilog2001ext+ext <Verilog_source_filename> Example % vlogan +verilog2001ext+ext file.v +warn=[no]ID|none|all Usage % vlogan +warn=[no]ID|none|all Example In the following warning message, the text string TFIPC is the message ID: Warning-[TFIPC] Too few instance port connections The following is the command for the above warning: % vlogan +warn=[no]ID|none|all,... -work library Maps a design library name to the logical library name WORK that receives the output of another library name in the setup file. Usage % vlogan -work <library> Example % vlogan -work libname1 Analysis Options -y library_directory looks in the source files in this directory for definitions of the module and UDP instances that VCS found in your source code. However, for which it did not find the corresponding module or UDP definitions in your source code. VCS looks in this directory for a file with the same name as the module or UDP identifier in the instance (not the instance name). If it finds this file, VCS looks in the file for the module or UDP definition to resolve the instance. Note: If you have multiple modules with the same name in different libraries, VCS Usage % vlogan -y <library_directory> Example If rev1/cell.v and rev2/cell.v and rev3/cell.v all exist and define the module cell(), and you issue the following command: % vlogan -y rev1 -y rev2 -y rev3 +libext+.v top.v VCS selects cell.v from rev1. However, if the top.v file has a `uselib compiler directive as shown below, then `uselib takes priority. //top.v `uselib directory = /proj/libraries/rev3 //rest of top module code //end top.v In this case, VCS uses rev3/cell.v when you issue the following command: % vlogan -y rev1 -y rev2 +libext+.v top.v want VCS to search for in these directories. This section describes the following:"
-debug_access,Enables the required debug capabilities in a simulation.
+dumpports+mxccn,Dumps CCN drivers when a target VHDL instance lies inside a VHDL connected through INOUT ports. | Dumps CCN drivers.
-f filename,Specifies a file that contains a list of path names to source files and required analysis options.
-help or -h,Lists descriptions of the most commonly used VCS compile and
-metadump,"Extracts the Extensible Markup Language (XML) files, which are required to create the top module"
-notice,Enables verbose diagnostic messages.
+optconfigfile,Specifies all the instances for which the UCLI dump command may be used to dump EVCD.
-sva_bind_enable,Tells VCS to bind the bind statements in a module with the design.
-memcbk,"-memcbk multidimensional arrays (MDAs). By default, -debug_access enables callbacks for memories and MDAs. reverse designer • Read and write for both variables and nets • PLI and value change callbacks and line callback • FSDB/VPD dumping capability • Debugging or dumping of cell ports • Class and thread debugging (no SystemVerilog Testbench debugging) • Driver debugging -debug_region+cellports. simulation mismatches. • Class and thread debugging (no SystemVerilog Testbench debugging) • Driver debugging simctrl • Class and thread debugging (no SystemVerilog Testbench debugging) • Driver debugging Line stepping • PLI and value change callbacks • Assertion control (not assertion dumping) • FSDB/VPD dumping capability is equivalent to:-debug_access+r+cbk+assert_c. • Class and thread debugging (no SystemVerilog Testbench debugging) • Driver debugging • Line stepping verbose          Reports the summary of all the -debug_access and -debug_region options verbose passed to the VCS command line. idents_db        Allows you to build the database at compile time for Verdi One Search. idents_so        Enables searching inside the shared libraries. Usage % vcs -debug_access(+<option_name>)* Example % vhdlan test.vhd % vlogan test1.v % vcs top -debug_access+r+cbk +dumpports+mxccn The Extended Value Change Dump (EVCD) file contains the CCN driver when the CCN is connected through INPUT or OUTPUT ports in Verilog-VHDL or VHDL-Verilog mixed designs. However, if a target VHDL instance lies inside a VHDL connected through INOUT Usage % vhdlan <design files> % vlogan <design file> +dumpports+mxccn Example In the following example, both testbench and DUT have VHDL and the design is mixed (VHDL and Verilog). The Verilog design has CCN which is connected to VHDL through the INOUT ports. % vhdlan <design files> % vlogan <design file> % vcs +optconfigfile+file_name.cfg -debug_access+r+cbk+drivers top_module +dumpports+mxccn -f filename analysis options. You can use Verilog comment characters such as // and /* */ to comment out entries in the file. Usage % vcs -f <source_filename> Example % vcs -f file1.v -force_list language forces/releases. Usage Example % vlogan -sverilog test_2.v % vhdlan test.vhd % vcs ex2_vhtop -debug_access+r+cbk filename.v -force_list -full64 Usage % vcs -full64 <filename_list> Example Run the example using the following commands: % vhdlan -full64 test.vhd % vlogan -full64 test.v % vcs top -full64 -gfile through a file for both Verilog and VHDL respectively. You must specify the file name, which contains the list of all generics and parameters that should be overridden, with the Usage % vcs top_level_entity_or_module -gfile parameters_or_generics_file other_options Example % vcs vh_top -gfile overrides.txt -gv|-gvalue specified in the command line. Usage % vcs test -gv Example % vhdlan test.vhd -vhdl08 % vcs test -gv size=16 %./simv -help or -h Usage % vcs -help or % vcs -h Example % vcs -help -ID Returns useful information, such as VCS version and build date, VCS compiler version (same as VCS), and your work station name, platform, and host ID (used in licensing). Usage % vcs -ID Example % vcs -ID -l filename VCS records messages from both elaboration and simulation in the same file. Usage % vcs -l <filename> Example % vcs -l log -metadump To extract the Extensible Markup Language (XML) files, which are required to create the Usage % vlogan <analyze_options> <source_file> % vcs -metadump <design_top> Example % vhdlan not_used.vhd % vlogan vllogic.v % vlogan vltop.v % vhdlan vhnet.vhd % vcs vltop -metadump % simv VCS generates the verilogMetadata.xml file for the Verilog code and the vhdlMetadata.xml file for the VHDL code, which can be accessed from the current working directory. -nc Usage % vcs -nc <filename_list> Example % vcs -nc top -notice This command enables verbose diagnostic messages. Usage % vcs -notice +optconfigfile To dump an Extended Value Change Dump (EVCD) file for mixed design flows, it is to specify all the instances for which the UCLI dump command may be used to dump EVCD. Usage <design_filename> Example % vcs +optconfigfile+file_name.cfg -debug_access+r+cbk+drivers file_name.v Where, file_name.cfg is the configuration file which allows you to specify the instances that needs to be dumped at compile time. -param_override=dont_report generic override messages in stdout and the compile log file. Usage % vcs <design_files> -pvalue|-gfile|-gv|-g -param_override=dont_report Example %vcs -sverilog t.v -pvalue P=10 -param_override=dont_report -psl You can include PSL in your design either by inlining the PSL using the //psl or /*psl */ pragmas in Verilog and SystemVerilog, and -psl pragma in VHDL, or by specifying the PSL in an external file using a verification unit (vunit). Usage is the usage: % vcs -psl [vcs_options] Verilog_files % vlogan -psl [vlogan_options] <verilog_file> % vhdlan -psl [vhdlan_options] <VHDL_file> Example The following examples shows how to inline PSL in Verilog using the //psl and /*psl */ pragmas, and in VHDL using the -psl pragma. In Verilog module mod; .... // psl a1: assert always {r1; r2; r3} @(posedge clk); /* psl A2: assert always {a;b} @(posedge clk); ... */ endmodule In VHDL USE ieee.std_logic_1164.all; entity vh_ent is ... end vh_ent; architecture arch_vh_ent of vh_ent is ... -- psl default clock is (clk'event and clk = '1'); -- psl sequence seq1 is {in1;[*2];test_sig}; -- psl property p1 is -- (never seq1); -- psl A1: assert p1 report "" : Assertion failed P1""; end arch_vh_ent; To simulate the PSL code that is inlined in a mixed design (test.v and dut.vhd), execute the following commands: % vlogan -psl test.v % vhdlan -psl dut.vhd % vcs -psl top % simv The following examples show how to use vunit to include PSL in the design. In Verilog vunit vunit1 (verilog_mod) { a1: assert always {r1; r2; r3} @(posedge clk); } In VHDL vunit test(vh_entity) { default clock is (clk'event and clk = '1'); property foo is always ({ a = '0'} |=> {(b = prev(b) and c = prev(c))}); assume foo; } To simulate both the PSL code inlined in a VHDL file (test.vhd), and the vunit specified in an external file (checker.psl or checker.txt), execute the following commands: % vhdlan -psl test.vhd checker.psl % vcs -psl top % simv or % vhdlan -psl test.vhd -pslfile checker.txt % vcs -psl top % simv -pvalue vcs command line. Usage % vcs -pvalue+hierarchical_name_of_parameter= value Example % vcs source.v -pvalue+test.d1.param1=33 -q Quiet mode; suppresses messages, such as those about the C compiler VCS is using, the source files VCS is parsing, the top-level modules, or the specified timescale. Usage % vcs -q Example % vhdlan -vhdl08 -nc example3.vhd % vlogan -sverilog -nc example3.v % vcs top -nc -q % ./simv -R This command runs the executable file immediately after VCS links it together. Usage % vcs -R <source_filename> Example To run the example, use the following commands: % vhdlan -vhdl08 test.vhd % vcs top -R -sva_bind_enable specify the module containing the required bind statements during elaboration along with your design top module/entity/configuration. Usage % vcs -sva_bind_enable <design_top/module/entity> [elab_options] Example Analyze all Verilog files and bind files using vlogan, and VHDL files using vhdlan. % vlogan [vlogan_options] Verilog_files % vlogan -sverilog [vlogan_options] Bind_files % vhdlan [vhdlan_options] VHDL_files Specify the module containing the required bind statements during elaboration along with your design top module/entity/configuration: % vcs -sva_bind_enable design_top bind_a [elab_options] The above command line elaborates and links the design, and the specified bind module, -sva_bind_enable tells VCS to bind the bind statements in bind_a with the design. -V Verbose mode; compiles verbosely. The compiler driver program prints the commands it executes as it runs the C compiler, assembler, and linker. Usage % vcs <file1.v> -v <file2.v> -v <file3.v> Example % vcs top.v -v 1.v -v 2.v This section describes the following : | -memcbk multidimensional arrays (MDAs). By default, -debug_access enables callbacks for memories and MDAs. reverse designer • Read and write for both variables and nets • PLI and value change callbacks and line callback • FSDB/VPD dumping capability • Debugging or dumping of cell ports • Class and thread debugging (no SystemVerilog Testbench debugging) • Driver debugging -debug_region+cellports. simulation mismatches. • Class and thread debugging (no SystemVerilog Testbench debugging) • Driver debugging Table 4         Supported Options of -debug_access (Continued) simctrl • Class and thread debugging (no SystemVerilog Testbench debugging) • Driver debugging Line stepping • PLI and value change callbacks • Assertion control (not assertion dumping) • FSDB/VPD dumping capability is equivalent to:-debug_access+r+cbk+assert_c. • Class and thread debugging (no SystemVerilog Testbench debugging) • Driver debugging • Line stepping verbose         Reports the summary of all the -debug_access and -debug_region options verbose passed to the VCS command line. idents_db       Allows you to build the database at compile time for Verdi One Search. idents_so       Enables searching inside the shared libraries. The following assertion debug options are supported with -debug_access: Table 5         Assertion Debug Options of -debug_access"
-g|-generics,Overrides the default values for the design generics by using values from the file cmdfile.
-mx_force,"Supports force and release on VHDL objects with native Verilog XMRs without debug capabilities. -force_list an ASCII text file containing information about the forces/deposits/releases applied during the simulation in the time order. Usage % simv -force_list <filename> Where, <filename> is the user-defined ASCII file name. It can be a relative path or absolute path. Compression is disabled by default. Example % simv -force_list report.log -force_list_compress the gzip compression. The log file is saved with the same name, but changes its filename extension by appending .gz at the end of it. Usage % simv -force_list <filename> -force_list_compress Example % simv -force_list report.log -force_list_compress -full64 Usage % simv -full64 <VHDL_filename_list> Example % simv -full64 test.vhd -g|-generics Overrides the default values for the design generics by using values from the file cmdfile. The cmdfile file is an include file that contains assign commands targeting design generics. Usage % simv -g <generics_file> Example % simv -g cmd.file -gv|-gvalue specified in the command line during runtime. Usage % simv -gv generic_name=value or % simv -gvalue generic_name=value Example library ieee; use ieee.std_logic_1164.all; entity test is generic ( size : integer:= 8; left : integer:= size-1; right : natural := 0 ); port ( A : in bit_vector(left downto right) ); end test; architecture arch of test is begin L1: process begin report to_string(size); report to_string(left) & "" "" & to_string(right); report to_string(A); end process L1; end arch; To override at runtime, execute the following commands: % vhdlan test.vhd -vhdl08 % vcs test -debug_access+all -lca % ./simv -gv size=16 -mx_force VCS supports force and release on VHDL objects with native Verilog XMRs without debug Usage % simv -mx_force Example % vhdlan -full64 test.vhd % vlogan -full64 test.v % vcs -full64 top % simv -mx_force 19 SAIF Options This section describes the following : This section describes the following :"
-P $VPOWER_TAB $VPOWER_LIB,Enables you to switch to the old flow of dumping SAIF files with the PLI. -P $VPOWER_TAB $VPOWER_LIB VCS has native SAIF support so you no longer need to specify any compile-time options with the PLI. Usage % vcs -P $VPOWER_TAB $VPOWER_LIB This section describes the following :
-saif_opt,"Reduces the overhead due to SAIF file dumping. -saif_opt Reduces the overhead due to SAIF file dumping. You can specify one or more options toggle_start_at_set_region toggle_start_at_set_region toggle_stop_at_toggle_report toggle_stop_at_toggle_report skip_celldefine_scopes skip_celldefine_scopes `celldefine compiler directive or are resolved using -v and -y options. Usage % simv [simv_options] -saif_opt+option1+option2+... Example Consider the following example: `timescale 1ns/1ns module top; wire w; bot b(w); initial begin #5 $set_gate_level_monitoring(""rtl_on""); $set_toggle_region(b); #95 $toggle_stop; $toggle_report(""1.saif"", 1e-9, b); $finish; end endmodule module bot(output reg p); initial begin #20 p = 1'b1; #20 p = 1'b0; #20 p = 1'b1; #20 p = 1'b0; end endmodule To run the example, use the following commands: % vcs -sverilog 1.v % simv -saif_opt+toggle_start_at_set_region It generates the following output: /** The set_gate_level_monitoring command explicitly turns ON the internal nets monitoring **/ (SAIFILE (SAIFVERSION ""2.0"") (DIRECTION ""backward"") (DESIGN) (VERSION ""1.0"") (DIVIDER / ) (TIMESCALE 1 ns) (DURATION 95.00) (INSTANCE top (INSTANCE b (NET (p (T0 40) (T1 40) (TX 15) (TC 3) (IG 0) ) ) ) ) ) 20 Encryption Options This section describes the following:"
-ipprotect,Tells VCS to encrypt the specified Verilog or SystemVerilog protection_header_file        source files according to the “IEEE Std 1364-2005” standard for encryption envelopes.
-ipopt=partialprotect,VCS in encryption mode encrypt files which are included by the`include compiler directive.
-ipopt=noincludeprotect,VCS in encryption mode encrypt files which are included by the`include compiler directive.
-ipopt=ext=<ext>,files.
-ipout filename.ext,Tells VCS to write the encrypted file for the first Verilog or SystemVerilog source file on the command line with the specified filename and extension.
-protect128,creates a new file with the .vp extension for each Verilog file specified in the command line.
-putprotect128,"By default, the encrypted .vp file is saved in the same directory as the source files. You can change this location by using the"
-autoprotect128,"For Verilog and VHDL files, VCS encrypts the module port list (or UDP terminal list) along with the body of the module (or UDP)."
-auto2protect128,"For Verilog and VHDL files, VCS encrypts only the body of the module or UDP. It does not encrypt port lists or UDP terminal lists."
-auto3protect128,that VCS does not encrypt parameters preceding the ports declaration in a Verilog module.
+autoprotect,Creates a protected source file; all modules are encrypted.
+auto2protect,Creates a protected source file that does not encrypt the port connection list in the module header; all modules are encrypted.
+auto3protect,Creates a protected source file that does not encrypt the port connection list in the module header or any parameter declarations that precede the first port declaration; all modules are encrypted.
+deleteprotected,Allows overwriting of existing files when doing source protection.
+protect,Creates a protected source file by only encrypting `protect/`endprotect regions.
+pli_unprotected,Enables PLI and UCLI access to the modules in the protected source file being created.
+object_protect,Debugs the partially encrypted source code.
+sdfprotect,Creates a protected SDF file.
+putprotect,Specifies the target directory for protected files.
-Xman=1,"Randomly changes names and identifiers, and removes comments, to provide more secure code."
-Xman=4,"Preserves variable names, but removes comments."
-Xman=12,"Does the same thing as -Xman=4, but also enters, in comments, the original source file name and the line number of each module header."
-Xman=28,"Does the same thing as -Xman=12, but also writes at the the original source file."
-Xnomangle,"Specifies module definitions whose module and port identifiers -ipprotect protection_header_file Tells VCS to encrypt the specified Verilog or SystemVerilog source files according to the “IEEE Std 1364-2005” standard for encryption envelopes. In this encryption mode, VCS does not compile the Verilog or SystemVerilog source files, but instead encrypts each source file into a separate encrypted Verilog or SystemVerilog file. Each encrypted file is saved under the same filename, but changes its filename extension to .vp. specified on the vhdlan command line according to the IEEE VHDL Standard 1076-2008 for encryption envelopes. Usage % vcs <design_file> -ipprotect protection_header_file For VHDL 1076-2008 encryption: % vhdlan -ipprotect protection_header_file <VHDL_file_list> Example % vcs -ipprotect toolkeys example.v % vhdlan -ipprotect toolkeys /src/dir/ipmod1.vhd \ package5.vhdl -ipopt=partialprotect by the pragmas `pragma protect begin and `pragma protect end in the Verilog or SystemVerilog source files. Usage % vcs <design_file> -ipprotect protection_header_file -ipopt=partialprotect Example % vcs -ipprotect toolkeys -ipopt=partialprotect example.v -ipopt=noincludeprotect VCS in encryption mode encrypt files which are included by the`include compiler directive. included by it. Usage % vcs <design_file> -ipprotect protection_header_file -ipopt=noincludeprotect Example % vcs -ipprotect toolkeys -ipopt=noincludeprotect example.v -ipopt=ext=<ext> Usage % vcs <design_file> -ipprotect protection_header_file -ipopt=ext=<ext> Example % vcs -ipprotect toolkeys -ipopt=ext=de example.v -ipopt=outdir=dir Usage % vcs <design_file> -ipprotect protection_header_file -ipopt=outdir=<dir> Example % vcs -ipprotect toolkeys -ipopt=outdir=dev example.v -ipout filename.ext source file on the command line with the specified filename and extension. You can enter a pathname for the protected file. command line, and does not work for other source files on the command line or files included with the ‘include compiler directive or in Verilog libraries Usage % vcs <design_file> -ipprotect protection_header_file -ipopt=<filename.ext> Example % vcs -ipprotect toolkeys -ipopt=encrypt.enc example.v -ipopt=overwrite Usage % vcs <design_file> -ipprotect protection_header_file -ipopt=overwrite Example % vcs -ipprotect toolkeys -ipopt=overwrite example.v -protect128 the .vp extension for each Verilog file specified in the command line. You must enclose the Verilog code that you want to encrypt between the 'protect128 and the 'endprotect128 compiler directives. Usage % vcs <design_file> -protect128 Example % vcs -protect128 foo.v -putprotect128 By default, the encrypted .vp file is saved in the same directory as the source files. You Usage % vcs <design_file> -putprotect128 <dir_name> Example % vcs -putprotect128 ./out -protect128 foo.v VCS creates a protected file in the specified directory. The './out/foo.vp' protected file is created. -autoprotect128 For Verilog and VHDL files, VCS encrypts the module port list (or UDP terminal list) along with the body of the module (or UDP). Usage % vcs <design_file> -autoprotect128 Example % vcs -autoprotect128 example.v -auto2protect128 For Verilog and VHDL files, VCS encrypts only the body of the module or UDP. It does not module or UDP header statement. Usage % vcs <design_file> -auto2protect128 Example % vcs -auto2protect128 example.v -auto3protect128 parameters preceding the ports declaration in a Verilog module. Usage % vcs <design_file> -auto3protect128 Example % vcs -auto3protect128 example.v +autoprotect Creates a protected source file; all modules are encrypted. Usage % vcs <design_file> +autoprotect Example % vcs +autoprotect example.v +auto2protect Creates a protected source file that does not encrypt the port connection list in the module header; all modules are encrypted. Usage % vcs <design_file> +auto2protect Example % vcs +auto2protect example.v +auto3protect Creates a protected source file that does not encrypt the port connection list in the module header or any parameter declarations that precede the first port declaration; all modules are encrypted. Usage % vcs <design_file> +auto3protect Example % vcs +auto3protect example.v +deleteprotected Allows overwriting of existing files when doing source protection. Usage % vcs <design_file> +deleteprotected Example % vcs +deleteprotected example.v +protect Creates a protected source file by only encrypting `protect/`endprotect regions. Usage % vcs <design_file> +protect Example % vcs +protect example.v +pli_unprotected Allows you to disable the processing of the `include compiler directive and files included by it. created (PLI and UCLI access is normally disabled for protected modules). Usage % vcs <design_file> <compile_options> +pli_unprotected Example % vcs +protect +pli_unprotected example.v +object_protect Debugs the partially encrypted source code. Usage % vcs <design_file> <compile_options> +object_protect Example % vcs +protect +object_protect example.v +sdfprotect Creates a protected SDF file. Usage % vcs <design_file> +sdfprotect Example % vcs +sdfprotect example.v +putprotect Specifies the target directory for protected files. Usage % vcs <design_file> <compile_options> +putprotect+<target_dir_name> Example % vcs -sverilog +autoprotect +putprotect+$cwd/out testfile.v -Xman=1 Randomly changes names and identifiers, and removes comments, to provide more secure code. Usage % vcs <design_file> -Xman=1 Example % vcs -Xman=1 example.v -Xman=4 Preserves variable names, but removes comments. Usage % vcs <design_file> -Xman=4 Example % vcs -Xman=4 example.v -Xman=12 Does the same thing as -Xman=4, but also enters, in comments, the original source file name and the line number of each module header. Usage % vcs <design_file> -Xman=12 Example % vcs -Xman=12 example.v -Xman=28 Does the same thing as -Xman=12, but also writes at the bottom of the file comprehensive Usage % vcs <design_file> -Xman=28 Example % vcs -Xman=28 example.v -Xnomangle Specifies module definitions whose module and port identifiers VCS does not change. You Usage % vcs <design_file> -Xnomangle Example % vcs -Xnomangle example.v 21 VCS Fine-Grained Parallelism (FGP) Technology Options This section describes the following:"
-fgp,two-step flow and three-step flow. Note:
-fgp=multisocket,"thread takes into consideration the socket that is running the thread. -fgp FGP is supported in both VCS two-step and three-step flows. runtime, you need to specify the number of cores that you want to utilize for the parallel engines. So, if you specify 12 threads for the parallel engines and run the Unix utility top, you can see 13 cores being utilized for your simulation as one extra core is used to run the master thread (core that runs all the non-parallel portion of the design). Usage % vcs -fgp -full64 <other_Options> Example % vcs -fgp -full64 -fgp=multisocket consideration the socket that is running the thread. This helps in further optimizing the performance. Usage vcs -fgp=multisocket <other_options> Example % vcs -fgp=multisocket -full64 This section describes the following:"
-fgp=allow_less_cores,are required by the simulation” to the soft limit as “Maximum <value> number of cores are required by the simulation”.
-fgp=cpu_affinity,used.
-fgp=diag:ruse,end of the simulation.
-fgp=fsdb_adjust_cores,from a hard limit of M number of cores to a soft limit of maximum of M number of cores required for FSDB dumping.
-fgp=schedpli,design has large number of PLI call-backs at runtime.
-fgp=single_socket_mode,socket.
-upf,Automatically enables VCS NLP. You must specify the UPF file
+lint=MV_DB_CELL_MISMATCH,Generates a warning message when there is a mismatch between the Verilog definition and liberty definition of a cell.
+lint=TFIPC-L,Allows you to detect unconnected ports in the design.
-lpa_bind,Allows you to specify the custom bind Tcl file
-lpa_bind_filelist,Allows you to specify a file list listing multiple custom bind checker Tcl files.
-mvrpt,Allows you to redirect or rename the compile static reports directory.
-pa_random_corrupt,Enables the random corruption feature.
-power_config,Allows you to specify the compile-time configuration file that specifies the search_path and link_library for the liberty (.db) files.
-power_top,Allows you to specify power top.
-power=accurate,"Skips the insertion of the virtual isolation, repeater, and SRSN buffer cells."
-power=apfcompat,"Skips the corruption of reals, constants, and the signals assigned inside the initial blocks."
-power=auto_complete,Enables the auto-completion for the UPF commands and command options.
-power=ackport_driver_check,"Allows you to check for the drivers of the ack_port signal in the entire design hierarchy and reports the UPF_MDOAPS warning message (with driver information), if there is a driver that can contribute to a value on the ack_port signal present in the design."
-power=assert_clk_during_shutdown,Allows custom assertion checking for clock inputs to power domain that do not toggle when the domain is OFF. -power=assert_async_during_shutdown Allows custom assertion checking for reset inputs to power domain that do not toggle when the domain is OFF.
-power=assert_reset_sequence,Enables power-on reset assertions.
-power=buffers_as_gates,Treats buf primitive as gate only for corruption.
-power=check_power_down_write,"Generates the runtime warning messages when an attempt to write on a power domain element is detected, and the domain is in CORRUPT simstate."
-power=clamp_toggle_check,Assertion check happens when isolation is enabled/disabled.
-power=cov_pd_simstate,Enables the power domain simstate coverage.
-power=cov_port_state,Enables port state coverage.
-power=cov_implicit_supply_set,Enables coverage on the implicit supply sets only (implicit supply set simstate and power state).
-power=cov_explicit_supply_set,Enables coverage on the explicit supply sets only (explicit supply set simstate and power state).
-power=cov_supply_set,Enables all types of supply set coverage.
-power=cov_psw,"Enables power switch coverage for the following low power objects: Power switch state (on/off/partial_on), ACK port, and Control port"
-power=cov_pst,Enables PST coverage.
-power=cov_pst_state,Enables only the state coverage of PST.
-power=cov_pst_transition,Enables only transition coverage of PST.
-power=cov_ret,Enables coverage on the retention save and restore signals.
-power=cov_iso,Enables coverage on the isolation enable signal.
-power=dont_touch_mem,Prevents the corruption of memories that are initialized using $readmem* and have no other structural drivers. -power=dccompat_gen_inst_name_match Treats the generate instance name (any depth) as a single token for matching wildcard character “*” specified in the UPF.
-power=dont_isolate_floating_nets,Skips the isolation on the undriven/floating boundary ports.
-power=dump_pd_tchk_rpt,Allows you to capture the information related to the timing checks on elements of a power domain in the pd_tcheck_mapping.rpt file.
-power=dump_analyzed_upf,UPF file is dumped as a new output UPF file.
-power=force_priority,Overrides corruption with the HDL force.
-power=ignore_latch_retention,Ignores latches from retention.
-power=ignore_redundant_constraint,Ignores SRSN/SPA buffers specified on all intermediate boundary ports.
-power=no_fork,Disables the fork flow and performs low power analysis in a single process using the VCS save/restore mechanism.
-power=pass_thru_const,Skips the corruption on constants.
-power=portconnect_exprs,Enables isolation/corruption on the logical expressions in the port map.
-power=pst_state_msg,Illegal state transitions (PST state changes to or from ILLEGAL state) Invalid combinations (Any valid combination of PST state supplies that is not defined in the PST table)
-power=report_port_no_toggle,Allows you to check toggle on the crossover ports when the supply source changes its state from power-down to power-up (FULL_ON) until the end of the simulation.
-power=rtlpg,Enables VCS NLP to automatically match the supply nets or ports created in UPF with the nets or ports in RTL within the same scope.
-power=src_off_clamp_check,Enables automated check at runtime for an assertion of isolation enable when the source supply is OFF.
-power=use_upf_phase,Initializes and updates supply sources as late as possible at time 0.
-power=UPF_dont_touch_BC,Enables the backwards compatibility when the UPF_dont_touch attribute is used in UPF.
-power=unconnected_bias_pins_on,Keeps the unconnected bias PG pins of cells ON.
-power=upf_lint,Generates a warning message for every power domain without explicit specification of power or ground nets in the UPF.
-power=upf_protect1,"Automatically encrypt all the UPF files, including the UPF files specified with the load_upf command."
-power=undriven_supplies_off,Allows you to initialize all the supply ports (including supply pads) and supply set functions with no explicit nets to OFF state.
-power=verbose1,Allows the tool to display the boundary_port_partitioning.rpt file. This file shows the repeaters implemented and its associated supplies.
-power=voltage_regulator_cell,Allows you to specify default ON voltage for internal PG pins of a macro.
-power=write_mvinfo,"Allows you to generate the virtual isolation insertion report (isolation_insertion_info.txt) / virtual isolation inference report (new_isolation_association.rpt). -upf vcs step Usage % vcs -upf <upf_file> -power=<power_options> <vcs_compile_options> <source_files> Example % vcs -sverilog -upf file.upf -power=accurate design.v +lint=MV_DB_CELL_MISMATCH Generates a warning message when there is a mismatch between the Verilog definition and liberty definition of a cell. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> +lint=MV_DB_CELL_MISMATCH Example % vcs -sverilog -upf file.upf design.v +lint=MV_DB_CELL_MISMATCH +lint=TFIPC-L Allows you to detect unconnected ports in the design. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> +lint=TFIPC-L Example % vcs -sverilog -upf file.upf design.v +lint=TFIPC-L -lpa_bind Allows you to specify the custom bind Tcl file. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -lpa_bind <filename> Example % vcs -sverilog -upf file.upf design.v -lpa_bind file.txt -lpa_bind_filelist Allows you to specify a file list listing multiple custom bind checker Tcl files. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -lpa_bind_filelist <file_list> Example % vcs -sverilog -upf file.upf design.v -lpa_bind_filelist file.txt -mvrpt Allows you to redirect or rename the compile static reports directory. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -mvrpt=<full_path_to_directory> Example % vcs -sverilog -upf file.upf design.v -mvrpt=/my_path/dir_test/reports -pa_random_corrupt Enables the random corruption feature. Usage Use the following options to enable this feature in VCS NLP: % vcs -upf <upf_file> <vcs_compile_options> <source_files> Example Compile: % vcs -sverilog test.v -upf test.upf -pa_random_corrupt Run: % simv -power lpconfig.tcl -power_config Allows you to specify the compile-time configuration file that specifies the search_path and link_library for the liberty (.db) files. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power_config <config file> Example % vcs -sverilog test.v -upf test.upf -power_config config -power_top Allows you to specify power top. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power_top <module name> Example % vcs -sverilog test.v -upf test.upf -power_top top -power=accurate useful when the isolation, repeater, or SRSN buffer cells are pre-inserted in the design, and the same strategies are defined in the UPF. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=accurate Example % vcs -sverilog test.v -upf test.upf -power=accurate -power=apfcompat Skips the corruption of reals, constants, and the signals assigned inside the initial blocks. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=apfcompat Example % vcs -sverilog test.v -upf test.upf -power=apfcompat -power=auto_complete Enables the auto-completion for the UPF commands and command options. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=auto_complete Example % vcs -sverilog test.v -upf test.upf -power=auto_complete -power=ackport_driver_check Allows you to check for the drivers of the ack_portsignal in the entire design hierarchy and reports the UPF_MDOAPS warning message (with driver information), if there is a driver that can contribute to a value on the ack_port signal present in the design. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=ackport_driver_check Example % vcs -sverilog test.v -upf test.upf -power=ackport_driver_check -power=assert_clk_during_shutdown Allows custom assertion checking for clock inputs to power domain that do not toggle when the domain is OFF. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=assert_clk_during_shutdown Example % vcs -sverilog test.v -upf test.upf -power=assert_clk_during_shutdown -power=assert_async_during_shutdown Allows custom assertion checking for reset inputs to power domain that do not toggle when the domain is OFF. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=assert_async_during_shutdown Example % vcs -sverilog test.v -upf test.upf -power=assert_async_during_shutdown -power=assert_reset_sequence Enables power-on reset assertions. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=assert_reset_sequence Example % vcs -sverilog test.v -upf test.upf -power=assert_reset_sequence -power=buffers_as_gates Treats buf primitive as gate only for corruption. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=buffers_as_gates Example % vcs -sverilog test.v -upf test.upf -power=buffers_as_gates -power=check_power_down_write Generates the runtime warning messages when an attempt to write on a power domain element is detected, and the domain is in CORRUPT simstate. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=check_power_down_write Example % vcs -sverilog test.v -upf test.upf -power=check_power_down_write -power=clamp_toggle_check_on_iso_enable Adds an assertion that checks for a stable value on output of an isolation cell only when isolation is enabled. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=clamp_toggle_check_on_iso_enable Example % vcs -sverilog test.v -upf test.upf -power=clamp_toggle_check_on_iso_enable -power=clamp_toggle_check Assertion check happens when isolation is enabled/disabled. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=clamp_toggle_check Example % vcs -sverilog test.v -upf test.upf -power=clamp_toggle_check -power=coverage Creates covergroups for low power objects based on the power intent (UPF). Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=coverage Example % vcs -sverilog test.v -upf test.upf -power=coverage -power=cov_pd_simstate Enables the power domain simstate coverage. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=cov_pd_simstate Example % vcs -sverilog test.v -upf test.upf -power=cov_pd_simstate -power=cov_port_state Enables port state coverage. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=cov_port_state Example % vcs -sverilog test.v -upf test.upf -power=cov_port_state -power=cov_implicit_supply_set Enables coverage on the implicit supply sets only (implicit supply set simstate and power state). Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=cov_implicit_supply_set Example % vcs -sverilog test.v -upf test.upf -power=cov_implicit_supply_set -power=cov_explicit_supply_set Enables coverage on the explicit supply sets only (explicit supply set simstate and power state). Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=cov_explicit_supply_set Example % vcs -sverilog test.v -upf test.upf -power=cov_explicit_supply_set -power=cov_supply_set Enables all types of supply set coverage. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=cov_supply_set Example % vcs -sverilog test.v -upf test.upf -power=cov_supply_set -power=cov_psw Enables power switch coverage for the following low power objects: Power switch state (on/off/partial_on), ACK port, and Control port Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=cov_psw Example % vcs -sverilog test.v -upf test.upf -power=cov_psw -power=cov_pst Enables PST coverage. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=cov_pst Example % vcs -sverilog test.v -upf test.upf -power=cov_pst -power=cov_pst_state Enables only the state coverage of PST. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=cov_pst_state Example % vcs -sverilog test.v -upf test.upf -power=cov_pst_state -power=cov_pst_transition Enables only transition coverage of PST. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=cov_pst_transition Example % vcs -sverilog test.v -upf test.upf -power=cov_pst_transition -power=cov_ret Enables coverage on the retention save and restore signals. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=cov_ret Example % vcs -sverilog test.v -upf test.upf -power=cov_ret -power=cov_iso Enables coverage on the isolation enable signal. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=cov_iso Example % vcs -sverilog test.v -upf test.upf -power=cov_iso -power=dont_touch_mem Prevents the corruption of memories that are initialized using $readmem*and have no other structural drivers. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=dont_touch_mem Example % vcs -sverilog test.v -upf test.upf -power=dont_touch_mem -power=dccompat_gen_inst_name_match Treats the generate instance name (any depth) as a single token for matching wildcard character “*” specified in the UPF. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=dccompat_gen_inst_name_match Example % vcs -sverilog test.v -upf test.upf -power=dccompat_gen_inst_name_match -power=dont_isolate_floating_nets Skips the isolation on the undriven/floating boundary ports. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=dont_isolate_floating_nets Example % vcs -sverilog test.v -upf test.upf -power=dont_isolate_floating_nets -power=dump_hvp generate low power coverage reports. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=coverage -power=dump_hvp Example % vcs -sverilog test.v -upf test.upf -power=coverage -power=dump_hvp -power=dump_pd_tchk_rpt Allows you to capture the information related to the timing checks on elements of a power domain in the pd_tcheck_mapping.rpt file. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=dump_pd_tchk_rpt Example % vcs -sverilog test.v -upf test.upf -power=dump_pd_tchk_rpt -power=default_applies_to_dont_filter -elements applies to both input and output ports. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=default_applies_to_dont_filter Example % vcs -sverilog test.v -upf test.upf -power=default_applies_to_dont_filter -power=dump_analyzed_upf a new output UPF file. The output UPF file is dumped as the mvsim_native_reports/ synthesized_tokens.upf file when the input UPF compiles without any errors. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=dump_analyzed_upf Example % vcs -sverilog test.v -upf test.upf -power=dump_analyzed_upf -power=force_priority Overrides corruption with the HDL force. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=force_priority Example % vcs -sverilog test.v -upf test.upf -power=force_priority -power=ignore_latch_retention Ignores latches from retention. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=ignore_latch_retention Example % vcs -sverilog test.v -upf test.upf -power=ignore_latch_retention -power=ignore_redundant_constraint Ignores SRSN/SPA buffers specified on all intermediate boundary ports. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=ignore_redundant_constraint Example % vcs -sverilog test.v -upf test.upf -power=ignore_redundant_constraint -power_report=isolation_unassociated Reports all unassociated isolation ports and violation reasons. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power_report=isolation_unassociated Example % vcs -sverilog test.v -upf test.upf -power_report=isolation_unassociated -power=no_fork Disables the fork flow and performs low power analysis in a single process using the VCS save/restore mechanism. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=no_fork Example % vcs -sverilog test.v -upf test.upf -power=no_fork -power=pass_thru_const Skips the corruption on constants. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=pass_thru_const Example % vcs -sverilog test.v -upf test.upf -power=pass_thru_const -power=portconnect_exprs Enables isolation/corruption on the logical expressions in the port map. By default, isolation/corruption is not enabled on the logical expressions in the port map. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=portconnect_exprs Example % vcs -sverilog test.v -upf test.upf -power=portconnect_exprs -power=pst_state_msg Illegal state transitions (PST state changes to or from ILLEGAL state) Invalid combinations (Any valid combination of PST state supplies that is not defined in the PST table) Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=pst_state_msg Example % vcs -sverilog test.v -upf test.upf -power=pst_state_msg -power=report_port_no_toggle Allows you to check toggle on the crossover ports when the supply source changes its state from power-down to power-up (FULL_ON) until the end of the simulation. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=report_port_no_toggle Example % vcs -sverilog test.v -upf test.upf -power=report_port_no_toggle -power=rtlpg Enables VCS NLP to automatically match the supply nets or ports created in UPF with the nets or ports in RTL within the same scope. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=rtlpg Example % vcs -sverilog test.v -upf test.upf -power=rtlpg -power=src_off_clamp_check Enables automated check at runtime for an assertion of isolation enable when the source supply is OFF. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=src_off_clamp_check Example % vcs -sverilog test.v -upf test.upf -power=src_off_clamp_check -power=use_upf_phase Initializes and updates supply sources as late as possible at time 0. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=use_upf_phase Example % vcs -sverilog test.v -upf test.upf -power=use_upf_phase -power=UPF_dont_touch_BC Enables the backwards compatibility when the UPF_dont_touch attribute is used in UPF. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=UPF_dont_touch_BC Example % vcs -sverilog test.v -upf test.upf -power=UPF_dont_touch_BC -power=unconnected_bias_pins_on Keeps the unconnected bias PG pins of cells ON. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=unconnected_bias_pins_on Example % vcs -sverilog test.v -upf test.upf -power=unconnected_bias_pins_on -power=upf_lint Generates a warning message for every power domain without explicit specification of power or ground nets in the UPF. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=upf_lint Example % vcs -sverilog test.v -upf test.upf -power=upf_lint -power=upf_protect1 Automatically encrypt all the UPF files, including the UPF files specified with the load_upf command. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=upf_protect1 Example % vcs -sverilog test.v -upf test.upf -power=upf_protect1 -power=undriven_supplies_off Allows you to initialize all the supply ports (including supply pads) and supply set functions with no explicit nets to OFF state. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=undriven_supplies_off Example % vcs -sverilog test.v -upf test.upf -power=undriven_supplies_off -power=verbose1 Allows the tool to display the boundary_port_partitioning.rpt file. This file shows the repeaters implemented and its associated supplies. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=verbose1 Example % vcs -sverilog test.v -upf test.upf -power=verbose1 -power=voltage_regulator_cell Allows you to specify default ON voltage for internal PG pins of a macro. Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=voltage_regulator_cell Example % vcs -sverilog test.v -upf test.upf -power=voltage_regulator_cell -power=write_mvinfo Allows you to generate the virtual isolation insertion report (isolation_insertion_info.txt) / virtual isolation inference report (new_isolation_association.rpt). Usage % vcs -upf <upf_file> <vcs_compile_options> <source_files> -power=write_mvinfo Example % vcs -sverilog test.v -upf test.upf -power=write_mvinfo This section describes the following:"
-power,Allows you to specify the runtime configuration file. You can specify the runtime design attributes and Unified Message Control options in the runtime configuration file.
-covg_disable_cg[=ALL],user-defined).
-covg_disable_cg=LP,Disables only low power covergroups.
-covg_disable_cg=USER,"Disables only user-defined covergroups. -power Allows you to specify the runtime configuration file. You can specify the runtime design attributes and Unified Message Control options in the runtime configuration file. Usage % simv -power <config_file_name> Example % simv -power power_config.tcl Design attributes are defined in the power_config.tcl file. For example, as follows: set_design_attributes -elements { hierarchical_name_of_supply_net} -attribute SNPS_default_supply_net_state STATE_NAME -covg_disable_cg[=ALL] Disables all covergroups (low power and user-defined). Usage % simv -covg_disable_cg[=ALL] Example % simv -covg_disable_cg[=ALL] -covg_disable_cg=LP Disables only low power covergroups. Usage % simv -covg_disable_cg=LP Example % simv -covg_disable_cg=LP -covg_disable_cg=USER Disables only user-defined covergroups. Usage % simv -covg_disable_cg=USER Example % simv -covg_disable_cg=USER 23 Methodology (UVM/VVM/OVM) Options This section describes the following :"
+define+UVM_VCS_RECORD,"-ntb_opts rvm Usage % vcs -sverilog -ntb_opts rvm [compile-time_options] Verilog_files Example % vcs -sverilog -ntb_opts rvm test.sv -ntb_opts uvm-1.1 Usage %vcs -sverilog -ntb_opts uvm-1.1 [other_compile_options] \user_source_files_using_UVM Example %vcs -sverilog -ntb_opts uvm-1.1 test.sv -ntb_opts uvm-1.2 Usage %vcs -sverilog -ntb_opts uvm-1.2 [other_compile_options] \user_source_files_using_UVM Example %vcs -sverilog -ntb_opts uvm-1.2 test.sv -ntb_opts uvm-ieee Usage vcs -sverilog -ntb_opts uvm-ieee [other_compile_options] \user_source_files_using_UVM Example vcs -sverilog -ntb_opts uvm-ieee test.sv -ntb_opts uvm-ieee-2020 Usage vcs -sverilog -ntb_opts uvm-ieee-2020 [other_compile_options] \user_source_files_using_UVM Example vcs -sverilog -ntb_opts uvm-ieee-2020 test.sv -ntb_opts uvm-ieee-2020-2.0 Usage vcs -sverilog -ntb_opts uvm-ieee-2020-2.0 [other_compile_options] \user_source_files_using_UVM Example vcs -sverilog -ntb_opts uvm-ieee-2020-2.0 test.sv +define+UVM_VCS_RECORD VCS allows you to record the UVM phases and enables the phase debugging capabilities. With this phase recording, you can see the start time and the end time for each component in each phase and the connectivity information for ports in end_of_elab. This feature is available with UVM-1.1 libraries in VCS. To turn on UVM phase recording, use +UVM_PHASE_RECORD at runtime and pass the simulation VPD file. You can enable UVM phase recording in your UVM-1.1 by running the VCS 3-step flow: 1. Define +UVM_VCS_RECORD at first step while compiling UVM library: % vlogan -ntb_opts uvm +define+UVM_VCS_RECORD % vlogan -ntb_opts uvm [compile_options] \ % vcs -sverilog -ntb_opts -debug_access [compile_options] 3. Enable phase recording during simulation by adding +UVM_PHASE_RECORD % simv +UVM_TESTNAME= \+UVM_PHASE_RECORD [simv_options] You can then use Verdi to debug the UVM phases in UVM Phase View. This is supported for Interactive Debug. 24 Debug Options This section describes the following :"
-debug_region,Enables the reporting of debug capability added to the design.
-kdb,Generates Verdi Knowledge Database (KDB).
-kdb=only,Generates only the Verdi KDB that is required for both post-process and interactive simulation debug with Verdi.
-assert_d,assertion dumping capabilities from the -debug_access+designer and -debug_access+simctrl options.
+assert_c,capabilities.
+assert_f,• Dumping failures and successes for both concurrent and immediate assertions • Assertions control Usage % vcs -debug_access(+<option_name>)* Example % vcs -debug_access+r+line+class+drivers -debug_access(+)*(-)* Usage % vcs -debug_access(+)*(-)* VCS removes the debug capabilities of the options specified with the “-” sign. Example % vcs -debug_acc+all-f VCS removes the force capability. -debug_region -debug_region to the desired portion of a design. time. Table 6            Supported Options of -debug_region -debug_region is not specified
+cell,"Applies debug capabilities to both real   Debug capability is not applied to +cell cell modules and the ports of real cell   both real cell modules and the ports modules. Cell modules are Verilog modules of real cell modules. that are bound with `celldefine and `endcelldefine compiler directives, as described in Verilog 1800-2012 LRM, section 22.10."
+cellports,Applies debug capabilities only to the ports   Debug capability is not added to the +cellports of real cell modules and lib cell modules.     ports of real cell modules. Table 6          Supported Options of -debug_region (Continued) -debug_region is not specified
-lib,-lib debug capabilities from libraries (files      libraries. passed to VCS with the preceding -v/-y compiler options).
+encrypt,"Applies debug capabilities to the fully       Debug capability is not applied to +encrypt encrypted instances (modules, programs,       the fully encrypted instances. packages, and interfaces). =sv debug capabilities only to the program,      Verilog, VHDL, and SystemC. package, interface, or module containing SystemVerilog constructs, and to SystemC. Debug capabilities are applied to SystemVerilog code inside cells and fully encrypted blocks only when the +cell are applied to the Verilog code inside fully encrypted modules only when the +encrypt =verilog applies debug capabilities to all Verilog code Verilog, VHDL, and SystemC. and to SystemC. Debug capabilities are applied to the Verilog code inside cells only capabilities are applied to the Verilog code inside fully encrypted modules only when =vhdl debug capabilities to the VHDL code and to Verilog, VHDL, and SystemC. SystemC. Usage % vcs -debug_region(option_name)(option_name)* Example % vcs -debug_access+class -debug_region+cell VCS applies class debug capabilities to the design and cell modules. -debug_report Enables the reporting of debug capability added to the design. The debug capability diagnostics report allows you to identify the source of debug capability and to reduce debug capability in an informed manner. Example % vcs -P pli.tab -debug_access+cbk -debug_report top.sv +dumpports+mxccn EVCD file contains the CCN driver when the CCN is connected through INPUT or OUTPUT ports in Verilog-VHDL or VHDL-Verilog mixed designs. However, if a target VHDL instance lies inside a VHDL connected through INOUT ports, you must use the Usage % vhdlan <design files> % vlogan <design file> % vcs +optconfigfile+file_name.cfg -debug_access+r+cbk+drivers top_module +dumpports+mxccn Example Both testbench and DUT have VHDL and the design is mixed (VHDL and Verilog). The Verilog design has CCN that is connected to VHDL through the INOUT ports. -kdb Generates Verdi Knowledge Database (KDB). In case of VCS three-step flow, add the Usage // Compile the design using VCS and generate both VCS database and Verdi KDB // // -kdb in VCS two-step flow %> vcs -kdb <compile_options> <source files> // -kdb in VCS three-step flow % vlogan -kdb <vlogan_options> <source files> % vhdlan -kdb <vhdlan_options> <source files> % vcs -kdb <top_name> -kdb=only Generates only the Verdi KDB that is required for both post-process and interactive simulation debug with Verdi. Usage and does not disturb the existing VCS compile data/executables. Following is the use model in the VCS two-step flow: % vcs -kdb=only <compile_options> <source files> Following is the use model in the VCS three-step flow: % vlogan -kdb <vlogan_options> <source files> % vhdlan -kdb <vhdlan_options> <source files> % vcs -kdb=only <top_name> <compile_options> -diag env Enables you to dump all environment variables that are set before starting the compilation and the simulation process. The list of environment variables that are set in the terminal is stored in the log file, which can be used to debug the environment related issues when the verification setup is complex and multiple and when nested scripts are used. VCS dumps all the environment variables in the vcs_env_diag_<pid>.log log file that is generated in the simv.daidir directory. Usage % vcs -diag env This section describes the following :"
+vcs+learn+pli,"ACC capabilities enable debugging operations; however, they have a performance cost; so enable them only where you need them. debugging operations so that you can recompile your design, and in the next simulation, enable them only where you need them."
+vcs+mipd+noalias,"Disables aliasing for all ports whenever mip, mipb capabilities have been specified."
+dumpports+portdir,"+dumpports+portdir module is considered as golden for input and output ports, and the direction is analyzed only for inout ports."
-sdc=verify_reset,at all resettable flops under the current_design when reset trigger happens.
-sdc=j:<n>,-sdc_parallel
-sdc=clockglitch,signal of a clock gater to expose bugs due to clock shifting in GLS and RTL designs.
-sdc=mda_struct,structures.
--sdc=allow_nba,non-blocking assignment in the non-clocked procedural blocks.
-sdc=latch,points for timing paths.
-sdc=no_x,path.
-sdc=off,runtime checks.
-sdc=diag:path,violating paths.
-sdc=random_delay,"In this mode, delay between source and destination is randomly selected between 0 to N(N= MCP delay specified in set_multicycle_path command) cycles"
-sdc=starttime:<time>,violations and clock sanity checks are tracked and reported
-sdc=clockglitch:<N>,for clock shifting delay.
-sdc=sanity:clock:noexit,Although the SDC analysis will terminate for paths with will continue for other clocks with no clock period violation.
-sdc=verify_reset:off,runtime SDC checks proceed as normal.
-sdc=dynamicfrequency,"(from the testbench) and that is used to recalculate the relevant delay values based on the clock. Also, any change in clock period also awaits for stabilization before initiating SDC analysis based on the updated values."
-unr=config.txt,"This switch invokes UNR flow which uses VC Formal Coverage Analyzer under the hood to find unreachable coverage targets in the design. -unr=config.txt This switch invokes UNR flow which uses VC Formal Coverage Analyzer under the hood to find unreachable coverage targets in the design and saves them in an exclusion file which can then be read with simulation coverage database to generate the final coverage score. The configuration file sent with this switch helps to setup the Formal unreachability analysis by providing the necessary options. Usage The following is the usage: % vcs -cm line+cond+tgl+branch+fsm -unr=config.txt <other_options> Examples % vcs -cm line+cond+tgl+branch+fsm -unr=config.txt For more details, refer to the Verification Continuum Guide to VCS Unreachability Analysis. 27 Licensing Options This section describes the following :"
-licwait timeout,"Enables VCS to retry for a license until timeout expires, where timeout is the time in minutes. | Enables license queuing, where timeout is the time in minutes that VCS waits for a license before finally exiting."
-licqueue /,"Tells VCS to try for the license till it finds the license. +vcs+lic+wait VCS_LICENSE_WAIT       You must set the VCS_LICENSE_WAIT variable to 1 and use the -licwait timeout Enables license queuing, where timeout is the time in minutes that VCS waits for a license before finally exiting. Usage % vcs -licwait timeout Example % vcs -licwait 10 <other compile options> Here, VCS waits for the license for 10 minutes. -licqueue /+vcs+lic+wait Tells VCS to try for the license till it finds the license. If there are multiple jobs asking for a license, then any one of those jobs get the license (similar to the older or the deprecated Usage % vcs -licqueue <other compile options> or % vcs +vcs+lic+wait VCS_LICENSE_WAIT enables the license queuing. Thus, the first job to enter the queue gets the license when Usage % vcs VCS_LICENSE_WAIT This section describes the following : | Tells VCS to wait for a network license if none is available. +vcs+lic+wait VCS_LICENSE_WAIT          You must set the VCS_LICENSE_WAIT variable to 1 and use the -licwait timeout Enables license queuing, where timeout is the time in minutes that VCS waits for a license before finally exiting. Usage % simv -licwait timeout -licqueue / +vcs+lic+wait Tells VCS to try for the license till it finds the license. If there are multiple jobs asking for a license, then any one of those jobs get the license (similar to the older or the deprecated Usage % simv -licqueue or % simv +vcs+lic+wait VCS_LICENSE_WAIT enables the license queuing. Thus, the first job to enter the queue gets the license when Usage setenv VCS_LICENSE_WAIT 1 simv -licqueue <simv options> 28 RACE Options This section describes the following :"
-hsopt=racedetect,"Enables detection of clock-data races during simulation. -race Enables dynamic race detection (read-write races, write-write races) for the entire design. Usage % vcs <design_file> -race Example % vcs test.v -race -racecd Enables race detection for the part of your design that is enclosed between the 'race and 'endrace compiler directives. Usage % vcs <design_file> -racecd Example % vcs test.v -racecd +race=all Usage % vcs <design_file> +race=all Example % vcs test.v +race=all -hsopt=racedetect Enables detection of clock-data races during simulation. Usage % vcs <design_file> -hsopt=racedetect Example % vcs test.v -hsopt=racedetect"
